/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n": typeof types.CatalogSyncProgressDocument,
    "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetPricingRulesDocument,
    "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreatePricingRuleDocument,
    "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdatePricingRuleDocument,
    "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n": typeof types.DeletePricingRuleDocument,
    "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n": typeof types.TogglePricingRuleDocument,
    "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      type\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n": typeof types.ClonePricingRuleDocument,
    "\n  query GetTrips {\n    trips {\n      id\n      name\n      description\n      region\n      countries {\n        iso\n        name\n      }\n      createdAt\n      updatedAt\n      createdBy\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n    }\n  }\n": typeof types.GetTripsDocument,
    "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n": typeof types.CreateTripDocument,
    "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n": typeof types.UpdateTripDocument,
    "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n": typeof types.DeleteTripDocument,
    "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n": typeof types.GetUsersDocument,
    "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n": typeof types.GetOrdersDocument,
    "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n": typeof types.GetUserOrdersDocument,
    "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserRoleDocument,
    "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n": typeof types.InviteAdminUserDocument,
    "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCatalogBundlesDocument,
    "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n": typeof types.AssignPackageToUserDocument,
    "\n  query CalculatePricing($numOfDays: Int!, $countryId: String!, $paymentMethod: PaymentMethod) {\n    calculatePrice(numOfDays: $numOfDays, countryId: $countryId, paymentMethod: $paymentMethod) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n": typeof types.CalculatePricingDocument,
    "\n  query CalculateBatchPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingRate\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n": typeof types.CalculateBatchPricingDocument,
    "\n  query CalculatePriceWithRules($input: CalculatePriceInput!) {\n    calculatePriceWithRules(input: $input) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": typeof types.CalculatePriceWithRulesDocument,
    "\n  query CalculateBatchPricingWithRules($requests: [CalculatePriceInput!]!) {\n    calculateBatchPricing(requests: $requests) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": typeof types.CalculateBatchPricingWithRulesDocument,
    "\n  query SimulatePricingRule($rule: CreatePricingRuleInput!, $testContext: TestPricingContext!) {\n    simulatePricingRule(rule: $rule, testContext: $testContext) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": typeof types.SimulatePricingRuleDocument,
    "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n": typeof types.DeleteUserDocument,
    "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n": typeof types.GetCountriesDocument,
    "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n": typeof types.GetBundlesByCountryDocument,
    "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": typeof types.GetCountriesWithBundlesDocument,
    "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n": typeof types.GetBundlesByRegionDocument,
    "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n": typeof types.GetBundlesByGroupDocument,
    "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": typeof types.GetRegionBundlesDocument,
    "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": typeof types.GetCountryBundlesDocument,
    "\n  query GetBundleGroups {\n    bundlesByGroup {\n      group\n    }\n  }\n": typeof types.GetBundleGroupsDocument,
    "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n": typeof types.GetPricingFiltersDocument,
    "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n": typeof types.GetHighDemandCountriesDocument,
    "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n": typeof types.ToggleHighDemandCountryDocument,
    "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCatalogSyncHistoryDocument,
    "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n": typeof types.TriggerCatalogSyncDocument,
    "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": typeof types.GetBundlesDocument,
};
const documents: Documents = {
    "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n": types.CatalogSyncProgressDocument,
    "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetPricingRulesDocument,
    "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreatePricingRuleDocument,
    "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdatePricingRuleDocument,
    "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n": types.DeletePricingRuleDocument,
    "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n": types.TogglePricingRuleDocument,
    "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      type\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n": types.ClonePricingRuleDocument,
    "\n  query GetTrips {\n    trips {\n      id\n      name\n      description\n      region\n      countries {\n        iso\n        name\n      }\n      createdAt\n      updatedAt\n      createdBy\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n    }\n  }\n": types.GetTripsDocument,
    "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n": types.CreateTripDocument,
    "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n": types.UpdateTripDocument,
    "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n": types.DeleteTripDocument,
    "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n": types.GetUsersDocument,
    "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n": types.GetOrdersDocument,
    "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n": types.GetUserOrdersDocument,
    "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserRoleDocument,
    "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n": types.InviteAdminUserDocument,
    "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n": types.GetCatalogBundlesDocument,
    "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n": types.AssignPackageToUserDocument,
    "\n  query CalculatePricing($numOfDays: Int!, $countryId: String!, $paymentMethod: PaymentMethod) {\n    calculatePrice(numOfDays: $numOfDays, countryId: $countryId, paymentMethod: $paymentMethod) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n": types.CalculatePricingDocument,
    "\n  query CalculateBatchPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingRate\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n": types.CalculateBatchPricingDocument,
    "\n  query CalculatePriceWithRules($input: CalculatePriceInput!) {\n    calculatePriceWithRules(input: $input) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": types.CalculatePriceWithRulesDocument,
    "\n  query CalculateBatchPricingWithRules($requests: [CalculatePriceInput!]!) {\n    calculateBatchPricing(requests: $requests) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": types.CalculateBatchPricingWithRulesDocument,
    "\n  query SimulatePricingRule($rule: CreatePricingRuleInput!, $testContext: TestPricingContext!) {\n    simulatePricingRule(rule: $rule, testContext: $testContext) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n": types.SimulatePricingRuleDocument,
    "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n": types.DeleteUserDocument,
    "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n": types.GetCountriesDocument,
    "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n": types.GetBundlesByCountryDocument,
    "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": types.GetCountriesWithBundlesDocument,
    "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n": types.GetBundlesByRegionDocument,
    "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n": types.GetBundlesByGroupDocument,
    "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": types.GetRegionBundlesDocument,
    "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": types.GetCountryBundlesDocument,
    "\n  query GetBundleGroups {\n    bundlesByGroup {\n      group\n    }\n  }\n": types.GetBundleGroupsDocument,
    "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n": types.GetPricingFiltersDocument,
    "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n": types.GetHighDemandCountriesDocument,
    "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n": types.ToggleHighDemandCountryDocument,
    "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": types.GetCatalogSyncHistoryDocument,
    "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n": types.TriggerCatalogSyncDocument,
    "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.GetBundlesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      type\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      type\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n"): (typeof documents)["\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      type\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTrips {\n    trips {\n      id\n      name\n      description\n      region\n      countries {\n        iso\n        name\n      }\n      createdAt\n      updatedAt\n      createdBy\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTrips {\n    trips {\n      id\n      name\n      description\n      region\n      countries {\n        iso\n        name\n      }\n      createdAt\n      updatedAt\n      createdBy\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        description\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n"): (typeof documents)["\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n"): (typeof documents)["\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n"): (typeof documents)["\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculatePricing($numOfDays: Int!, $countryId: String!, $paymentMethod: PaymentMethod) {\n    calculatePrice(numOfDays: $numOfDays, countryId: $countryId, paymentMethod: $paymentMethod) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n"): (typeof documents)["\n  query CalculatePricing($numOfDays: Int!, $countryId: String!, $paymentMethod: PaymentMethod) {\n    calculatePrice(numOfDays: $numOfDays, countryId: $countryId, paymentMethod: $paymentMethod) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculateBatchPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingRate\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n"): (typeof documents)["\n  query CalculateBatchPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      duration\n      cost\n      costPlus\n      totalCost\n      discountRate\n      discountValue\n      priceAfterDiscount\n      processingRate\n      processingCost\n      finalRevenue\n      currency\n      discountPerDay\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculatePriceWithRules($input: CalculatePriceInput!) {\n    calculatePriceWithRules(input: $input) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"): (typeof documents)["\n  query CalculatePriceWithRules($input: CalculatePriceInput!) {\n    calculatePriceWithRules(input: $input) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculateBatchPricingWithRules($requests: [CalculatePriceInput!]!) {\n    calculateBatchPricing(requests: $requests) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"): (typeof documents)["\n  query CalculateBatchPricingWithRules($requests: [CalculatePriceInput!]!) {\n    calculateBatchPricing(requests: $requests) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SimulatePricingRule($rule: CreatePricingRuleInput!, $testContext: TestPricingContext!) {\n    simulatePricingRule(rule: $rule, testContext: $testContext) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"): (typeof documents)["\n  query SimulatePricingRule($rule: CreatePricingRuleInput!, $testContext: TestPricingContext!) {\n    simulatePricingRule(rule: $rule, testContext: $testContext) {\n      baseCost\n      markup\n      subtotal\n      discounts {\n        ruleName\n        amount\n        type\n      }\n      totalDiscount\n      priceAfterDiscount\n      processingFee\n      processingRate\n      finalPrice\n      finalRevenue\n      revenueAfterProcessing\n      profit\n      maxRecommendedPrice\n      maxDiscountPercentage\n      appliedRules {\n        id\n        name\n        type\n        impact\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n"): (typeof documents)["\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundleGroups {\n    bundlesByGroup {\n      group\n    }\n  }\n"): (typeof documents)["\n  query GetBundleGroups {\n    bundlesByGroup {\n      group\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n"): (typeof documents)["\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;