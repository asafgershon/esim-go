/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n": typeof types.CatalogSyncProgressDocument,
    "\n  query GetAdminESIMDetails($iccid: String!) {\n    getAdminESIMDetails(iccid: $iccid) {\n      id\n      iccid\n      userId\n      orderId\n      status\n      customerRef\n      assignedDate\n      activationCode\n      qrCodeUrl\n      smdpAddress\n      matchingId\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      apiDetails\n      usage {\n        totalUsed\n        totalRemaining\n        activeBundles {\n          id\n          name\n          state\n          dataUsed\n          dataRemaining\n          startDate\n          endDate\n        }\n      }\n      order {\n        id\n        reference\n        status\n        bundleName\n        totalPrice\n        createdAt\n      }\n    }\n  }\n": typeof types.GetAdminEsimDetailsDocument,
    "\n  query GetOrderDetails($id: ID!) {\n    orderDetails(id: $id) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n      esims {\n        id\n        iccid\n        status\n        qrCode\n        smdpAddress\n        matchingId\n        customerRef\n        assignedDate\n        lastAction\n        actionDate\n        createdAt\n        installationLinks {\n          universalLink\n          lpaScheme\n        }\n      }\n    }\n  }\n": typeof types.GetOrderDetailsDocument,
    "\n  query GetCustomerESIMs($userId: ID!) {\n    getCustomerESIMs(userId: $userId) {\n      id\n      iccid\n      status\n      apiStatus\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      usage {\n        totalUsed\n        totalRemaining\n      }\n      esim_bundles\n    }\n  }\n": typeof types.GetCustomerEsiMsDocument,
    "\n  query GetPricingBlocks($filter: PricingBlockFilter) {\n    pricingBlocks(filter: $filter) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetPricingBlocksDocument,
    "\n  query GetPricingBlock($id: ID!) {\n    pricingBlock(id: $id) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetPricingBlockDocument,
    "\n  query GetPricingStrategies($filter: StrategyFilter) {\n    pricingStrategies(filter: $filter) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n    }\n  }\n": typeof types.GetPricingStrategiesDocument,
    "\n  query GetPricingStrategy($id: ID!) {\n    pricingStrategy(id: $id) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": typeof types.GetPricingStrategyDocument,
    "\n  query GetDefaultPricingStrategy {\n    defaultPricingStrategy {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": typeof types.GetDefaultPricingStrategyDocument,
    "\n  query GetUserTenants {\n    tenants {\n      slug\n      name\n      imgUrl\n    }\n  }\n": typeof types.GetUserTenantsDocument,
    "\n  query GetAllTenants {\n    allTenants {\n      nodes {\n        slug\n        name\n        imgUrl\n        tenantType\n        userCount\n      }\n      totalCount\n    }\n  }\n": typeof types.GetAllTenantsDocument,
    "\n  mutation CreateTenant($input: CreateTenantInput!) {\n    createTenant(input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n": typeof types.CreateTenantDocument,
    "\n  mutation UpdateTenant($slug: ID!, $input: UpdateTenantInput!) {\n    updateTenant(slug: $slug, input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n": typeof types.UpdateTenantDocument,
    "\n  mutation DeleteTenant($slug: ID!) {\n    deleteTenant(slug: $slug) {\n      success\n    }\n  }\n": typeof types.DeleteTenantDocument,
    "\n  query GetPaymentMethods {\n    paymentMethods {\n      value\n      label\n      description\n      processingRate\n      icon\n      isActive\n    }\n  }\n": typeof types.GetPaymentMethodsDocument,
    "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetPricingRulesDocument,
    "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreatePricingRuleDocument,
    "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdatePricingRuleDocument,
    "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n": typeof types.DeletePricingRuleDocument,
    "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n": typeof types.TogglePricingRuleDocument,
    "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      category\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n": typeof types.ClonePricingRuleDocument,
    "\n  query GetTrips {\n    trips {\n      id\n      name\n      title\n      description\n      bundleName\n      region\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      createdAt\n      updatedAt\n      createdBy\n    }\n  }\n": typeof types.GetTripsDocument,
    "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n": typeof types.CreateTripDocument,
    "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n": typeof types.UpdateTripDocument,
    "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n": typeof types.DeleteTripDocument,
    "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n": typeof types.GetUsersDocument,
    "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n": typeof types.GetOrdersDocument,
    "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n": typeof types.GetUserOrdersDocument,
    "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserRoleDocument,
    "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n": typeof types.InviteAdminUserDocument,
    "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCatalogBundlesDocument,
    "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n": typeof types.AssignPackageToUserDocument,
    "\n  query CalculateAdminPrice($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n": typeof types.CalculateAdminPriceDocument,
    "\n  query CalculateBatchAdminPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n": typeof types.CalculateBatchAdminPricingDocument,
    "\n  query SimulatePricing($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        duration\n        isUnlimited\n        data\n        group\n      }\n      country {\n        iso\n        name\n        region\n      }\n      duration\n      currency\n      # Full pricing breakdown for simulation\n      totalCost\n      discountValue\n      priceAfterDiscount\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      unusedDays\n      selectedReason\n      totalCostBeforeProcessing\n      # Enhanced fields for step-by-step tracking\n      pricingSteps {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      customerDiscounts {\n        name\n        amount\n        percentage\n        reason\n      }\n      savingsAmount\n      savingsPercentage\n      calculationTimeMs\n      rulesEvaluated\n    }\n  }\n": typeof types.SimulatePricingDocument,
    "\n  subscription PricingCalculationSteps($input: CalculatePriceInput!) {\n    pricingCalculationSteps(input: $input) {\n      correlationId\n      step {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      isComplete\n      totalSteps\n      completedSteps\n      error\n      finalBreakdown {\n        totalCost\n        discountValue\n        priceAfterDiscount\n        cost\n        markup\n        discountRate\n        processingRate\n        processingCost\n        finalRevenue\n        netProfit\n        discountPerDay\n        appliedRules {\n          name\n          category\n          impact\n        }\n        unusedDays\n        selectedReason\n        totalCostBeforeProcessing\n        pricingSteps {\n          order\n          name\n          priceBefore\n          priceAfter\n          impact\n          ruleId\n          metadata\n          timestamp\n        }\n        customerDiscounts {\n          name\n          amount\n          percentage\n          reason\n        }\n        savingsAmount\n        savingsPercentage\n        calculationTimeMs\n        rulesEvaluated\n      }\n    }\n  }\n": typeof types.PricingCalculationStepsDocument,
    "\n  subscription PricingPipelineProgress($correlationId: String!) {\n    pricingPipelineProgress(correlationId: $correlationId) {\n      correlationId\n      name\n      timestamp\n      state\n      appliedRules\n      debug\n    }\n  }\n": typeof types.PricingPipelineProgressDocument,
    "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n": typeof types.DeleteUserDocument,
    "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n": typeof types.GetCountriesDocument,
    "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n": typeof types.GetBundlesByCountryDocument,
    "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": typeof types.GetCountriesWithBundlesDocument,
    "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n": typeof types.GetBundlesByRegionDocument,
    "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n": typeof types.GetBundlesByGroupDocument,
    "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": typeof types.GetRegionBundlesDocument,
    "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          provider\n        }\n      }\n    }\n  }\n": typeof types.GetCountryBundlesDocument,
    "\n  query GetBundleGroups {\n    pricingFilters {\n      groups\n    }\n  }\n": typeof types.GetBundleGroupsDocument,
    "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n": typeof types.GetPricingFiltersDocument,
    "\n  query GetMarkupConfigData {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n    }\n    # We can also fetch existing markup configurations if needed\n    # markupConfigurations {\n    #   group\n    #   duration\n    #   markupValue\n    #   markupType\n    # }\n  }\n": typeof types.GetMarkupConfigDataDocument,
    "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n": typeof types.GetHighDemandCountriesDocument,
    "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n": typeof types.ToggleHighDemandCountryDocument,
    "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": typeof types.GetCatalogSyncHistoryDocument,
    "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n": typeof types.TriggerCatalogSyncDocument,
    "\n  query GetAirHaloPackages($filter: AirHaloPackageFilter) {\n    airHaloPackages(filter: $filter) {\n      data {\n        id\n        title\n        slug\n        image {\n          url\n          width\n          height\n        }\n        operators {\n          id\n          title\n          type\n          countries {\n            id\n            title\n            slug\n          }\n          packages {\n            id\n            type\n            title\n            shortInfo\n            data\n            amount\n            day\n            isUnlimited\n            voice\n            text\n            price {\n              value\n              currency\n            }\n            netPrice {\n              value\n              currency\n            }\n            prices {\n              netPrice {\n                value\n                currency\n              }\n              recommendedRetailPrice {\n                value\n                currency\n              }\n            }\n            qrInstallation\n            manualInstallation\n            isFairUsagePolicy\n            fairUsagePolicy\n          }\n          coverages {\n            networks {\n              name\n              type\n            }\n          }\n          apn {\n            name\n            username\n            password\n            ios {\n              name\n              username\n              password\n            }\n          }\n        }\n      }\n      links {\n        first\n        last\n        prev\n        next\n      }\n      meta {\n        currentPage\n        from\n        lastPage\n        path\n        perPage\n        to\n        total\n      }\n    }\n  }\n": typeof types.GetAirHaloPackagesDocument,
    "\n  query GetAirHaloCompatibleDevices {\n    airHaloCompatibleDevices {\n      data {\n        manufacturer\n        model\n        esimSupport\n      }\n    }\n  }\n": typeof types.GetAirHaloCompatibleDevicesDocument,
    "\n  query CompareAirHaloPackages($countryCode: String!) {\n    compareAirHaloPackages(countryCode: $countryCode) {\n      id\n      title\n      slug\n      image {\n        url\n        width\n        height\n      }\n      operators {\n        id\n        title\n        type\n        countries {\n          id\n          title\n          slug\n        }\n        packages {\n          id\n          type\n          title\n          shortInfo\n          data\n          amount\n          day\n          isUnlimited\n          voice\n          text\n          price {\n            value\n            currency\n          }\n          netPrice {\n            value\n            currency\n          }\n          prices {\n            netPrice {\n              value\n              currency\n            }\n            recommendedRetailPrice {\n              value\n              currency\n            }\n          }\n          qrInstallation\n          manualInstallation\n          isFairUsagePolicy\n          fairUsagePolicy\n        }\n        coverages {\n          networks {\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n": typeof types.CompareAirHaloPackagesDocument,
    "\n  query GetAirHaloPricingData($packageIds: [String!]!) {\n    airHaloPricingData(packageIds: $packageIds) {\n      id\n      type\n      title\n      shortInfo\n      data\n      amount\n      day\n      isUnlimited\n      voice\n      text\n      price {\n        value\n        currency\n      }\n      netPrice {\n        value\n        currency\n      }\n      prices {\n        netPrice {\n          value\n          currency\n        }\n        recommendedRetailPrice {\n          value\n          currency\n        }\n      }\n      qrInstallation\n      manualInstallation\n      isFairUsagePolicy\n      fairUsagePolicy\n    }\n  }\n": typeof types.GetAirHaloPricingDataDocument,
    "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": typeof types.GetBundlesDocument,
    "\n  query GetAllESIMs {\n    getAllESIMs {\n      id\n      iccid\n      status\n      apiStatus\n      userId\n      orderId\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      user {\n        id\n        email\n        firstName\n        lastName\n      }\n      order {\n        id\n        reference\n        bundleName\n      }\n      usage {\n        totalUsed\n        totalRemaining\n      }\n    }\n  }\n": typeof types.GetAllEsiMsDocument,
};
const documents: Documents = {
    "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n": types.CatalogSyncProgressDocument,
    "\n  query GetAdminESIMDetails($iccid: String!) {\n    getAdminESIMDetails(iccid: $iccid) {\n      id\n      iccid\n      userId\n      orderId\n      status\n      customerRef\n      assignedDate\n      activationCode\n      qrCodeUrl\n      smdpAddress\n      matchingId\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      apiDetails\n      usage {\n        totalUsed\n        totalRemaining\n        activeBundles {\n          id\n          name\n          state\n          dataUsed\n          dataRemaining\n          startDate\n          endDate\n        }\n      }\n      order {\n        id\n        reference\n        status\n        bundleName\n        totalPrice\n        createdAt\n      }\n    }\n  }\n": types.GetAdminEsimDetailsDocument,
    "\n  query GetOrderDetails($id: ID!) {\n    orderDetails(id: $id) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n      esims {\n        id\n        iccid\n        status\n        qrCode\n        smdpAddress\n        matchingId\n        customerRef\n        assignedDate\n        lastAction\n        actionDate\n        createdAt\n        installationLinks {\n          universalLink\n          lpaScheme\n        }\n      }\n    }\n  }\n": types.GetOrderDetailsDocument,
    "\n  query GetCustomerESIMs($userId: ID!) {\n    getCustomerESIMs(userId: $userId) {\n      id\n      iccid\n      status\n      apiStatus\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      usage {\n        totalUsed\n        totalRemaining\n      }\n      esim_bundles\n    }\n  }\n": types.GetCustomerEsiMsDocument,
    "\n  query GetPricingBlocks($filter: PricingBlockFilter) {\n    pricingBlocks(filter: $filter) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetPricingBlocksDocument,
    "\n  query GetPricingBlock($id: ID!) {\n    pricingBlock(id: $id) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetPricingBlockDocument,
    "\n  query GetPricingStrategies($filter: StrategyFilter) {\n    pricingStrategies(filter: $filter) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n    }\n  }\n": types.GetPricingStrategiesDocument,
    "\n  query GetPricingStrategy($id: ID!) {\n    pricingStrategy(id: $id) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetPricingStrategyDocument,
    "\n  query GetDefaultPricingStrategy {\n    defaultPricingStrategy {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.GetDefaultPricingStrategyDocument,
    "\n  query GetUserTenants {\n    tenants {\n      slug\n      name\n      imgUrl\n    }\n  }\n": types.GetUserTenantsDocument,
    "\n  query GetAllTenants {\n    allTenants {\n      nodes {\n        slug\n        name\n        imgUrl\n        tenantType\n        userCount\n      }\n      totalCount\n    }\n  }\n": types.GetAllTenantsDocument,
    "\n  mutation CreateTenant($input: CreateTenantInput!) {\n    createTenant(input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n": types.CreateTenantDocument,
    "\n  mutation UpdateTenant($slug: ID!, $input: UpdateTenantInput!) {\n    updateTenant(slug: $slug, input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n": types.UpdateTenantDocument,
    "\n  mutation DeleteTenant($slug: ID!) {\n    deleteTenant(slug: $slug) {\n      success\n    }\n  }\n": types.DeleteTenantDocument,
    "\n  query GetPaymentMethods {\n    paymentMethods {\n      value\n      label\n      description\n      processingRate\n      icon\n      isActive\n    }\n  }\n": types.GetPaymentMethodsDocument,
    "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetPricingRulesDocument,
    "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreatePricingRuleDocument,
    "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdatePricingRuleDocument,
    "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n": types.DeletePricingRuleDocument,
    "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n": types.TogglePricingRuleDocument,
    "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      category\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n": types.ClonePricingRuleDocument,
    "\n  query GetTrips {\n    trips {\n      id\n      name\n      title\n      description\n      bundleName\n      region\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      createdAt\n      updatedAt\n      createdBy\n    }\n  }\n": types.GetTripsDocument,
    "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n": types.CreateTripDocument,
    "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n": types.UpdateTripDocument,
    "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n": types.DeleteTripDocument,
    "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n": types.GetUsersDocument,
    "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n": types.GetOrdersDocument,
    "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n": types.GetUserOrdersDocument,
    "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserRoleDocument,
    "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n": types.InviteAdminUserDocument,
    "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n": types.GetCatalogBundlesDocument,
    "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n": types.AssignPackageToUserDocument,
    "\n  query CalculateAdminPrice($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n": types.CalculateAdminPriceDocument,
    "\n  query CalculateBatchAdminPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n": types.CalculateBatchAdminPricingDocument,
    "\n  query SimulatePricing($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        duration\n        isUnlimited\n        data\n        group\n      }\n      country {\n        iso\n        name\n        region\n      }\n      duration\n      currency\n      # Full pricing breakdown for simulation\n      totalCost\n      discountValue\n      priceAfterDiscount\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      unusedDays\n      selectedReason\n      totalCostBeforeProcessing\n      # Enhanced fields for step-by-step tracking\n      pricingSteps {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      customerDiscounts {\n        name\n        amount\n        percentage\n        reason\n      }\n      savingsAmount\n      savingsPercentage\n      calculationTimeMs\n      rulesEvaluated\n    }\n  }\n": types.SimulatePricingDocument,
    "\n  subscription PricingCalculationSteps($input: CalculatePriceInput!) {\n    pricingCalculationSteps(input: $input) {\n      correlationId\n      step {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      isComplete\n      totalSteps\n      completedSteps\n      error\n      finalBreakdown {\n        totalCost\n        discountValue\n        priceAfterDiscount\n        cost\n        markup\n        discountRate\n        processingRate\n        processingCost\n        finalRevenue\n        netProfit\n        discountPerDay\n        appliedRules {\n          name\n          category\n          impact\n        }\n        unusedDays\n        selectedReason\n        totalCostBeforeProcessing\n        pricingSteps {\n          order\n          name\n          priceBefore\n          priceAfter\n          impact\n          ruleId\n          metadata\n          timestamp\n        }\n        customerDiscounts {\n          name\n          amount\n          percentage\n          reason\n        }\n        savingsAmount\n        savingsPercentage\n        calculationTimeMs\n        rulesEvaluated\n      }\n    }\n  }\n": types.PricingCalculationStepsDocument,
    "\n  subscription PricingPipelineProgress($correlationId: String!) {\n    pricingPipelineProgress(correlationId: $correlationId) {\n      correlationId\n      name\n      timestamp\n      state\n      appliedRules\n      debug\n    }\n  }\n": types.PricingPipelineProgressDocument,
    "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n": types.DeleteUserDocument,
    "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n": types.GetCountriesDocument,
    "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n": types.GetBundlesByCountryDocument,
    "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": types.GetCountriesWithBundlesDocument,
    "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n": types.GetBundlesByRegionDocument,
    "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n": types.GetBundlesByGroupDocument,
    "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n": types.GetRegionBundlesDocument,
    "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          provider\n        }\n      }\n    }\n  }\n": types.GetCountryBundlesDocument,
    "\n  query GetBundleGroups {\n    pricingFilters {\n      groups\n    }\n  }\n": types.GetBundleGroupsDocument,
    "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n": types.GetPricingFiltersDocument,
    "\n  query GetMarkupConfigData {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n    }\n    # We can also fetch existing markup configurations if needed\n    # markupConfigurations {\n    #   group\n    #   duration\n    #   markupValue\n    #   markupType\n    # }\n  }\n": types.GetMarkupConfigDataDocument,
    "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n": types.GetHighDemandCountriesDocument,
    "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n": types.ToggleHighDemandCountryDocument,
    "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": types.GetCatalogSyncHistoryDocument,
    "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n": types.TriggerCatalogSyncDocument,
    "\n  query GetAirHaloPackages($filter: AirHaloPackageFilter) {\n    airHaloPackages(filter: $filter) {\n      data {\n        id\n        title\n        slug\n        image {\n          url\n          width\n          height\n        }\n        operators {\n          id\n          title\n          type\n          countries {\n            id\n            title\n            slug\n          }\n          packages {\n            id\n            type\n            title\n            shortInfo\n            data\n            amount\n            day\n            isUnlimited\n            voice\n            text\n            price {\n              value\n              currency\n            }\n            netPrice {\n              value\n              currency\n            }\n            prices {\n              netPrice {\n                value\n                currency\n              }\n              recommendedRetailPrice {\n                value\n                currency\n              }\n            }\n            qrInstallation\n            manualInstallation\n            isFairUsagePolicy\n            fairUsagePolicy\n          }\n          coverages {\n            networks {\n              name\n              type\n            }\n          }\n          apn {\n            name\n            username\n            password\n            ios {\n              name\n              username\n              password\n            }\n          }\n        }\n      }\n      links {\n        first\n        last\n        prev\n        next\n      }\n      meta {\n        currentPage\n        from\n        lastPage\n        path\n        perPage\n        to\n        total\n      }\n    }\n  }\n": types.GetAirHaloPackagesDocument,
    "\n  query GetAirHaloCompatibleDevices {\n    airHaloCompatibleDevices {\n      data {\n        manufacturer\n        model\n        esimSupport\n      }\n    }\n  }\n": types.GetAirHaloCompatibleDevicesDocument,
    "\n  query CompareAirHaloPackages($countryCode: String!) {\n    compareAirHaloPackages(countryCode: $countryCode) {\n      id\n      title\n      slug\n      image {\n        url\n        width\n        height\n      }\n      operators {\n        id\n        title\n        type\n        countries {\n          id\n          title\n          slug\n        }\n        packages {\n          id\n          type\n          title\n          shortInfo\n          data\n          amount\n          day\n          isUnlimited\n          voice\n          text\n          price {\n            value\n            currency\n          }\n          netPrice {\n            value\n            currency\n          }\n          prices {\n            netPrice {\n              value\n              currency\n            }\n            recommendedRetailPrice {\n              value\n              currency\n            }\n          }\n          qrInstallation\n          manualInstallation\n          isFairUsagePolicy\n          fairUsagePolicy\n        }\n        coverages {\n          networks {\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n": types.CompareAirHaloPackagesDocument,
    "\n  query GetAirHaloPricingData($packageIds: [String!]!) {\n    airHaloPricingData(packageIds: $packageIds) {\n      id\n      type\n      title\n      shortInfo\n      data\n      amount\n      day\n      isUnlimited\n      voice\n      text\n      price {\n        value\n        currency\n      }\n      netPrice {\n        value\n        currency\n      }\n      prices {\n        netPrice {\n          value\n          currency\n        }\n        recommendedRetailPrice {\n          value\n          currency\n        }\n      }\n      qrInstallation\n      manualInstallation\n      isFairUsagePolicy\n      fairUsagePolicy\n    }\n  }\n": types.GetAirHaloPricingDataDocument,
    "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.GetBundlesDocument,
    "\n  query GetAllESIMs {\n    getAllESIMs {\n      id\n      iccid\n      status\n      apiStatus\n      userId\n      orderId\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      user {\n        id\n        email\n        firstName\n        lastName\n      }\n      order {\n        id\n        reference\n        bundleName\n      }\n      usage {\n        totalUsed\n        totalRemaining\n      }\n    }\n  }\n": types.GetAllEsiMsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CatalogSyncProgress {\n    catalogSyncProgress {\n      jobId\n      jobType\n      status\n      bundleGroup\n      countryId\n      bundlesProcessed\n      bundlesAdded\n      bundlesUpdated\n      totalBundles\n      progress\n      message\n      errorMessage\n      startedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAdminESIMDetails($iccid: String!) {\n    getAdminESIMDetails(iccid: $iccid) {\n      id\n      iccid\n      userId\n      orderId\n      status\n      customerRef\n      assignedDate\n      activationCode\n      qrCodeUrl\n      smdpAddress\n      matchingId\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      apiDetails\n      usage {\n        totalUsed\n        totalRemaining\n        activeBundles {\n          id\n          name\n          state\n          dataUsed\n          dataRemaining\n          startDate\n          endDate\n        }\n      }\n      order {\n        id\n        reference\n        status\n        bundleName\n        totalPrice\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAdminESIMDetails($iccid: String!) {\n    getAdminESIMDetails(iccid: $iccid) {\n      id\n      iccid\n      userId\n      orderId\n      status\n      customerRef\n      assignedDate\n      activationCode\n      qrCodeUrl\n      smdpAddress\n      matchingId\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      apiDetails\n      usage {\n        totalUsed\n        totalRemaining\n        activeBundles {\n          id\n          name\n          state\n          dataUsed\n          dataRemaining\n          startDate\n          endDate\n        }\n      }\n      order {\n        id\n        reference\n        status\n        bundleName\n        totalPrice\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrderDetails($id: ID!) {\n    orderDetails(id: $id) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n      esims {\n        id\n        iccid\n        status\n        qrCode\n        smdpAddress\n        matchingId\n        customerRef\n        assignedDate\n        lastAction\n        actionDate\n        createdAt\n        installationLinks {\n          universalLink\n          lpaScheme\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrderDetails($id: ID!) {\n    orderDetails(id: $id) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n      esims {\n        id\n        iccid\n        status\n        qrCode\n        smdpAddress\n        matchingId\n        customerRef\n        assignedDate\n        lastAction\n        actionDate\n        createdAt\n        installationLinks {\n          universalLink\n          lpaScheme\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCustomerESIMs($userId: ID!) {\n    getCustomerESIMs(userId: $userId) {\n      id\n      iccid\n      status\n      apiStatus\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      usage {\n        totalUsed\n        totalRemaining\n      }\n      esim_bundles\n    }\n  }\n"): (typeof documents)["\n  query GetCustomerESIMs($userId: ID!) {\n    getCustomerESIMs(userId: $userId) {\n      id\n      iccid\n      status\n      apiStatus\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      usage {\n        totalUsed\n        totalRemaining\n      }\n      esim_bundles\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingBlocks($filter: PricingBlockFilter) {\n    pricingBlocks(filter: $filter) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetPricingBlocks($filter: PricingBlockFilter) {\n    pricingBlocks(filter: $filter) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingBlock($id: ID!) {\n    pricingBlock(id: $id) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetPricingBlock($id: ID!) {\n    pricingBlock(id: $id) {\n      id\n      name\n      description\n      category\n      conditions\n      action\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingStrategies($filter: StrategyFilter) {\n    pricingStrategies(filter: $filter) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n    }\n  }\n"): (typeof documents)["\n  query GetPricingStrategies($filter: StrategyFilter) {\n    pricingStrategies(filter: $filter) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingStrategy($id: ID!) {\n    pricingStrategy(id: $id) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPricingStrategy($id: ID!) {\n    pricingStrategy(id: $id) {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDefaultPricingStrategy {\n    defaultPricingStrategy {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDefaultPricingStrategy {\n    defaultPricingStrategy {\n      id\n      name\n      code\n      description\n      version\n      isDefault\n      activationCount\n      lastActivatedAt\n      validatedAt\n      validationErrors\n      archivedAt\n      createdAt\n      createdBy\n      updatedAt\n      updatedBy\n      parentStrategyId\n      blocks {\n        priority\n        isEnabled\n        configOverrides\n        pricingBlock {\n          id\n          name\n          description\n          category\n          conditions\n          action\n          priority\n          isActive\n          isEditable\n          validFrom\n          validUntil\n          createdBy\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserTenants {\n    tenants {\n      slug\n      name\n      imgUrl\n    }\n  }\n"): (typeof documents)["\n  query GetUserTenants {\n    tenants {\n      slug\n      name\n      imgUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllTenants {\n    allTenants {\n      nodes {\n        slug\n        name\n        imgUrl\n        tenantType\n        userCount\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetAllTenants {\n    allTenants {\n      nodes {\n        slug\n        name\n        imgUrl\n        tenantType\n        userCount\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTenant($input: CreateTenantInput!) {\n    createTenant(input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTenant($input: CreateTenantInput!) {\n    createTenant(input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTenant($slug: ID!, $input: UpdateTenantInput!) {\n    updateTenant(slug: $slug, input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTenant($slug: ID!, $input: UpdateTenantInput!) {\n    updateTenant(slug: $slug, input: $input) {\n      slug\n      name\n      imgUrl\n      tenantType\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTenant($slug: ID!) {\n    deleteTenant(slug: $slug) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteTenant($slug: ID!) {\n    deleteTenant(slug: $slug) {\n      success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPaymentMethods {\n    paymentMethods {\n      value\n      label\n      description\n      processingRate\n      icon\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query GetPaymentMethods {\n    paymentMethods {\n      value\n      label\n      description\n      processingRate\n      icon\n      isActive\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetPricingRules($filter: PricingRuleFilter) {\n    pricingRules(filter: $filter) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePricingRule($input: CreatePricingRuleInput!) {\n    createPricingRule(input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePricingRule($id: ID!, $input: UpdatePricingRuleInput!) {\n    updatePricingRule(id: $id, input: $input) {\n      id\n      category\n      name\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n      validFrom\n      validUntil\n      createdBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeletePricingRule($id: ID!) {\n    deletePricingRule(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n"): (typeof documents)["\n  mutation TogglePricingRule($id: ID!) {\n    togglePricingRule(id: $id) {\n      id\n      isActive\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      category\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n"): (typeof documents)["\n  mutation ClonePricingRule($id: ID!, $newName: String!) {\n    clonePricingRule(id: $id, newName: $newName) {\n      id\n      name\n      category\n      description\n      conditions {\n        field\n        operator\n        value\n        type\n      }\n      actions {\n        type\n        value\n        metadata\n      }\n      priority\n      isActive\n      isEditable\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTrips {\n    trips {\n      id\n      name\n      title\n      description\n      bundleName\n      region\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      createdAt\n      updatedAt\n      createdBy\n    }\n  }\n"): (typeof documents)["\n  query GetTrips {\n    trips {\n      id\n      name\n      title\n      description\n      bundleName\n      region\n      countries {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      createdAt\n      updatedAt\n      createdBy\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTrip($input: CreateTripInput!) {\n    createTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTrip($input: UpdateTripInput!) {\n    updateTrip(input: $input) {\n      success\n      error\n      trip {\n        id\n        name\n        title\n        description\n        bundleName\n        region\n        countries {\n          iso\n          name\n          nameHebrew\n          region\n          flag\n        }\n        createdAt\n        updatedAt\n        createdBy\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteTrip($id: ID!) {\n    deleteTrip(id: $id) {\n      success\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n"): (typeof documents)["\n  query GetUsers {\n    users {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n      orderCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrders {\n    orders {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n      user {\n        id\n        email\n        firstName\n        lastName\n        phoneNumber\n        role\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n"): (typeof documents)["\n  query GetUserOrders($userId: ID!) {\n    getUserOrders(userId: $userId) {\n      id\n      reference\n      status\n      quantity\n      totalPrice\n      createdAt\n      updatedAt\n      bundleId\n      bundleName\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserRole($userId: ID!, $role: String!) {\n    updateUserRole(userId: $userId, role: $role) {\n      id\n      email\n      firstName\n      lastName\n      phoneNumber\n      role\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n"): (typeof documents)["\n  mutation InviteAdminUser($input: InviteAdminUserInput!) {\n    inviteAdminUser(input: $input) {\n      success\n      error\n      invitedEmail\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogBundles($criteria: SearchCatalogCriteria) {\n    catalogBundles(criteria: $criteria) {\n      bundles {\n        esimGoName\n        description\n        region\n        validityInDays\n        basePrice\n        currency\n        isUnlimited\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignPackageToUser($userId: ID!, $planId: ID!) {\n    assignPackageToUser(userId: $userId, planId: $planId) {\n      success\n      error\n      assignment {\n        id\n        user {\n          id\n          email\n          firstName\n          lastName\n        }\n        assignedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculateAdminPrice($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n"): (typeof documents)["\n  query CalculateAdminPrice($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CalculateBatchAdminPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n"): (typeof documents)["\n  query CalculateBatchAdminPricing($inputs: [CalculatePriceInput!]!) {\n    calculatePrices(inputs: $inputs) {\n      bundle {\n        id\n        name\n        country {\n          iso\n          name\n        }\n        duration\n        isUnlimited\n        data\n        group\n        appliedRules {\n          name\n          category\n          impact\n        }\n      }\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      duration\n      currency\n      # Public pricing fields\n      totalCost\n      discountValue\n      priceAfterDiscount\n      # Admin-only business sensitive fields\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      # Rule-based pricing breakdown\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      # Pipeline metadata\n      unusedDays\n      selectedReason\n      # Additional pricing engine fields\n      totalCostBeforeProcessing\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SimulatePricing($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        duration\n        isUnlimited\n        data\n        group\n      }\n      country {\n        iso\n        name\n        region\n      }\n      duration\n      currency\n      # Full pricing breakdown for simulation\n      totalCost\n      discountValue\n      priceAfterDiscount\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      unusedDays\n      selectedReason\n      totalCostBeforeProcessing\n      # Enhanced fields for step-by-step tracking\n      pricingSteps {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      customerDiscounts {\n        name\n        amount\n        percentage\n        reason\n      }\n      savingsAmount\n      savingsPercentage\n      calculationTimeMs\n      rulesEvaluated\n    }\n  }\n"): (typeof documents)["\n  query SimulatePricing($input: CalculatePriceInput!) {\n    calculatePrice(input: $input) {\n      bundle {\n        id\n        name\n        duration\n        isUnlimited\n        data\n        group\n      }\n      country {\n        iso\n        name\n        region\n      }\n      duration\n      currency\n      # Full pricing breakdown for simulation\n      totalCost\n      discountValue\n      priceAfterDiscount\n      cost\n      markup\n      discountRate\n      processingRate\n      processingCost\n      finalRevenue\n      netProfit\n      discountPerDay\n      appliedRules {\n        name\n        category\n        impact\n      }\n      discounts {\n        type\n        amount\n      }\n      unusedDays\n      selectedReason\n      totalCostBeforeProcessing\n      # Enhanced fields for step-by-step tracking\n      pricingSteps {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      customerDiscounts {\n        name\n        amount\n        percentage\n        reason\n      }\n      savingsAmount\n      savingsPercentage\n      calculationTimeMs\n      rulesEvaluated\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription PricingCalculationSteps($input: CalculatePriceInput!) {\n    pricingCalculationSteps(input: $input) {\n      correlationId\n      step {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      isComplete\n      totalSteps\n      completedSteps\n      error\n      finalBreakdown {\n        totalCost\n        discountValue\n        priceAfterDiscount\n        cost\n        markup\n        discountRate\n        processingRate\n        processingCost\n        finalRevenue\n        netProfit\n        discountPerDay\n        appliedRules {\n          name\n          category\n          impact\n        }\n        unusedDays\n        selectedReason\n        totalCostBeforeProcessing\n        pricingSteps {\n          order\n          name\n          priceBefore\n          priceAfter\n          impact\n          ruleId\n          metadata\n          timestamp\n        }\n        customerDiscounts {\n          name\n          amount\n          percentage\n          reason\n        }\n        savingsAmount\n        savingsPercentage\n        calculationTimeMs\n        rulesEvaluated\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription PricingCalculationSteps($input: CalculatePriceInput!) {\n    pricingCalculationSteps(input: $input) {\n      correlationId\n      step {\n        order\n        name\n        priceBefore\n        priceAfter\n        impact\n        ruleId\n        metadata\n        timestamp\n      }\n      isComplete\n      totalSteps\n      completedSteps\n      error\n      finalBreakdown {\n        totalCost\n        discountValue\n        priceAfterDiscount\n        cost\n        markup\n        discountRate\n        processingRate\n        processingCost\n        finalRevenue\n        netProfit\n        discountPerDay\n        appliedRules {\n          name\n          category\n          impact\n        }\n        unusedDays\n        selectedReason\n        totalCostBeforeProcessing\n        pricingSteps {\n          order\n          name\n          priceBefore\n          priceAfter\n          impact\n          ruleId\n          metadata\n          timestamp\n        }\n        customerDiscounts {\n          name\n          amount\n          percentage\n          reason\n        }\n        savingsAmount\n        savingsPercentage\n        calculationTimeMs\n        rulesEvaluated\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription PricingPipelineProgress($correlationId: String!) {\n    pricingPipelineProgress(correlationId: $correlationId) {\n      correlationId\n      name\n      timestamp\n      state\n      appliedRules\n      debug\n    }\n  }\n"): (typeof documents)["\n  subscription PricingPipelineProgress($correlationId: String!) {\n    pricingPipelineProgress(correlationId: $correlationId) {\n      correlationId\n      name\n      timestamp\n      state\n      appliedRules\n      debug\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUser($userId: ID!) {\n    deleteUser(userId: $userId) {\n      success\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n"): (typeof documents)["\n  query GetCountries {\n    countries {\n      iso\n      name\n      nameHebrew\n      region\n      flag\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByCountry {\n    bundlesByCountry {\n      country {\n        iso\n        name\n        nameHebrew\n        region\n        flag\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCountriesWithBundles {\n    bundlesByCountry {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      pricingRange {\n        min\n        max\n      }\n      bundles(limit: 5) {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          groups\n          validityInDays\n          dataAmountReadable\n          isUnlimited\n          countries\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByRegion {\n    bundlesByRegion {\n      region\n      bundleCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n"): (typeof documents)["\n  query GetBundlesByGroup {\n    bundlesByGroup {\n      group\n      bundleCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRegionBundles($region: String!) {\n    bundlesForRegion(region: $region) {\n      region\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          provider\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCountryBundles($countryId: String!) {\n    bundlesForCountry(countryCode: $countryId) {\n      country {\n        iso\n        name\n      }\n      bundleCount\n      bundles {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          provider\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundleGroups {\n    pricingFilters {\n      groups\n    }\n  }\n"): (typeof documents)["\n  query GetBundleGroups {\n    pricingFilters {\n      groups\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPricingFilters {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n      dataTypes {\n        label\n        value\n        isUnlimited\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMarkupConfigData {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n    }\n    # We can also fetch existing markup configurations if needed\n    # markupConfigurations {\n    #   group\n    #   duration\n    #   markupValue\n    #   markupType\n    # }\n  }\n"): (typeof documents)["\n  query GetMarkupConfigData {\n    pricingFilters {\n      groups\n      durations {\n        label\n        value\n        minDays\n        maxDays\n      }\n    }\n    # We can also fetch existing markup configurations if needed\n    # markupConfigurations {\n    #   group\n    #   duration\n    #   markupValue\n    #   markupType\n    # }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n"): (typeof documents)["\n  query GetHighDemandCountries {\n    highDemandCountries\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation ToggleHighDemandCountry($countryId: String!) {\n    toggleHighDemandCountry(countryId: $countryId) {\n      success\n      countryId\n      isHighDemand\n      error\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetCatalogSyncHistory($params: SyncHistoryParams) {\n    catalogSyncHistory(params: $params) {\n      jobs {\n        id\n        jobType\n        status\n        priority\n        group\n        countryId\n        bundlesProcessed\n        bundlesAdded\n        bundlesUpdated\n        errorMessage\n        metadata\n        createdAt\n        startedAt\n        completedAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TriggerCatalogSync($params: TriggerSyncParams!) {\n    triggerCatalogSync(params: $params) {\n      success\n      jobId\n      message\n      error\n      conflictingJob {\n        id\n        jobType\n        status\n        createdAt\n        startedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAirHaloPackages($filter: AirHaloPackageFilter) {\n    airHaloPackages(filter: $filter) {\n      data {\n        id\n        title\n        slug\n        image {\n          url\n          width\n          height\n        }\n        operators {\n          id\n          title\n          type\n          countries {\n            id\n            title\n            slug\n          }\n          packages {\n            id\n            type\n            title\n            shortInfo\n            data\n            amount\n            day\n            isUnlimited\n            voice\n            text\n            price {\n              value\n              currency\n            }\n            netPrice {\n              value\n              currency\n            }\n            prices {\n              netPrice {\n                value\n                currency\n              }\n              recommendedRetailPrice {\n                value\n                currency\n              }\n            }\n            qrInstallation\n            manualInstallation\n            isFairUsagePolicy\n            fairUsagePolicy\n          }\n          coverages {\n            networks {\n              name\n              type\n            }\n          }\n          apn {\n            name\n            username\n            password\n            ios {\n              name\n              username\n              password\n            }\n          }\n        }\n      }\n      links {\n        first\n        last\n        prev\n        next\n      }\n      meta {\n        currentPage\n        from\n        lastPage\n        path\n        perPage\n        to\n        total\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAirHaloPackages($filter: AirHaloPackageFilter) {\n    airHaloPackages(filter: $filter) {\n      data {\n        id\n        title\n        slug\n        image {\n          url\n          width\n          height\n        }\n        operators {\n          id\n          title\n          type\n          countries {\n            id\n            title\n            slug\n          }\n          packages {\n            id\n            type\n            title\n            shortInfo\n            data\n            amount\n            day\n            isUnlimited\n            voice\n            text\n            price {\n              value\n              currency\n            }\n            netPrice {\n              value\n              currency\n            }\n            prices {\n              netPrice {\n                value\n                currency\n              }\n              recommendedRetailPrice {\n                value\n                currency\n              }\n            }\n            qrInstallation\n            manualInstallation\n            isFairUsagePolicy\n            fairUsagePolicy\n          }\n          coverages {\n            networks {\n              name\n              type\n            }\n          }\n          apn {\n            name\n            username\n            password\n            ios {\n              name\n              username\n              password\n            }\n          }\n        }\n      }\n      links {\n        first\n        last\n        prev\n        next\n      }\n      meta {\n        currentPage\n        from\n        lastPage\n        path\n        perPage\n        to\n        total\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAirHaloCompatibleDevices {\n    airHaloCompatibleDevices {\n      data {\n        manufacturer\n        model\n        esimSupport\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAirHaloCompatibleDevices {\n    airHaloCompatibleDevices {\n      data {\n        manufacturer\n        model\n        esimSupport\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CompareAirHaloPackages($countryCode: String!) {\n    compareAirHaloPackages(countryCode: $countryCode) {\n      id\n      title\n      slug\n      image {\n        url\n        width\n        height\n      }\n      operators {\n        id\n        title\n        type\n        countries {\n          id\n          title\n          slug\n        }\n        packages {\n          id\n          type\n          title\n          shortInfo\n          data\n          amount\n          day\n          isUnlimited\n          voice\n          text\n          price {\n            value\n            currency\n          }\n          netPrice {\n            value\n            currency\n          }\n          prices {\n            netPrice {\n              value\n              currency\n            }\n            recommendedRetailPrice {\n              value\n              currency\n            }\n          }\n          qrInstallation\n          manualInstallation\n          isFairUsagePolicy\n          fairUsagePolicy\n        }\n        coverages {\n          networks {\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CompareAirHaloPackages($countryCode: String!) {\n    compareAirHaloPackages(countryCode: $countryCode) {\n      id\n      title\n      slug\n      image {\n        url\n        width\n        height\n      }\n      operators {\n        id\n        title\n        type\n        countries {\n          id\n          title\n          slug\n        }\n        packages {\n          id\n          type\n          title\n          shortInfo\n          data\n          amount\n          day\n          isUnlimited\n          voice\n          text\n          price {\n            value\n            currency\n          }\n          netPrice {\n            value\n            currency\n          }\n          prices {\n            netPrice {\n              value\n              currency\n            }\n            recommendedRetailPrice {\n              value\n              currency\n            }\n          }\n          qrInstallation\n          manualInstallation\n          isFairUsagePolicy\n          fairUsagePolicy\n        }\n        coverages {\n          networks {\n            name\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAirHaloPricingData($packageIds: [String!]!) {\n    airHaloPricingData(packageIds: $packageIds) {\n      id\n      type\n      title\n      shortInfo\n      data\n      amount\n      day\n      isUnlimited\n      voice\n      text\n      price {\n        value\n        currency\n      }\n      netPrice {\n        value\n        currency\n      }\n      prices {\n        netPrice {\n          value\n          currency\n        }\n        recommendedRetailPrice {\n          value\n          currency\n        }\n      }\n      qrInstallation\n      manualInstallation\n      isFairUsagePolicy\n      fairUsagePolicy\n    }\n  }\n"): (typeof documents)["\n  query GetAirHaloPricingData($packageIds: [String!]!) {\n    airHaloPricingData(packageIds: $packageIds) {\n      id\n      type\n      title\n      shortInfo\n      data\n      amount\n      day\n      isUnlimited\n      voice\n      text\n      price {\n        value\n        currency\n      }\n      netPrice {\n        value\n        currency\n      }\n      prices {\n        netPrice {\n          value\n          currency\n        }\n        recommendedRetailPrice {\n          value\n          currency\n        }\n      }\n      qrInstallation\n      manualInstallation\n      isFairUsagePolicy\n      fairUsagePolicy\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetBundles($filter: BundleFilter, $pagination: PaginationInput) {\n    bundles(filter: $filter, pagination: $pagination) {\n      nodes {\n        ... on CatalogBundle {\n          esimGoName\n          name\n          description\n          groups\n          validityInDays\n          dataAmountMB\n          dataAmountReadable\n          isUnlimited\n          countries\n          region\n          basePrice\n          currency\n          createdAt\n          updatedAt\n          syncedAt\n        }\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllESIMs {\n    getAllESIMs {\n      id\n      iccid\n      status\n      apiStatus\n      userId\n      orderId\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      user {\n        id\n        email\n        firstName\n        lastName\n      }\n      order {\n        id\n        reference\n        bundleName\n      }\n      usage {\n        totalUsed\n        totalRemaining\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllESIMs {\n    getAllESIMs {\n      id\n      iccid\n      status\n      apiStatus\n      userId\n      orderId\n      customerRef\n      assignedDate\n      lastAction\n      actionDate\n      createdAt\n      updatedAt\n      user {\n        id\n        email\n        firstName\n        lastName\n      }\n      order {\n        id\n        reference\n        bundleName\n      }\n      usage {\n        totalUsed\n        totalRemaining\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;