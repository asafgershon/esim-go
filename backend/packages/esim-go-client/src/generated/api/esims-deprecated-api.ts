/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Message } from '../models';
/**
 * ESIMsDeprecatedApi - axios parameter creator
 * @export
 */
export const ESIMsDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply a Bundle to an eSIM (Deprecated)
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesPost: async (iccid: string, contentType?: string, accept?: string, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidBundlesPost', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/bundles`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ESIMsDeprecatedApi - functional programming interface
 * @export
 */
export const ESIMsDeprecatedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ESIMsDeprecatedApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Apply a Bundle to an eSIM (Deprecated)
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidBundlesPost(iccid: string, contentType?: string, accept?: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidBundlesPost(iccid, contentType, accept, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsDeprecatedApi.esimsIccidBundlesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ESIMsDeprecatedApi - factory interface
 * @export
 */
export const ESIMsDeprecatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ESIMsDeprecatedApiFp(configuration)
    return {
        /**
         * 
         * @summary Apply a Bundle to an eSIM (Deprecated)
         * @param {ESIMsDeprecatedApiEsimsIccidBundlesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesPost(requestParameters: ESIMsDeprecatedApiEsimsIccidBundlesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.esimsIccidBundlesPost(requestParameters.iccid, requestParameters.contentType, requestParameters.accept, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ESIMsDeprecatedApi - interface
 * @export
 * @interface ESIMsDeprecatedApi
 */
export interface ESIMsDeprecatedApiInterface {
    /**
     * 
     * @summary Apply a Bundle to an eSIM (Deprecated)
     * @param {ESIMsDeprecatedApiEsimsIccidBundlesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsDeprecatedApiInterface
     */
    esimsIccidBundlesPost(requestParameters: ESIMsDeprecatedApiEsimsIccidBundlesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * Request parameters for esimsIccidBundlesPost operation in ESIMsDeprecatedApi.
 * @export
 * @interface ESIMsDeprecatedApiEsimsIccidBundlesPostRequest
 */
export interface ESIMsDeprecatedApiEsimsIccidBundlesPostRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsDeprecatedApiEsimsIccidBundlesPost
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsDeprecatedApiEsimsIccidBundlesPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsDeprecatedApiEsimsIccidBundlesPost
     */
    readonly accept?: string

    /**
     * 
     * @type {object}
     * @memberof ESIMsDeprecatedApiEsimsIccidBundlesPost
     */
    readonly body?: object
}

/**
 * ESIMsDeprecatedApi - object-oriented interface
 * @export
 * @class ESIMsDeprecatedApi
 * @extends {BaseAPI}
 */
export class ESIMsDeprecatedApi extends BaseAPI implements ESIMsDeprecatedApiInterface {
    /**
     * 
     * @summary Apply a Bundle to an eSIM (Deprecated)
     * @param {ESIMsDeprecatedApiEsimsIccidBundlesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsDeprecatedApi
     */
    public esimsIccidBundlesPost(requestParameters: ESIMsDeprecatedApiEsimsIccidBundlesPostRequest, options?: RawAxiosRequestConfig) {
        return ESIMsDeprecatedApiFp(this.configuration).esimsIccidBundlesPost(requestParameters.iccid, requestParameters.contentType, requestParameters.accept, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

