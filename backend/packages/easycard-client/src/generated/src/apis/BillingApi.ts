/* tslint:disable */
/* eslint-disable */
/**
 * EasyCard Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BillingDealRequest,
  BillingDealResponse,
  BillingDealTypeEnum,
  BillingDealUpdateRequest,
  BillingRequestCreate,
  BillingsQuickStatusFilterEnum,
  CurrencyEnum,
  OperationResponse,
  PaymentTypeEnum,
  QuickDateFilterTypeEnum,
  ShowDeletedEnum,
  SummariesAmountResponseBillingDealSummary,
} from '../models/index';

export interface ApiBillingBillingDealIDChangeTokenTokenIDPatchRequest {
    billingDealID: string;
    tokenID: string;
}

export interface ApiBillingBillingDealIDGetRequest {
    billingDealID: string;
}

export interface ApiBillingBillingDealIDPutRequest {
    billingDealID: string;
    billingDealUpdateRequest?: BillingDealUpdateRequest;
}

export interface ApiBillingConsumerIDPostRequest {
    consumerID: string;
}

export interface ApiBillingGetRequest {
    quickStatus?: BillingsQuickStatusFilterEnum;
    terminalID?: string;
    merchantID?: string;
    billingDealID?: string;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    filterDateByNextScheduledTransaction?: boolean;
    dateFrom?: string;
    dateTo?: string;
    consumerID?: string;
    creditCardTokenID?: string;
    cardNumber?: string;
    cardOwnerNationalID?: string;
    consumerName?: string;
    consumerEmail?: string;
    creditCardVendor?: string;
    actual?: boolean;
    finished?: boolean;
    paused?: boolean;
    hasError?: boolean;
    paymentType?: PaymentTypeEnum;
    dealReference?: string;
    invoiceOnly?: boolean;
    origin?: string;
    onlyActive?: boolean;
    inProgress?: boolean;
    creditCardExpired?: boolean;
    passed?: boolean;
    failed?: boolean;
    consumerExternalReference?: string;
    billingDealType?: BillingDealTypeEnum;
    fileID?: string;
    rowID?: string;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiBillingPostRequest {
    billingDealRequest?: BillingDealRequest;
}

export interface ApiBillingRequestPostRequest {
    billingRequestCreate?: BillingRequestCreate;
}

/**
 * BillingApi - interface
 * 
 * @export
 * @interface BillingApiInterface
 */
export interface BillingApiInterface {
    /**
     * 
     * @summary Update credit card token for billing deal
     * @param {string} billingDealID 
     * @param {string} tokenID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingBillingDealIDChangeTokenTokenIDPatchRaw(requestParameters: ApiBillingBillingDealIDChangeTokenTokenIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Update credit card token for billing deal
     */
    apiBillingBillingDealIDChangeTokenTokenIDPatch(requestParameters: ApiBillingBillingDealIDChangeTokenTokenIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get billing deal details
     * @param {string} billingDealID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingBillingDealIDGetRaw(requestParameters: ApiBillingBillingDealIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingDealResponse>>;

    /**
     * Get billing deal details
     */
    apiBillingBillingDealIDGet(requestParameters: ApiBillingBillingDealIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingDealResponse>;

    /**
     * 
     * @summary Update billing deal
     * @param {string} billingDealID 
     * @param {BillingDealUpdateRequest} [billingDealUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingBillingDealIDPutRaw(requestParameters: ApiBillingBillingDealIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Update billing deal
     */
    apiBillingBillingDealIDPut(requestParameters: ApiBillingBillingDealIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @param {string} consumerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingConsumerIDPostRaw(requestParameters: ApiBillingConsumerIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     */
    apiBillingConsumerIDPost(requestParameters: ApiBillingConsumerIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get billing deals list using filter
     * @param {BillingsQuickStatusFilterEnum} [quickStatus]     All    Completed    Inactive    Failed    CardExpired    TriggeredTomorrow    Paused    ExpiredNextMonth    ManualTrigger    InProgress    Passed
     * @param {string} [terminalID] 
     * @param {string} [merchantID] 
     * @param {string} [billingDealID] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {boolean} [filterDateByNextScheduledTransaction] 
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {string} [consumerID] 
     * @param {string} [creditCardTokenID] 
     * @param {string} [cardNumber] 
     * @param {string} [cardOwnerNationalID] 
     * @param {string} [consumerName] Performs search by both consumer name and card owner name
     * @param {string} [consumerEmail] End-customer Email
     * @param {string} [creditCardVendor] 
     * @param {boolean} [actual] Billing deals that can be manually triggered
     * @param {boolean} [finished] 
     * @param {boolean} [paused] 
     * @param {boolean} [hasError] 
     * @param {PaymentTypeEnum} [paymentType]     card    cheque    cash    bank    blender
     * @param {string} [dealReference] Merchant deal reference
     * @param {boolean} [invoiceOnly] 
     * @param {string} [origin] 
     * @param {boolean} [onlyActive] 
     * @param {boolean} [inProgress] 
     * @param {boolean} [creditCardExpired] 
     * @param {boolean} [passed] 
     * @param {boolean} [failed] 
     * @param {string} [consumerExternalReference] 
     * @param {BillingDealTypeEnum} [billingDealType]     CreditCard    InvoiceOnly    Bank
     * @param {string} [fileID] 
     * @param {string} [rowID] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingGetRaw(requestParameters: ApiBillingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseBillingDealSummary>>;

    /**
     * Get billing deals list using filter
     */
    apiBillingGet(requestParameters: ApiBillingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseBillingDealSummary>;

    /**
     * 
     * @summary Create billing deal
     * @param {BillingDealRequest} [billingDealRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingPostRaw(requestParameters: ApiBillingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create billing deal
     */
    apiBillingPost(requestParameters: ApiBillingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Create billing request
     * @param {BillingRequestCreate} [billingRequestCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    apiBillingRequestPostRaw(requestParameters: ApiBillingRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create billing request
     */
    apiBillingRequestPost(requestParameters: ApiBillingRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI implements BillingApiInterface {

    /**
     * Update credit card token for billing deal
     */
    async apiBillingBillingDealIDChangeTokenTokenIDPatchRaw(requestParameters: ApiBillingBillingDealIDChangeTokenTokenIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.billingDealID === null || requestParameters.billingDealID === undefined) {
            throw new runtime.RequiredError('billingDealID','Required parameter requestParameters.billingDealID was null or undefined when calling apiBillingBillingDealIDChangeTokenTokenIDPatch.');
        }

        if (requestParameters.tokenID === null || requestParameters.tokenID === undefined) {
            throw new runtime.RequiredError('tokenID','Required parameter requestParameters.tokenID was null or undefined when calling apiBillingBillingDealIDChangeTokenTokenIDPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/billing/{BillingDealID}/change-token/{tokenID}`.replace(`{${"billingDealID"}}`, encodeURIComponent(String(requestParameters.billingDealID))).replace(`{${"tokenID"}}`, encodeURIComponent(String(requestParameters.tokenID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update credit card token for billing deal
     */
    async apiBillingBillingDealIDChangeTokenTokenIDPatch(requestParameters: ApiBillingBillingDealIDChangeTokenTokenIDPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiBillingBillingDealIDChangeTokenTokenIDPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get billing deal details
     */
    async apiBillingBillingDealIDGetRaw(requestParameters: ApiBillingBillingDealIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingDealResponse>> {
        if (requestParameters.billingDealID === null || requestParameters.billingDealID === undefined) {
            throw new runtime.RequiredError('billingDealID','Required parameter requestParameters.billingDealID was null or undefined when calling apiBillingBillingDealIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/billing/{BillingDealID}`.replace(`{${"billingDealID"}}`, encodeURIComponent(String(requestParameters.billingDealID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get billing deal details
     */
    async apiBillingBillingDealIDGet(requestParameters: ApiBillingBillingDealIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingDealResponse> {
        const response = await this.apiBillingBillingDealIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update billing deal
     */
    async apiBillingBillingDealIDPutRaw(requestParameters: ApiBillingBillingDealIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.billingDealID === null || requestParameters.billingDealID === undefined) {
            throw new runtime.RequiredError('billingDealID','Required parameter requestParameters.billingDealID was null or undefined when calling apiBillingBillingDealIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/billing/{BillingDealID}`.replace(`{${"billingDealID"}}`, encodeURIComponent(String(requestParameters.billingDealID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.billingDealUpdateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update billing deal
     */
    async apiBillingBillingDealIDPut(requestParameters: ApiBillingBillingDealIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiBillingBillingDealIDPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBillingConsumerIDPostRaw(requestParameters: ApiBillingConsumerIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.consumerID === null || requestParameters.consumerID === undefined) {
            throw new runtime.RequiredError('consumerID','Required parameter requestParameters.consumerID was null or undefined when calling apiBillingConsumerIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/billing/{ConsumerID}`.replace(`{${"consumerID"}}`, encodeURIComponent(String(requestParameters.consumerID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async apiBillingConsumerIDPost(requestParameters: ApiBillingConsumerIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiBillingConsumerIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get billing deals list using filter
     */
    async apiBillingGetRaw(requestParameters: ApiBillingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseBillingDealSummary>> {
        const queryParameters: any = {};

        if (requestParameters.quickStatus !== undefined) {
            queryParameters['QuickStatus'] = requestParameters.quickStatus;
        }

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.billingDealID !== undefined) {
            queryParameters['BillingDealID'] = requestParameters.billingDealID;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.filterDateByNextScheduledTransaction !== undefined) {
            queryParameters['FilterDateByNextScheduledTransaction'] = requestParameters.filterDateByNextScheduledTransaction;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.creditCardTokenID !== undefined) {
            queryParameters['CreditCardTokenID'] = requestParameters.creditCardTokenID;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['CardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardOwnerNationalID !== undefined) {
            queryParameters['CardOwnerNationalID'] = requestParameters.cardOwnerNationalID;
        }

        if (requestParameters.consumerName !== undefined) {
            queryParameters['ConsumerName'] = requestParameters.consumerName;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.creditCardVendor !== undefined) {
            queryParameters['CreditCardVendor'] = requestParameters.creditCardVendor;
        }

        if (requestParameters.actual !== undefined) {
            queryParameters['Actual'] = requestParameters.actual;
        }

        if (requestParameters.finished !== undefined) {
            queryParameters['Finished'] = requestParameters.finished;
        }

        if (requestParameters.paused !== undefined) {
            queryParameters['Paused'] = requestParameters.paused;
        }

        if (requestParameters.hasError !== undefined) {
            queryParameters['HasError'] = requestParameters.hasError;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['PaymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.dealReference !== undefined) {
            queryParameters['DealReference'] = requestParameters.dealReference;
        }

        if (requestParameters.invoiceOnly !== undefined) {
            queryParameters['InvoiceOnly'] = requestParameters.invoiceOnly;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['Origin'] = requestParameters.origin;
        }

        if (requestParameters.onlyActive !== undefined) {
            queryParameters['OnlyActive'] = requestParameters.onlyActive;
        }

        if (requestParameters.inProgress !== undefined) {
            queryParameters['InProgress'] = requestParameters.inProgress;
        }

        if (requestParameters.creditCardExpired !== undefined) {
            queryParameters['CreditCardExpired'] = requestParameters.creditCardExpired;
        }

        if (requestParameters.passed !== undefined) {
            queryParameters['Passed'] = requestParameters.passed;
        }

        if (requestParameters.failed !== undefined) {
            queryParameters['Failed'] = requestParameters.failed;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.billingDealType !== undefined) {
            queryParameters['BillingDealType'] = requestParameters.billingDealType;
        }

        if (requestParameters.fileID !== undefined) {
            queryParameters['FileID'] = requestParameters.fileID;
        }

        if (requestParameters.rowID !== undefined) {
            queryParameters['RowID'] = requestParameters.rowID;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/billing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get billing deals list using filter
     */
    async apiBillingGet(requestParameters: ApiBillingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseBillingDealSummary> {
        const response = await this.apiBillingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create billing deal
     */
    async apiBillingPostRaw(requestParameters: ApiBillingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/billing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.billingDealRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create billing deal
     */
    async apiBillingPost(requestParameters: ApiBillingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiBillingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create billing request
     */
    async apiBillingRequestPostRaw(requestParameters: ApiBillingRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/billing/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.billingRequestCreate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create billing request
     */
    async apiBillingRequestPost(requestParameters: ApiBillingRequestPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiBillingRequestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
