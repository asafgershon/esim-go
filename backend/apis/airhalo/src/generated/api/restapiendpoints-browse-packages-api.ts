/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2CompatibleDevicesGet200Response } from '../models';
// @ts-ignore
import type { V2PackagesGet200Response } from '../models';
// @ts-ignore
import type { V2PackagesGet422Response } from '../models';
/**
 * RESTAPIEndpointsBrowsePackagesApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsBrowsePackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint provides a comprehensive list of devices that are compatible with eSIMs. Use this information to ensure that your customers have devices that support eSIM functionality.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers to authenticate your API call.   - The returned list is regularly updated to include the latest compatible devices, ensuring accurate and reliable information for your integration.   - Use this endpoint to validate device compatibility before processing eSIM orders.  
         * @summary Get compatible device list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CompatibleDevicesGet: async (accept: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2CompatibleDevicesGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2CompatibleDevicesGet', 'authorization', authorization)
            const localVarPath = `/v2/compatible-devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * :::highlight blue ðŸ’¡ **Action Required: Synchronize at least once every hour.** This step is vital for ensuring newly introduced packages are available and out-of-stock packages are excluded. :::  Retrieve a list of local and global eSIM packages available through the Airalo Partners API. Local packages cover a single country, while global packages span multiple countries and regions. This endpoint helps you synchronize eSIM plans/packages with your system, ensuring newly introduced packages are available to your clients and out-of-stock packages are handled properly.    #### Features   - **Package Types**: Supports standard data packages and the new \"Voice and Text\" packages.   - **Filtering**: Filter results by operator type or country code to tailor the package list to your needs.   - **Pagination**: Adjust pagination settings to retrieve results in manageable chunks.   - **Limit**: Set the `limit` parameter to a high value (e.g., 1,000) to fetch all packages in a single request without using pagination.   - **Include Top-Up**: Use the `include:top-up` parameter to fetch eSIM packages along with their associated top-up packages.    #### Rate Limit   - This endpoint allows up to **40 requests per minute**. Ensure your implementation respects this limit to avoid rate limit errors.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers for authentication.  
         * @summary Get packages
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [filterType] Optional. A string to filter packages by operator type. Possible values are \&quot;local\&quot; and \&quot;global\&quot;.    If the filter is set to \&quot;global,\&quot; the output will include only global and regional eSims. Global and regional packages do not use the \&quot;country_code\&quot; field, which will be empty. The \&quot;type\&quot; field in the operator object within the response will be set to \&quot;global.\&quot; A package is considered worldwide if its \&quot;slug\&quot; field is set to \&quot;world\&quot; and regional if \&quot;slug\&quot; contains a region name, for example, \&quot;europe\&quot; or \&quot;Africa\&quot;.    If the filter is set to \&quot;local,\&quot; the response will contain only country-specific packages. To get the list of packages for a single country, you can use it in combination with filter[country] parameter. The \&quot;type\&quot; field in the operator object of the response will indicate a \&quot;local\&quot; type.    When the filter is not set, we return all types of eSIMs: local, regional, and global.
         * @param {string} [filterCountry] Optional. A string to filter packages by country code. Examples include US, DE, GB, IT, and UA.
         * @param {string} [limit] Optional. An integer specifying how many items will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.  If the page is set to 2 or beyond, the response will have different format and contain an object representing the country\&#39;s index in the list of packages.
         * @param {string} [include] Optional. Valid value is topup. Includes topup packages to the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PackagesGet: async (accept: string, authorization: string, filterType?: string, filterCountry?: string, limit?: string, page?: string, include?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2PackagesGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2PackagesGet', 'authorization', authorization)
            const localVarPath = `/v2/packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filterType !== undefined) {
                localVarQueryParameter['filter[type]'] = filterType;
            }

            if (filterCountry !== undefined) {
                localVarQueryParameter['filter[country]'] = filterCountry;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsBrowsePackagesApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsBrowsePackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsBrowsePackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint provides a comprehensive list of devices that are compatible with eSIMs. Use this information to ensure that your customers have devices that support eSIM functionality.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers to authenticate your API call.   - The returned list is regularly updated to include the latest compatible devices, ensuring accurate and reliable information for your integration.   - Use this endpoint to validate device compatibility before processing eSIM orders.  
         * @summary Get compatible device list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2CompatibleDevicesGet(accept: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CompatibleDevicesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2CompatibleDevicesGet(accept, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsBrowsePackagesApi.v2CompatibleDevicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * :::highlight blue ðŸ’¡ **Action Required: Synchronize at least once every hour.** This step is vital for ensuring newly introduced packages are available and out-of-stock packages are excluded. :::  Retrieve a list of local and global eSIM packages available through the Airalo Partners API. Local packages cover a single country, while global packages span multiple countries and regions. This endpoint helps you synchronize eSIM plans/packages with your system, ensuring newly introduced packages are available to your clients and out-of-stock packages are handled properly.    #### Features   - **Package Types**: Supports standard data packages and the new \"Voice and Text\" packages.   - **Filtering**: Filter results by operator type or country code to tailor the package list to your needs.   - **Pagination**: Adjust pagination settings to retrieve results in manageable chunks.   - **Limit**: Set the `limit` parameter to a high value (e.g., 1,000) to fetch all packages in a single request without using pagination.   - **Include Top-Up**: Use the `include:top-up` parameter to fetch eSIM packages along with their associated top-up packages.    #### Rate Limit   - This endpoint allows up to **40 requests per minute**. Ensure your implementation respects this limit to avoid rate limit errors.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers for authentication.  
         * @summary Get packages
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [filterType] Optional. A string to filter packages by operator type. Possible values are \&quot;local\&quot; and \&quot;global\&quot;.    If the filter is set to \&quot;global,\&quot; the output will include only global and regional eSims. Global and regional packages do not use the \&quot;country_code\&quot; field, which will be empty. The \&quot;type\&quot; field in the operator object within the response will be set to \&quot;global.\&quot; A package is considered worldwide if its \&quot;slug\&quot; field is set to \&quot;world\&quot; and regional if \&quot;slug\&quot; contains a region name, for example, \&quot;europe\&quot; or \&quot;Africa\&quot;.    If the filter is set to \&quot;local,\&quot; the response will contain only country-specific packages. To get the list of packages for a single country, you can use it in combination with filter[country] parameter. The \&quot;type\&quot; field in the operator object of the response will indicate a \&quot;local\&quot; type.    When the filter is not set, we return all types of eSIMs: local, regional, and global.
         * @param {string} [filterCountry] Optional. A string to filter packages by country code. Examples include US, DE, GB, IT, and UA.
         * @param {string} [limit] Optional. An integer specifying how many items will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.  If the page is set to 2 or beyond, the response will have different format and contain an object representing the country\&#39;s index in the list of packages.
         * @param {string} [include] Optional. Valid value is topup. Includes topup packages to the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2PackagesGet(accept: string, authorization: string, filterType?: string, filterCountry?: string, limit?: string, page?: string, include?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2PackagesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2PackagesGet(accept, authorization, filterType, filterCountry, limit, page, include, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsBrowsePackagesApi.v2PackagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsBrowsePackagesApi - factory interface
 * @export
 */
export const RESTAPIEndpointsBrowsePackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsBrowsePackagesApiFp(configuration)
    return {
        /**
         * This endpoint provides a comprehensive list of devices that are compatible with eSIMs. Use this information to ensure that your customers have devices that support eSIM functionality.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers to authenticate your API call.   - The returned list is regularly updated to include the latest compatible devices, ensuring accurate and reliable information for your integration.   - Use this endpoint to validate device compatibility before processing eSIM orders.  
         * @summary Get compatible device list
         * @param {RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CompatibleDevicesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CompatibleDevicesGet200Response> {
            return localVarFp.v2CompatibleDevicesGet(requestParameters.accept, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * :::highlight blue ðŸ’¡ **Action Required: Synchronize at least once every hour.** This step is vital for ensuring newly introduced packages are available and out-of-stock packages are excluded. :::  Retrieve a list of local and global eSIM packages available through the Airalo Partners API. Local packages cover a single country, while global packages span multiple countries and regions. This endpoint helps you synchronize eSIM plans/packages with your system, ensuring newly introduced packages are available to your clients and out-of-stock packages are handled properly.    #### Features   - **Package Types**: Supports standard data packages and the new \"Voice and Text\" packages.   - **Filtering**: Filter results by operator type or country code to tailor the package list to your needs.   - **Pagination**: Adjust pagination settings to retrieve results in manageable chunks.   - **Limit**: Set the `limit` parameter to a high value (e.g., 1,000) to fetch all packages in a single request without using pagination.   - **Include Top-Up**: Use the `include:top-up` parameter to fetch eSIM packages along with their associated top-up packages.    #### Rate Limit   - This endpoint allows up to **40 requests per minute**. Ensure your implementation respects this limit to avoid rate limit errors.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers for authentication.  
         * @summary Get packages
         * @param {RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2PackagesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2PackagesGet200Response> {
            return localVarFp.v2PackagesGet(requestParameters.accept, requestParameters.authorization, requestParameters.filterType, requestParameters.filterCountry, requestParameters.limit, requestParameters.page, requestParameters.include, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsBrowsePackagesApi - interface
 * @export
 * @interface RESTAPIEndpointsBrowsePackagesApi
 */
export interface RESTAPIEndpointsBrowsePackagesApiInterface {
    /**
     * This endpoint provides a comprehensive list of devices that are compatible with eSIMs. Use this information to ensure that your customers have devices that support eSIM functionality.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers to authenticate your API call.   - The returned list is regularly updated to include the latest compatible devices, ensuring accurate and reliable information for your integration.   - Use this endpoint to validate device compatibility before processing eSIM orders.  
     * @summary Get compatible device list
     * @param {RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsBrowsePackagesApiInterface
     */
    v2CompatibleDevicesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CompatibleDevicesGet200Response>;

    /**
     * :::highlight blue ðŸ’¡ **Action Required: Synchronize at least once every hour.** This step is vital for ensuring newly introduced packages are available and out-of-stock packages are excluded. :::  Retrieve a list of local and global eSIM packages available through the Airalo Partners API. Local packages cover a single country, while global packages span multiple countries and regions. This endpoint helps you synchronize eSIM plans/packages with your system, ensuring newly introduced packages are available to your clients and out-of-stock packages are handled properly.    #### Features   - **Package Types**: Supports standard data packages and the new \"Voice and Text\" packages.   - **Filtering**: Filter results by operator type or country code to tailor the package list to your needs.   - **Pagination**: Adjust pagination settings to retrieve results in manageable chunks.   - **Limit**: Set the `limit` parameter to a high value (e.g., 1,000) to fetch all packages in a single request without using pagination.   - **Include Top-Up**: Use the `include:top-up` parameter to fetch eSIM packages along with their associated top-up packages.    #### Rate Limit   - This endpoint allows up to **40 requests per minute**. Ensure your implementation respects this limit to avoid rate limit errors.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers for authentication.  
     * @summary Get packages
     * @param {RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsBrowsePackagesApiInterface
     */
    v2PackagesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2PackagesGet200Response>;

}

/**
 * Request parameters for v2CompatibleDevicesGet operation in RESTAPIEndpointsBrowsePackagesApi.
 * @export
 * @interface RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest
 */
export interface RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGet
     */
    readonly authorization: string
}

/**
 * Request parameters for v2PackagesGet operation in RESTAPIEndpointsBrowsePackagesApi.
 * @export
 * @interface RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest
 */
export interface RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly authorization: string

    /**
     * Optional. A string to filter packages by operator type. Possible values are \&quot;local\&quot; and \&quot;global\&quot;.    If the filter is set to \&quot;global,\&quot; the output will include only global and regional eSims. Global and regional packages do not use the \&quot;country_code\&quot; field, which will be empty. The \&quot;type\&quot; field in the operator object within the response will be set to \&quot;global.\&quot; A package is considered worldwide if its \&quot;slug\&quot; field is set to \&quot;world\&quot; and regional if \&quot;slug\&quot; contains a region name, for example, \&quot;europe\&quot; or \&quot;Africa\&quot;.    If the filter is set to \&quot;local,\&quot; the response will contain only country-specific packages. To get the list of packages for a single country, you can use it in combination with filter[country] parameter. The \&quot;type\&quot; field in the operator object of the response will indicate a \&quot;local\&quot; type.    When the filter is not set, we return all types of eSIMs: local, regional, and global.
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly filterType?: string

    /**
     * Optional. A string to filter packages by country code. Examples include US, DE, GB, IT, and UA.
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly filterCountry?: string

    /**
     * Optional. An integer specifying how many items will be returned on each page.
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly limit?: string

    /**
     * Optional. An integer specifying the pagination\&#39;s current page.  If the page is set to 2 or beyond, the response will have different format and contain an object representing the country\&#39;s index in the list of packages.
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly page?: string

    /**
     * Optional. Valid value is topup. Includes topup packages to the response
     * @type {string}
     * @memberof RESTAPIEndpointsBrowsePackagesApiV2PackagesGet
     */
    readonly include?: string
}

/**
 * RESTAPIEndpointsBrowsePackagesApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsBrowsePackagesApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsBrowsePackagesApi extends BaseAPI implements RESTAPIEndpointsBrowsePackagesApiInterface {
    /**
     * This endpoint provides a comprehensive list of devices that are compatible with eSIMs. Use this information to ensure that your customers have devices that support eSIM functionality.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers to authenticate your API call.   - The returned list is regularly updated to include the latest compatible devices, ensuring accurate and reliable information for your integration.   - Use this endpoint to validate device compatibility before processing eSIM orders.  
     * @summary Get compatible device list
     * @param {RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsBrowsePackagesApi
     */
    public v2CompatibleDevicesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2CompatibleDevicesGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsBrowsePackagesApiFp(this.configuration).v2CompatibleDevicesGet(requestParameters.accept, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * :::highlight blue ðŸ’¡ **Action Required: Synchronize at least once every hour.** This step is vital for ensuring newly introduced packages are available and out-of-stock packages are excluded. :::  Retrieve a list of local and global eSIM packages available through the Airalo Partners API. Local packages cover a single country, while global packages span multiple countries and regions. This endpoint helps you synchronize eSIM plans/packages with your system, ensuring newly introduced packages are available to your clients and out-of-stock packages are handled properly.    #### Features   - **Package Types**: Supports standard data packages and the new \"Voice and Text\" packages.   - **Filtering**: Filter results by operator type or country code to tailor the package list to your needs.   - **Pagination**: Adjust pagination settings to retrieve results in manageable chunks.   - **Limit**: Set the `limit` parameter to a high value (e.g., 1,000) to fetch all packages in a single request without using pagination.   - **Include Top-Up**: Use the `include:top-up` parameter to fetch eSIM packages along with their associated top-up packages.    #### Rate Limit   - This endpoint allows up to **40 requests per minute**. Ensure your implementation respects this limit to avoid rate limit errors.    #### Important Notes   - Include the access token, obtained from the **Request Access Token** endpoint, in the request headers for authentication.  
     * @summary Get packages
     * @param {RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsBrowsePackagesApi
     */
    public v2PackagesGet(requestParameters: RESTAPIEndpointsBrowsePackagesApiV2PackagesGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsBrowsePackagesApiFp(this.configuration).v2PackagesGet(requestParameters.accept, requestParameters.authorization, requestParameters.filterType, requestParameters.filterCountry, requestParameters.limit, requestParameters.page, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }
}

