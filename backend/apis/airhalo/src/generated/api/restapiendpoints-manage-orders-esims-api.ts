/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2CancelFutureOrdersPost200Response } from '../models';
// @ts-ignore
import type { V2CancelFutureOrdersPost422Response } from '../models';
// @ts-ignore
import type { V2CancelFutureOrdersPostRequest } from '../models';
// @ts-ignore
import type { V2OrdersGet200Response } from '../models';
// @ts-ignore
import type { V2OrdersGet422Response } from '../models';
// @ts-ignore
import type { V2OrdersOrderIdGet200Response } from '../models';
// @ts-ignore
import type { V2SimsSimIccidBrandPut200Response } from '../models';
// @ts-ignore
import type { V2SimsSimIccidUsageGet404Response } from '../models';
/**
 * RESTAPIEndpointsManageOrdersESIMsApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsManageOrdersESIMsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to submit future order cancellation requests via the Airalo Partner API.  To proceed, provide an array of request_id strings from the \"Create Future Order\" endpoint response.  Please note: - Future orders can be canceled up to 24 hours before the due date. - You can include up to 10 future orders in a single request. - An access token from the \"Request Access Token\" endpoint is required.  For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ). 
         * @summary Cancel future orders
         * @param {string} accept 
         * @param {string} authorization 
         * @param {V2CancelFutureOrdersPostRequest} [v2CancelFutureOrdersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CancelFutureOrdersPost: async (accept: string, authorization: string, v2CancelFutureOrdersPostRequest?: V2CancelFutureOrdersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2CancelFutureOrdersPost', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2CancelFutureOrdersPost', 'authorization', authorization)
            const localVarPath = `/v2/cancel-future-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2CancelFutureOrdersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a list of your orders from the Airalo Partners API. By using various filters, you can customize the results to match specific criteria. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
         * @param {string} [filterCreatedAt] Optional. A string to filter orders by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
         * @param {string} [filterCode] Optional. Filter orders by their order code. This performs a like search using the format \&#39;%ORDER_CODE%\&#39;.
         * @param {string} [filterOrderStatus] Optional. A string to filter orders by their status. Possible values could be obtained from the \&quot;Get Order Statuses List\&quot; endpoint, and currently limited to\&quot;completed\&quot;, \&quot;failed\&quot;, and \&quot;refunded\&quot;.
         * @param {string} [filterIccid] Optional. Filter orders by the sim\&#39;s ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
         * @param {string} [filterDescription] Optional. A string to filter orders by their description. This performs a like search using the format \&#39;%DESCRIPTION%\&#39;.
         * @param {string} [limit] Optional. An integer specifying how many orders will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersGet: async (accept: string, authorization: string, include?: string, filterCreatedAt?: string, filterCode?: string, filterOrderStatus?: string, filterIccid?: string, filterDescription?: string, limit?: string, page?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2OrdersGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2OrdersGet', 'authorization', authorization)
            const localVarPath = `/v2/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (filterCreatedAt !== undefined) {
                localVarQueryParameter['filter[created_at]'] = filterCreatedAt;
            }

            if (filterCode !== undefined) {
                localVarQueryParameter['filter[code]'] = filterCode;
            }

            if (filterOrderStatus !== undefined) {
                localVarQueryParameter['filter[order_status]'] = filterOrderStatus;
            }

            if (filterIccid !== undefined) {
                localVarQueryParameter['filter[iccid]'] = filterIccid;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve the details of a specific order from the Airalo Partners API using the order ID. You can also include related data in the response by specifying optional parameters. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order
         * @param {string} orderId The order ID for which you want to retrieve the details.
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersOrderIdGet: async (orderId: string, accept: string, authorization: string, include?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('v2OrdersOrderIdGet', 'orderId', orderId)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2OrdersOrderIdGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2OrdersOrderIdGet', 'authorization', authorization)
            const localVarPath = `/v2/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update assigned brand settings name of a specific eSIM from the Airalo Partners API using the eSIM\'s ICCID. This brand is used to apply branding on sharing link or share e-mails.If brand is set as null value, eSIM will be shared with unbranded visual.     The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.     For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Update eSIM brand
         * @param {string} simIccid The ICCID of the eSIM for which you want to update the brand.
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} brandSettingsName Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsSimIccidBrandPut: async (simIccid: string, accept: string, authorization: string, brandSettingsName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simIccid' is not null or undefined
            assertParamExists('v2SimsSimIccidBrandPut', 'simIccid', simIccid)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2SimsSimIccidBrandPut', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2SimsSimIccidBrandPut', 'authorization', authorization)
            // verify required parameter 'brandSettingsName' is not null or undefined
            assertParamExists('v2SimsSimIccidBrandPut', 'brandSettingsName', brandSettingsName)
            const localVarPath = `/v2/sims/{sim_iccid}/brand`
                .replace(`{${"sim_iccid"}}`, encodeURIComponent(String(simIccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (brandSettingsName !== undefined) { 
                localVarFormParams.append('brand_settings_name', brandSettingsName as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsManageOrdersESIMsApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsManageOrdersESIMsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsManageOrdersESIMsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to submit future order cancellation requests via the Airalo Partner API.  To proceed, provide an array of request_id strings from the \"Create Future Order\" endpoint response.  Please note: - Future orders can be canceled up to 24 hours before the due date. - You can include up to 10 future orders in a single request. - An access token from the \"Request Access Token\" endpoint is required.  For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ). 
         * @summary Cancel future orders
         * @param {string} accept 
         * @param {string} authorization 
         * @param {V2CancelFutureOrdersPostRequest} [v2CancelFutureOrdersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2CancelFutureOrdersPost(accept: string, authorization: string, v2CancelFutureOrdersPostRequest?: V2CancelFutureOrdersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CancelFutureOrdersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2CancelFutureOrdersPost(accept, authorization, v2CancelFutureOrdersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsManageOrdersESIMsApi.v2CancelFutureOrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve a list of your orders from the Airalo Partners API. By using various filters, you can customize the results to match specific criteria. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
         * @param {string} [filterCreatedAt] Optional. A string to filter orders by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
         * @param {string} [filterCode] Optional. Filter orders by their order code. This performs a like search using the format \&#39;%ORDER_CODE%\&#39;.
         * @param {string} [filterOrderStatus] Optional. A string to filter orders by their status. Possible values could be obtained from the \&quot;Get Order Statuses List\&quot; endpoint, and currently limited to\&quot;completed\&quot;, \&quot;failed\&quot;, and \&quot;refunded\&quot;.
         * @param {string} [filterIccid] Optional. Filter orders by the sim\&#39;s ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
         * @param {string} [filterDescription] Optional. A string to filter orders by their description. This performs a like search using the format \&#39;%DESCRIPTION%\&#39;.
         * @param {string} [limit] Optional. An integer specifying how many orders will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrdersGet(accept: string, authorization: string, include?: string, filterCreatedAt?: string, filterCode?: string, filterOrderStatus?: string, filterIccid?: string, filterDescription?: string, limit?: string, page?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrdersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrdersGet(accept, authorization, include, filterCreatedAt, filterCode, filterOrderStatus, filterIccid, filterDescription, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsManageOrdersESIMsApi.v2OrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve the details of a specific order from the Airalo Partners API using the order ID. You can also include related data in the response by specifying optional parameters. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order
         * @param {string} orderId The order ID for which you want to retrieve the details.
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrdersOrderIdGet(orderId: string, accept: string, authorization: string, include?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrdersOrderIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrdersOrderIdGet(orderId, accept, authorization, include, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsManageOrdersESIMsApi.v2OrdersOrderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to update assigned brand settings name of a specific eSIM from the Airalo Partners API using the eSIM\'s ICCID. This brand is used to apply branding on sharing link or share e-mails.If brand is set as null value, eSIM will be shared with unbranded visual.     The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.     For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Update eSIM brand
         * @param {string} simIccid The ICCID of the eSIM for which you want to update the brand.
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} brandSettingsName Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SimsSimIccidBrandPut(simIccid: string, accept: string, authorization: string, brandSettingsName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SimsSimIccidBrandPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SimsSimIccidBrandPut(simIccid, accept, authorization, brandSettingsName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsManageOrdersESIMsApi.v2SimsSimIccidBrandPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsManageOrdersESIMsApi - factory interface
 * @export
 */
export const RESTAPIEndpointsManageOrdersESIMsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsManageOrdersESIMsApiFp(configuration)
    return {
        /**
         * This endpoint allows you to submit future order cancellation requests via the Airalo Partner API.  To proceed, provide an array of request_id strings from the \"Create Future Order\" endpoint response.  Please note: - Future orders can be canceled up to 24 hours before the due date. - You can include up to 10 future orders in a single request. - An access token from the \"Request Access Token\" endpoint is required.  For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ). 
         * @summary Cancel future orders
         * @param {RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2CancelFutureOrdersPost(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CancelFutureOrdersPost200Response> {
            return localVarFp.v2CancelFutureOrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.v2CancelFutureOrdersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a list of your orders from the Airalo Partners API. By using various filters, you can customize the results to match specific criteria. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order list
         * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersGet200Response> {
            return localVarFp.v2OrdersGet(requestParameters.accept, requestParameters.authorization, requestParameters.include, requestParameters.filterCreatedAt, requestParameters.filterCode, requestParameters.filterOrderStatus, requestParameters.filterIccid, requestParameters.filterDescription, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the details of a specific order from the Airalo Partners API using the order ID. You can also include related data in the response by specifying optional parameters. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get order
         * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersOrderIdGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersOrderIdGet200Response> {
            return localVarFp.v2OrdersOrderIdGet(requestParameters.orderId, requestParameters.accept, requestParameters.authorization, requestParameters.include, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update assigned brand settings name of a specific eSIM from the Airalo Partners API using the eSIM\'s ICCID. This brand is used to apply branding on sharing link or share e-mails.If brand is set as null value, eSIM will be shared with unbranded visual.     The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.     For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Update eSIM brand
         * @param {RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsSimIccidBrandPut(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsSimIccidBrandPut200Response> {
            return localVarFp.v2SimsSimIccidBrandPut(requestParameters.simIccid, requestParameters.accept, requestParameters.authorization, requestParameters.brandSettingsName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsManageOrdersESIMsApi - interface
 * @export
 * @interface RESTAPIEndpointsManageOrdersESIMsApi
 */
export interface RESTAPIEndpointsManageOrdersESIMsApiInterface {
    /**
     * This endpoint allows you to submit future order cancellation requests via the Airalo Partner API.  To proceed, provide an array of request_id strings from the \"Create Future Order\" endpoint response.  Please note: - Future orders can be canceled up to 24 hours before the due date. - You can include up to 10 future orders in a single request. - An access token from the \"Request Access Token\" endpoint is required.  For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ). 
     * @summary Cancel future orders
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiInterface
     */
    v2CancelFutureOrdersPost(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CancelFutureOrdersPost200Response>;

    /**
     * This endpoint allows you to retrieve a list of your orders from the Airalo Partners API. By using various filters, you can customize the results to match specific criteria. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get order list
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiInterface
     */
    v2OrdersGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersGet200Response>;

    /**
     * This endpoint allows you to retrieve the details of a specific order from the Airalo Partners API using the order ID. You can also include related data in the response by specifying optional parameters. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get order
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiInterface
     */
    v2OrdersOrderIdGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersOrderIdGet200Response>;

    /**
     * This endpoint allows you to update assigned brand settings name of a specific eSIM from the Airalo Partners API using the eSIM\'s ICCID. This brand is used to apply branding on sharing link or share e-mails.If brand is set as null value, eSIM will be shared with unbranded visual.     The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.     For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Update eSIM brand
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiInterface
     */
    v2SimsSimIccidBrandPut(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsSimIccidBrandPut200Response>;

}

/**
 * Request parameters for v2CancelFutureOrdersPost operation in RESTAPIEndpointsManageOrdersESIMsApi.
 * @export
 * @interface RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest
 */
export interface RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPost
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPost
     */
    readonly authorization: string

    /**
     * 
     * @type {V2CancelFutureOrdersPostRequest}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPost
     */
    readonly v2CancelFutureOrdersPostRequest?: V2CancelFutureOrdersPostRequest
}

/**
 * Request parameters for v2OrdersGet operation in RESTAPIEndpointsManageOrdersESIMsApi.
 * @export
 * @interface RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest
 */
export interface RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly authorization: string

    /**
     * Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly include?: string

    /**
     * Optional. A string to filter orders by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly filterCreatedAt?: string

    /**
     * Optional. Filter orders by their order code. This performs a like search using the format \&#39;%ORDER_CODE%\&#39;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly filterCode?: string

    /**
     * Optional. A string to filter orders by their status. Possible values could be obtained from the \&quot;Get Order Statuses List\&quot; endpoint, and currently limited to\&quot;completed\&quot;, \&quot;failed\&quot;, and \&quot;refunded\&quot;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly filterOrderStatus?: string

    /**
     * Optional. Filter orders by the sim\&#39;s ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly filterIccid?: string

    /**
     * Optional. A string to filter orders by their description. This performs a like search using the format \&#39;%DESCRIPTION%\&#39;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly filterDescription?: string

    /**
     * Optional. An integer specifying how many orders will be returned on each page.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly limit?: string

    /**
     * Optional. An integer specifying the pagination\&#39;s current page.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGet
     */
    readonly page?: string
}

/**
 * Request parameters for v2OrdersOrderIdGet operation in RESTAPIEndpointsManageOrdersESIMsApi.
 * @export
 * @interface RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest
 */
export interface RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest {
    /**
     * The order ID for which you want to retrieve the details.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGet
     */
    readonly orderId: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGet
     */
    readonly authorization: string

    /**
     * Optional. A comma-separated string to include related data in the response. Possible values are \&quot;sims\&quot;, \&quot;user\&quot;, and \&quot;status\&quot;.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGet
     */
    readonly include?: string
}

/**
 * Request parameters for v2SimsSimIccidBrandPut operation in RESTAPIEndpointsManageOrdersESIMsApi.
 * @export
 * @interface RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest
 */
export interface RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest {
    /**
     * The ICCID of the eSIM for which you want to update the brand.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPut
     */
    readonly simIccid: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPut
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPut
     */
    readonly authorization: string

    /**
     * Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
     * @type {string}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPut
     */
    readonly brandSettingsName: string
}

/**
 * RESTAPIEndpointsManageOrdersESIMsApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsManageOrdersESIMsApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsManageOrdersESIMsApi extends BaseAPI implements RESTAPIEndpointsManageOrdersESIMsApiInterface {
    /**
     * This endpoint allows you to submit future order cancellation requests via the Airalo Partner API.  To proceed, provide an array of request_id strings from the \"Create Future Order\" endpoint response.  Please note: - Future orders can be canceled up to 24 hours before the due date. - You can include up to 10 future orders in a single request. - An access token from the \"Request Access Token\" endpoint is required.  For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ). 
     * @summary Cancel future orders
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApi
     */
    public v2CancelFutureOrdersPost(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2CancelFutureOrdersPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsManageOrdersESIMsApiFp(this.configuration).v2CancelFutureOrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.v2CancelFutureOrdersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a list of your orders from the Airalo Partners API. By using various filters, you can customize the results to match specific criteria. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get order list
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApi
     */
    public v2OrdersGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsManageOrdersESIMsApiFp(this.configuration).v2OrdersGet(requestParameters.accept, requestParameters.authorization, requestParameters.include, requestParameters.filterCreatedAt, requestParameters.filterCode, requestParameters.filterOrderStatus, requestParameters.filterIccid, requestParameters.filterDescription, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve the details of a specific order from the Airalo Partners API using the order ID. You can also include related data in the response by specifying optional parameters. The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get order
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApi
     */
    public v2OrdersOrderIdGet(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2OrdersOrderIdGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsManageOrdersESIMsApiFp(this.configuration).v2OrdersOrderIdGet(requestParameters.orderId, requestParameters.accept, requestParameters.authorization, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update assigned brand settings name of a specific eSIM from the Airalo Partners API using the eSIM\'s ICCID. This brand is used to apply branding on sharing link or share e-mails.If brand is set as null value, eSIM will be shared with unbranded visual.     The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.     For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Update eSIM brand
     * @param {RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsManageOrdersESIMsApi
     */
    public v2SimsSimIccidBrandPut(requestParameters: RESTAPIEndpointsManageOrdersESIMsApiV2SimsSimIccidBrandPutRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsManageOrdersESIMsApiFp(this.configuration).v2SimsSimIccidBrandPut(requestParameters.simIccid, requestParameters.accept, requestParameters.authorization, requestParameters.brandSettingsName, options).then((request) => request(this.axios, this.basePath));
    }
}

