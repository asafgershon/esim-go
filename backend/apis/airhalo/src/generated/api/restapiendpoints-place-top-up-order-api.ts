/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2OrdersTopupsPost200Response } from '../models';
// @ts-ignore
import type { V2OrdersTopupsPost422Response } from '../models';
// @ts-ignore
import type { V2PackagesGet422Response } from '../models';
// @ts-ignore
import type { V2SimsGet200Response } from '../models';
// @ts-ignore
import type { V2SimsIccidPackagesGet200Response } from '../models';
// @ts-ignore
import type { V2SimsIccidTopupsGet200Response } from '../models';
// @ts-ignore
import type { V2SimsIccidTopupsGet422Response } from '../models';
// @ts-ignore
import type { V2TokenPost200ResponseMeta } from '../models';
/**
 * RESTAPIEndpointsPlaceTopUpOrderApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsPlaceTopUpOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **To submit a top-up order:**  Make a POST request to the endpoint URL {{url}}/{{version}}/orders/topups  Include a request body in the form of a FormData object, which contains the following required fields:  1) package_id: The ID of the top-up package you want to purchase  2) iccid: The ICCID of the eSIM for which you want to purchase the top-up package.  You can also include an optional description field to provide additional information about the order.  The API will respond with a JSON object containing the details of the order, including the package ID, quantity, price, and other information.  **The complete workflow for buying a top-up package:**  1) GET {{url}}/{{version}}/sims to see the list of purchased eSIMs   2) GET {{url}}/{{version}}/sims/:iccid/topups to see the list of available top-ups for the eSIMs   3) POST {{url}}/{{version}}/orders/topups with the proper \"iccid\" and \"package_id\" values to purchase a top-up   4) GET {{url}}/{{version}}/sims/:iccid/packages to see the list of all packages for the eSIM, including the original package and top-ups  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Submit top-up order
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} packageId Required. A Topup Package ID, can be obtainer by executing a GET request to the \\\&quot;eSIM: List available top-up packages\\\&quot; endpoint
         * @param {string} iccid Required. eSIM ICCID, that identifies the eSIM for the top-up package. Can be obtained by execuring GET to the \\\&quot;eSIMs List\\\&quot; endpoint 
         * @param {string} description Optional. Order description to identify the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersTopupsPost: async (accept: string, authorization: string, packageId: string, iccid: string, description: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2OrdersTopupsPost', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2OrdersTopupsPost', 'authorization', authorization)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('v2OrdersTopupsPost', 'packageId', packageId)
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('v2OrdersTopupsPost', 'iccid', iccid)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('v2OrdersTopupsPost', 'description', description)
            const localVarPath = `/v2/orders/topups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (packageId !== undefined) { 
                localVarFormParams.append('package_id', packageId as any);
            }
    
            if (iccid !== undefined) { 
                localVarFormParams.append('iccid', iccid as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a list of your eSIMs from the Airalo Partners API. You can customize the results using various filters and include related data in the response by specifying optional parameters.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Get eSIMs list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;order\&quot;, \&quot;order.status\&quot;, \&quot;order.user\&quot; and \&quot;share\&quot;.
         * @param {string} [filterCreatedAt] Optional. A string to filter eSIMs by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
         * @param {string} [filterIccid] Optional. A string to filter eSIMs by their ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
         * @param {string} [limit] Optional. An integer specifying how many sims will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsGet: async (accept: string, authorization: string, include?: string, filterCreatedAt?: string, filterIccid?: string, limit?: string, page?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2SimsGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2SimsGet', 'authorization', authorization)
            const localVarPath = `/v2/sims`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (filterCreatedAt !== undefined) {
                localVarQueryParameter['filter[created_at]'] = filterCreatedAt;
            }

            if (filterIccid !== undefined) {
                localVarQueryParameter['filter[iccid]'] = filterIccid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **This endpoint comes with a Rate Limit:****you can pull specific eSIM history info once every 15 minutes.**  If you send another request too soon, the server\'s going to respond with a 429 HTTP code. Please check the \'Retry-After\' header, it\'ll tell you how many seconds to wait before the rate limit resets and you can fetch fresh info.  **Please, use a caching mechanism on the client side to deal with frequent customer requests.**  **To get and display this eSIM’s data package history, including top-ups:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/packages](https://partners-api.airalo.com/v1/sims/:iccid/packages), replacing :iccid with the ICCID of the eSIM for which you want to retrieve top-up package information.  The API will respond with a JSON object containing an array of purchased top-up packages for the eSIM, each of which includes an ID, remaining data amount, activation and expiration dates, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  eSIM package history
         * @param {string} iccid eSIM ICCID, used to query a list of purchased packages, including top-ups. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsIccidPackagesGet: async (iccid: string, accept: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('v2SimsIccidPackagesGet', 'iccid', iccid)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2SimsIccidPackagesGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2SimsIccidPackagesGet', 'authorization', authorization)
            const localVarPath = `/v2/sims/{iccid}/packages`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Endpoint do support new type of packages - \"Voice and Text\"**   **To get the list of available packages for an eSIM:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/topups](https://partners-api.airalo.com/v1/sims/:iccid/topups), replace :iccid with the ICCID of the eSIM for which you want to purchase a top-up.  The API will respond with a JSON object containing an array of available top-up packages, each of which includes an ID, price, data amount, duration, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  top-up package list
         * @param {string} iccid eSIM ICCID, used to query a list of available top-up packages. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsIccidTopupsGet: async (iccid: string, accept: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('v2SimsIccidTopupsGet', 'iccid', iccid)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2SimsIccidTopupsGet', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2SimsIccidTopupsGet', 'authorization', authorization)
            const localVarPath = `/v2/sims/{iccid}/topups`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsPlaceTopUpOrderApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsPlaceTopUpOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsPlaceTopUpOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * **To submit a top-up order:**  Make a POST request to the endpoint URL {{url}}/{{version}}/orders/topups  Include a request body in the form of a FormData object, which contains the following required fields:  1) package_id: The ID of the top-up package you want to purchase  2) iccid: The ICCID of the eSIM for which you want to purchase the top-up package.  You can also include an optional description field to provide additional information about the order.  The API will respond with a JSON object containing the details of the order, including the package ID, quantity, price, and other information.  **The complete workflow for buying a top-up package:**  1) GET {{url}}/{{version}}/sims to see the list of purchased eSIMs   2) GET {{url}}/{{version}}/sims/:iccid/topups to see the list of available top-ups for the eSIMs   3) POST {{url}}/{{version}}/orders/topups with the proper \"iccid\" and \"package_id\" values to purchase a top-up   4) GET {{url}}/{{version}}/sims/:iccid/packages to see the list of all packages for the eSIM, including the original package and top-ups  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Submit top-up order
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} packageId Required. A Topup Package ID, can be obtainer by executing a GET request to the \\\&quot;eSIM: List available top-up packages\\\&quot; endpoint
         * @param {string} iccid Required. eSIM ICCID, that identifies the eSIM for the top-up package. Can be obtained by execuring GET to the \\\&quot;eSIMs List\\\&quot; endpoint 
         * @param {string} description Optional. Order description to identify the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrdersTopupsPost(accept: string, authorization: string, packageId: string, iccid: string, description: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrdersTopupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrdersTopupsPost(accept, authorization, packageId, iccid, description, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceTopUpOrderApi.v2OrdersTopupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve a list of your eSIMs from the Airalo Partners API. You can customize the results using various filters and include related data in the response by specifying optional parameters.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Get eSIMs list
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} [include] Optional. A comma-separated string to include related data in the response. Possible values are \&quot;order\&quot;, \&quot;order.status\&quot;, \&quot;order.user\&quot; and \&quot;share\&quot;.
         * @param {string} [filterCreatedAt] Optional. A string to filter eSIMs by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
         * @param {string} [filterIccid] Optional. A string to filter eSIMs by their ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
         * @param {string} [limit] Optional. An integer specifying how many sims will be returned on each page.
         * @param {string} [page] Optional. An integer specifying the pagination\&#39;s current page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SimsGet(accept: string, authorization: string, include?: string, filterCreatedAt?: string, filterIccid?: string, limit?: string, page?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SimsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SimsGet(accept, authorization, include, filterCreatedAt, filterIccid, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceTopUpOrderApi.v2SimsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **This endpoint comes with a Rate Limit:****you can pull specific eSIM history info once every 15 minutes.**  If you send another request too soon, the server\'s going to respond with a 429 HTTP code. Please check the \'Retry-After\' header, it\'ll tell you how many seconds to wait before the rate limit resets and you can fetch fresh info.  **Please, use a caching mechanism on the client side to deal with frequent customer requests.**  **To get and display this eSIM’s data package history, including top-ups:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/packages](https://partners-api.airalo.com/v1/sims/:iccid/packages), replacing :iccid with the ICCID of the eSIM for which you want to retrieve top-up package information.  The API will respond with a JSON object containing an array of purchased top-up packages for the eSIM, each of which includes an ID, remaining data amount, activation and expiration dates, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  eSIM package history
         * @param {string} iccid eSIM ICCID, used to query a list of purchased packages, including top-ups. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SimsIccidPackagesGet(iccid: string, accept: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SimsIccidPackagesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SimsIccidPackagesGet(iccid, accept, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceTopUpOrderApi.v2SimsIccidPackagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * **Endpoint do support new type of packages - \"Voice and Text\"**   **To get the list of available packages for an eSIM:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/topups](https://partners-api.airalo.com/v1/sims/:iccid/topups), replace :iccid with the ICCID of the eSIM for which you want to purchase a top-up.  The API will respond with a JSON object containing an array of available top-up packages, each of which includes an ID, price, data amount, duration, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  top-up package list
         * @param {string} iccid eSIM ICCID, used to query a list of available top-up packages. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
         * @param {string} accept 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2SimsIccidTopupsGet(iccid: string, accept: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2SimsIccidTopupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2SimsIccidTopupsGet(iccid, accept, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceTopUpOrderApi.v2SimsIccidTopupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsPlaceTopUpOrderApi - factory interface
 * @export
 */
export const RESTAPIEndpointsPlaceTopUpOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsPlaceTopUpOrderApiFp(configuration)
    return {
        /**
         * **To submit a top-up order:**  Make a POST request to the endpoint URL {{url}}/{{version}}/orders/topups  Include a request body in the form of a FormData object, which contains the following required fields:  1) package_id: The ID of the top-up package you want to purchase  2) iccid: The ICCID of the eSIM for which you want to purchase the top-up package.  You can also include an optional description field to provide additional information about the order.  The API will respond with a JSON object containing the details of the order, including the package ID, quantity, price, and other information.  **The complete workflow for buying a top-up package:**  1) GET {{url}}/{{version}}/sims to see the list of purchased eSIMs   2) GET {{url}}/{{version}}/sims/:iccid/topups to see the list of available top-ups for the eSIMs   3) POST {{url}}/{{version}}/orders/topups with the proper \"iccid\" and \"package_id\" values to purchase a top-up   4) GET {{url}}/{{version}}/sims/:iccid/packages to see the list of all packages for the eSIM, including the original package and top-ups  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Submit top-up order
         * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersTopupsPost(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersTopupsPost200Response> {
            return localVarFp.v2OrdersTopupsPost(requestParameters.accept, requestParameters.authorization, requestParameters.packageId, requestParameters.iccid, requestParameters.description, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a list of your eSIMs from the Airalo Partners API. You can customize the results using various filters and include related data in the response by specifying optional parameters.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Get eSIMs list
         * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsGet200Response> {
            return localVarFp.v2SimsGet(requestParameters.accept, requestParameters.authorization, requestParameters.include, requestParameters.filterCreatedAt, requestParameters.filterIccid, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * **This endpoint comes with a Rate Limit:****you can pull specific eSIM history info once every 15 minutes.**  If you send another request too soon, the server\'s going to respond with a 429 HTTP code. Please check the \'Retry-After\' header, it\'ll tell you how many seconds to wait before the rate limit resets and you can fetch fresh info.  **Please, use a caching mechanism on the client side to deal with frequent customer requests.**  **To get and display this eSIM’s data package history, including top-ups:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/packages](https://partners-api.airalo.com/v1/sims/:iccid/packages), replacing :iccid with the ICCID of the eSIM for which you want to retrieve top-up package information.  The API will respond with a JSON object containing an array of purchased top-up packages for the eSIM, each of which includes an ID, remaining data amount, activation and expiration dates, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  eSIM package history
         * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsIccidPackagesGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsIccidPackagesGet200Response> {
            return localVarFp.v2SimsIccidPackagesGet(requestParameters.iccid, requestParameters.accept, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * **Endpoint do support new type of packages - \"Voice and Text\"**   **To get the list of available packages for an eSIM:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/topups](https://partners-api.airalo.com/v1/sims/:iccid/topups), replace :iccid with the ICCID of the eSIM for which you want to purchase a top-up.  The API will respond with a JSON object containing an array of available top-up packages, each of which includes an ID, price, data amount, duration, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
         * @summary Get  top-up package list
         * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2SimsIccidTopupsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsIccidTopupsGet200Response> {
            return localVarFp.v2SimsIccidTopupsGet(requestParameters.iccid, requestParameters.accept, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsPlaceTopUpOrderApi - interface
 * @export
 * @interface RESTAPIEndpointsPlaceTopUpOrderApi
 */
export interface RESTAPIEndpointsPlaceTopUpOrderApiInterface {
    /**
     * **To submit a top-up order:**  Make a POST request to the endpoint URL {{url}}/{{version}}/orders/topups  Include a request body in the form of a FormData object, which contains the following required fields:  1) package_id: The ID of the top-up package you want to purchase  2) iccid: The ICCID of the eSIM for which you want to purchase the top-up package.  You can also include an optional description field to provide additional information about the order.  The API will respond with a JSON object containing the details of the order, including the package ID, quantity, price, and other information.  **The complete workflow for buying a top-up package:**  1) GET {{url}}/{{version}}/sims to see the list of purchased eSIMs   2) GET {{url}}/{{version}}/sims/:iccid/topups to see the list of available top-ups for the eSIMs   3) POST {{url}}/{{version}}/orders/topups with the proper \"iccid\" and \"package_id\" values to purchase a top-up   4) GET {{url}}/{{version}}/sims/:iccid/packages to see the list of all packages for the eSIM, including the original package and top-ups  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Submit top-up order
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiInterface
     */
    v2OrdersTopupsPost(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersTopupsPost200Response>;

    /**
     * This endpoint allows you to retrieve a list of your eSIMs from the Airalo Partners API. You can customize the results using various filters and include related data in the response by specifying optional parameters.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
     * @summary Get eSIMs list
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiInterface
     */
    v2SimsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsGet200Response>;

    /**
     * **This endpoint comes with a Rate Limit:****you can pull specific eSIM history info once every 15 minutes.**  If you send another request too soon, the server\'s going to respond with a 429 HTTP code. Please check the \'Retry-After\' header, it\'ll tell you how many seconds to wait before the rate limit resets and you can fetch fresh info.  **Please, use a caching mechanism on the client side to deal with frequent customer requests.**  **To get and display this eSIM’s data package history, including top-ups:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/packages](https://partners-api.airalo.com/v1/sims/:iccid/packages), replacing :iccid with the ICCID of the eSIM for which you want to retrieve top-up package information.  The API will respond with a JSON object containing an array of purchased top-up packages for the eSIM, each of which includes an ID, remaining data amount, activation and expiration dates, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get  eSIM package history
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiInterface
     */
    v2SimsIccidPackagesGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsIccidPackagesGet200Response>;

    /**
     * **Endpoint do support new type of packages - \"Voice and Text\"**   **To get the list of available packages for an eSIM:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/topups](https://partners-api.airalo.com/v1/sims/:iccid/topups), replace :iccid with the ICCID of the eSIM for which you want to purchase a top-up.  The API will respond with a JSON object containing an array of available top-up packages, each of which includes an ID, price, data amount, duration, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get  top-up package list
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiInterface
     */
    v2SimsIccidTopupsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2SimsIccidTopupsGet200Response>;

}

/**
 * Request parameters for v2OrdersTopupsPost operation in RESTAPIEndpointsPlaceTopUpOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest
 */
export interface RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPost
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPost
     */
    readonly authorization: string

    /**
     * Required. A Topup Package ID, can be obtainer by executing a GET request to the \\\&quot;eSIM: List available top-up packages\\\&quot; endpoint
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPost
     */
    readonly packageId: string

    /**
     * Required. eSIM ICCID, that identifies the eSIM for the top-up package. Can be obtained by execuring GET to the \\\&quot;eSIMs List\\\&quot; endpoint 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPost
     */
    readonly iccid: string

    /**
     * Optional. Order description to identify the order.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPost
     */
    readonly description: string
}

/**
 * Request parameters for v2SimsGet operation in RESTAPIEndpointsPlaceTopUpOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest
 */
export interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly authorization: string

    /**
     * Optional. A comma-separated string to include related data in the response. Possible values are \&quot;order\&quot;, \&quot;order.status\&quot;, \&quot;order.user\&quot; and \&quot;share\&quot;.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly include?: string

    /**
     * Optional. A string to filter eSIMs by their creation date. Specify the date range using a dash (-) as a delimiter for correct parsing.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly filterCreatedAt?: string

    /**
     * Optional. A string to filter eSIMs by their ICCID. This performs a like search using the format \&#39;%SIM_ICCID%\&#39;.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly filterIccid?: string

    /**
     * Optional. An integer specifying how many sims will be returned on each page.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly limit?: string

    /**
     * Optional. An integer specifying the pagination\&#39;s current page.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGet
     */
    readonly page?: string
}

/**
 * Request parameters for v2SimsIccidPackagesGet operation in RESTAPIEndpointsPlaceTopUpOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest
 */
export interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest {
    /**
     * eSIM ICCID, used to query a list of purchased packages, including top-ups. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGet
     */
    readonly authorization: string
}

/**
 * Request parameters for v2SimsIccidTopupsGet operation in RESTAPIEndpointsPlaceTopUpOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest
 */
export interface RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest {
    /**
     * eSIM ICCID, used to query a list of available top-up packages. Required. Can be obtained by execuring GET to the \&quot;eSIMs List\&quot; endpoint 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGet
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGet
     */
    readonly authorization: string
}

/**
 * RESTAPIEndpointsPlaceTopUpOrderApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsPlaceTopUpOrderApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsPlaceTopUpOrderApi extends BaseAPI implements RESTAPIEndpointsPlaceTopUpOrderApiInterface {
    /**
     * **To submit a top-up order:**  Make a POST request to the endpoint URL {{url}}/{{version}}/orders/topups  Include a request body in the form of a FormData object, which contains the following required fields:  1) package_id: The ID of the top-up package you want to purchase  2) iccid: The ICCID of the eSIM for which you want to purchase the top-up package.  You can also include an optional description field to provide additional information about the order.  The API will respond with a JSON object containing the details of the order, including the package ID, quantity, price, and other information.  **The complete workflow for buying a top-up package:**  1) GET {{url}}/{{version}}/sims to see the list of purchased eSIMs   2) GET {{url}}/{{version}}/sims/:iccid/topups to see the list of available top-ups for the eSIMs   3) POST {{url}}/{{version}}/orders/topups with the proper \"iccid\" and \"package_id\" values to purchase a top-up   4) GET {{url}}/{{version}}/sims/:iccid/packages to see the list of all packages for the eSIM, including the original package and top-ups  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Submit top-up order
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApi
     */
    public v2OrdersTopupsPost(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2OrdersTopupsPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceTopUpOrderApiFp(this.configuration).v2OrdersTopupsPost(requestParameters.accept, requestParameters.authorization, requestParameters.packageId, requestParameters.iccid, requestParameters.description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a list of your eSIMs from the Airalo Partners API. You can customize the results using various filters and include related data in the response by specifying optional parameters.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
     * @summary Get eSIMs list
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApi
     */
    public v2SimsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceTopUpOrderApiFp(this.configuration).v2SimsGet(requestParameters.accept, requestParameters.authorization, requestParameters.include, requestParameters.filterCreatedAt, requestParameters.filterIccid, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **This endpoint comes with a Rate Limit:****you can pull specific eSIM history info once every 15 minutes.**  If you send another request too soon, the server\'s going to respond with a 429 HTTP code. Please check the \'Retry-After\' header, it\'ll tell you how many seconds to wait before the rate limit resets and you can fetch fresh info.  **Please, use a caching mechanism on the client side to deal with frequent customer requests.**  **To get and display this eSIM’s data package history, including top-ups:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/packages](https://partners-api.airalo.com/v1/sims/:iccid/packages), replacing :iccid with the ICCID of the eSIM for which you want to retrieve top-up package information.  The API will respond with a JSON object containing an array of purchased top-up packages for the eSIM, each of which includes an ID, remaining data amount, activation and expiration dates, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get  eSIM package history
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApi
     */
    public v2SimsIccidPackagesGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidPackagesGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceTopUpOrderApiFp(this.configuration).v2SimsIccidPackagesGet(requestParameters.iccid, requestParameters.accept, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Endpoint do support new type of packages - \"Voice and Text\"**   **To get the list of available packages for an eSIM:**  Make a GET request to the endpoint URL [https://partners-api.airalo.com/v1/sims/:iccid/topups](https://partners-api.airalo.com/v1/sims/:iccid/topups), replace :iccid with the ICCID of the eSIM for which you want to purchase a top-up.  The API will respond with a JSON object containing an array of available top-up packages, each of which includes an ID, price, data amount, duration, and other information.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)
     * @summary Get  top-up package list
     * @param {RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceTopUpOrderApi
     */
    public v2SimsIccidTopupsGet(requestParameters: RESTAPIEndpointsPlaceTopUpOrderApiV2SimsIccidTopupsGetRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceTopUpOrderApiFp(this.configuration).v2SimsIccidTopupsGet(requestParameters.iccid, requestParameters.accept, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }
}

