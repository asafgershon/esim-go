/* tslint:disable */
/* eslint-disable */
/**
 * EasyCard Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OperationResponse,
  ShowDeletedEnum,
  SummariesResponseCreditCardTokenSummary,
} from '../models/index';

export interface ApiCardtokensGetRequest {
    creditCardTokenID?: string;
    cardNumber?: string;
    cardOwnerNationalID?: string;
    cardOwnerName?: string;
    terminalID?: string;
    merchantID?: string;
    consumerID?: string;
    consumerEmail?: string;
    legacyToken?: boolean;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiCardtokensKeyDeleteRequest {
    key: string;
}

/**
 * CardTokenApi - interface
 * 
 * @export
 * @interface CardTokenApiInterface
 */
export interface CardTokenApiInterface {
    /**
     * 
     * @summary Get tokens by filters
     * @param {string} [creditCardTokenID] 
     * @param {string} [cardNumber] 
     * @param {string} [cardOwnerNationalID] 
     * @param {string} [cardOwnerName] 
     * @param {string} [terminalID] 
     * @param {string} [merchantID] 
     * @param {string} [consumerID] 
     * @param {string} [consumerEmail] End-customer Email
     * @param {boolean} [legacyToken] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTokenApiInterface
     */
    apiCardtokensGetRaw(requestParameters: ApiCardtokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesResponseCreditCardTokenSummary>>;

    /**
     * Get tokens by filters
     */
    apiCardtokensGet(requestParameters: ApiCardtokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesResponseCreditCardTokenSummary>;

    /**
     * 
     * @summary Delete credit card token
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTokenApiInterface
     */
    apiCardtokensKeyDeleteRaw(requestParameters: ApiCardtokensKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Delete credit card token
     */
    apiCardtokensKeyDelete(requestParameters: ApiCardtokensKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

}

/**
 * 
 */
export class CardTokenApi extends runtime.BaseAPI implements CardTokenApiInterface {

    /**
     * Get tokens by filters
     */
    async apiCardtokensGetRaw(requestParameters: ApiCardtokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesResponseCreditCardTokenSummary>> {
        const queryParameters: any = {};

        if (requestParameters.creditCardTokenID !== undefined) {
            queryParameters['CreditCardTokenID'] = requestParameters.creditCardTokenID;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['CardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardOwnerNationalID !== undefined) {
            queryParameters['CardOwnerNationalID'] = requestParameters.cardOwnerNationalID;
        }

        if (requestParameters.cardOwnerName !== undefined) {
            queryParameters['CardOwnerName'] = requestParameters.cardOwnerName;
        }

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.legacyToken !== undefined) {
            queryParameters['LegacyToken'] = requestParameters.legacyToken;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/cardtokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get tokens by filters
     */
    async apiCardtokensGet(requestParameters: ApiCardtokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesResponseCreditCardTokenSummary> {
        const response = await this.apiCardtokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete credit card token
     */
    async apiCardtokensKeyDeleteRaw(requestParameters: ApiCardtokensKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling apiCardtokensKeyDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/cardtokens/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete credit card token
     */
    async apiCardtokensKeyDelete(requestParameters: ApiCardtokensKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiCardtokensKeyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
