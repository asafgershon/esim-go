/* tslint:disable */
/* eslint-disable */
/**
 * EasyCard Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrencyEnum,
  DealDetails,
  DocumentOriginEnum,
  DownloadInvoiceResponse,
  InvoiceBillingTypeEnum,
  InvoiceRequest,
  InvoiceResponse,
  InvoiceStatusEnum,
  InvoiceTypeEnum,
  OperationResponse,
  PaymentTypeEnum,
  QuickDateFilterTypeEnum,
  ResendInvoiceRequest,
  ResendSingleInvoiceRequest,
  ShowDeletedEnum,
  SummariesAmountResponseInvoiceSummary,
  SummariesTotalsResponse,
} from '../models/index';

export interface ApiInvoicingCancelInvoiceIDPostRequest {
    invoiceID: string;
}

export interface ApiInvoicingGetRequest {
    merchantID?: string;
    terminalID?: string;
    invoiceNumber?: string;
    invoiceID?: string;
    billingDealID?: string;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    status?: InvoiceStatusEnum;
    dateFrom?: string;
    dateTo?: string;
    invoiceType?: InvoiceTypeEnum;
    invoiceBillingType?: InvoiceBillingTypeEnum;
    consumerID?: string;
    consumerEmail?: string;
    amountFrom?: number;
    amountTo?: number;
    consumerExternalReference?: string;
    paymentType?: PaymentTypeEnum;
    documentOrigin?: DocumentOriginEnum;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiInvoicingInvoiceIDDownloadCopyGetRequest {
    invoiceID: string;
}

export interface ApiInvoicingInvoiceIDDownloadGetRequest {
    invoiceID: string;
}

export interface ApiInvoicingInvoiceIDGetRequest {
    invoiceID: string;
}

export interface ApiInvoicingPostRequest {
    invoiceRequest?: InvoiceRequest;
}

export interface ApiInvoicingResendPostRequest {
    resendInvoiceRequest?: ResendInvoiceRequest;
}

export interface ApiInvoicingResendSinglePostRequest {
    resendSingleInvoiceRequest?: ResendSingleInvoiceRequest;
}

export interface ApiInvoicingTotalsSegmentGetRequest {
    segment: string;
    merchantID?: string;
    terminalID?: string;
    invoiceNumber?: string;
    invoiceID?: string;
    billingDealID?: string;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    status?: InvoiceStatusEnum;
    dateFrom?: string;
    dateTo?: string;
    invoiceType?: InvoiceTypeEnum;
    invoiceBillingType?: InvoiceBillingTypeEnum;
    consumerID?: string;
    consumerEmail?: string;
    amountFrom?: number;
    amountTo?: number;
    consumerExternalReference?: string;
    paymentType?: PaymentTypeEnum;
    documentOrigin?: DocumentOriginEnum;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiInvoicingTransactionTransactionIDPostRequest {
    transactionID: string;
    dealDetails?: DealDetails;
}

/**
 * InvoicingApi - interface
 * 
 * @export
 * @interface InvoicingApiInterface
 */
export interface InvoicingApiInterface {
    /**
     * 
     * @summary Cancel invoice
     * @param {string} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingCancelInvoiceIDPostRaw(requestParameters: ApiInvoicingCancelInvoiceIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Cancel invoice
     */
    apiInvoicingCancelInvoiceIDPost(requestParameters: ApiInvoicingCancelInvoiceIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get invoices details by filters
     * @param {string} [merchantID] 
     * @param {string} [terminalID] 
     * @param {string} [invoiceNumber] 
     * @param {string} [invoiceID] 
     * @param {string} [billingDealID] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {InvoiceStatusEnum} [status]     initial    sending    sent    canceled    cancellationFailed    sendingFailed
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {InvoiceTypeEnum} [invoiceType]     invoice    invoiceWithPaymentInfo    creditNote    paymentInfo    refundInvoice    receiptForDonation
     * @param {InvoiceBillingTypeEnum} [invoiceBillingType]     ManualInvoice (Without transaction and billing)    TransactionInvoice (Transaction but has no billing)    InvoiceOnlyBilling (Billing\&#39;s invoice. But billing is without transactions (invoice only))    CreditCardBilling (Billing\&#39;s invoice. Billing payment type is credit card)    BankBilling (Billing\&#39;s invoice. Billing payment type is bank)
     * @param {string} [consumerID] 
     * @param {string} [consumerEmail] End-customer Email
     * @param {number} [amountFrom] 
     * @param {number} [amountTo] 
     * @param {string} [consumerExternalReference] 
     * @param {PaymentTypeEnum} [paymentType]     card    cheque    cash    bank    blender
     * @param {DocumentOriginEnum} [documentOrigin]     UI (Document created manually by merchant user using Merchant\&#39;s UI)    API (Document created via API)    checkout (Document created by consumer using Checkout Page)    billing (Document generated based on billing schedule)    device (Transaction created using pinpad device (or other device))    paymentRequest (Document created by consumer using Checkout Page with a payment link)    bit (Document created by consumer using Bit)    googlePay (Transaction created using Google Pay)    applePay (Transaction created using Apple Pay)    legacy (Transaction created using Legacy)    blender (Document created by consumer using Bit)
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingGetRaw(requestParameters: ApiInvoicingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseInvoiceSummary>>;

    /**
     * Get invoices details by filters
     */
    apiInvoicingGet(requestParameters: ApiInvoicingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseInvoiceSummary>;

    /**
     * 
     * @summary Get copy invoice download URL
     * @param {string} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingInvoiceIDDownloadCopyGetRaw(requestParameters: ApiInvoicingInvoiceIDDownloadCopyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadInvoiceResponse>>;

    /**
     * Get copy invoice download URL
     */
    apiInvoicingInvoiceIDDownloadCopyGet(requestParameters: ApiInvoicingInvoiceIDDownloadCopyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadInvoiceResponse>;

    /**
     * 
     * @summary Get invoice download URL
     * @param {string} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingInvoiceIDDownloadGetRaw(requestParameters: ApiInvoicingInvoiceIDDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadInvoiceResponse>>;

    /**
     * Get invoice download URL
     */
    apiInvoicingInvoiceIDDownloadGet(requestParameters: ApiInvoicingInvoiceIDDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadInvoiceResponse>;

    /**
     * 
     * @summary Get invoice by invoiceID
     * @param {string} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingInvoiceIDGetRaw(requestParameters: ApiInvoicingInvoiceIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>>;

    /**
     * Get invoice by invoiceID
     */
    apiInvoicingInvoiceIDGet(requestParameters: ApiInvoicingInvoiceIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse>;

    /**
     * 
     * @summary Create invoice
     * @param {InvoiceRequest} [invoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingPostRaw(requestParameters: ApiInvoicingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create invoice
     */
    apiInvoicingPost(requestParameters: ApiInvoicingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Resend invoices to customer
     * @param {ResendInvoiceRequest} [resendInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingResendPostRaw(requestParameters: ApiInvoicingResendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Resend invoices to customer
     */
    apiInvoicingResendPost(requestParameters: ApiInvoicingResendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Resend one invoice
     * @param {ResendSingleInvoiceRequest} [resendSingleInvoiceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingResendSinglePostRaw(requestParameters: ApiInvoicingResendSinglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Resend one invoice
     */
    apiInvoicingResendSinglePost(requestParameters: ApiInvoicingResendSinglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get invoices details by filters
     * @param {string} segment 
     * @param {string} [merchantID] 
     * @param {string} [terminalID] 
     * @param {string} [invoiceNumber] 
     * @param {string} [invoiceID] 
     * @param {string} [billingDealID] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {InvoiceStatusEnum} [status]     initial    sending    sent    canceled    cancellationFailed    sendingFailed
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {InvoiceTypeEnum} [invoiceType]     invoice    invoiceWithPaymentInfo    creditNote    paymentInfo    refundInvoice    receiptForDonation
     * @param {InvoiceBillingTypeEnum} [invoiceBillingType]     ManualInvoice (Without transaction and billing)    TransactionInvoice (Transaction but has no billing)    InvoiceOnlyBilling (Billing\&#39;s invoice. But billing is without transactions (invoice only))    CreditCardBilling (Billing\&#39;s invoice. Billing payment type is credit card)    BankBilling (Billing\&#39;s invoice. Billing payment type is bank)
     * @param {string} [consumerID] 
     * @param {string} [consumerEmail] End-customer Email
     * @param {number} [amountFrom] 
     * @param {number} [amountTo] 
     * @param {string} [consumerExternalReference] 
     * @param {PaymentTypeEnum} [paymentType]     card    cheque    cash    bank    blender
     * @param {DocumentOriginEnum} [documentOrigin]     UI (Document created manually by merchant user using Merchant\&#39;s UI)    API (Document created via API)    checkout (Document created by consumer using Checkout Page)    billing (Document generated based on billing schedule)    device (Transaction created using pinpad device (or other device))    paymentRequest (Document created by consumer using Checkout Page with a payment link)    bit (Document created by consumer using Bit)    googlePay (Transaction created using Google Pay)    applePay (Transaction created using Apple Pay)    legacy (Transaction created using Legacy)    blender (Document created by consumer using Bit)
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingTotalsSegmentGetRaw(requestParameters: ApiInvoicingTotalsSegmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesTotalsResponse>>;

    /**
     * Get invoices details by filters
     */
    apiInvoicingTotalsSegmentGet(requestParameters: ApiInvoicingTotalsSegmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesTotalsResponse>;

    /**
     * 
     * @summary Create invoice for transaction ID
     * @param {string} transactionID 
     * @param {DealDetails} [dealDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicingApiInterface
     */
    apiInvoicingTransactionTransactionIDPostRaw(requestParameters: ApiInvoicingTransactionTransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create invoice for transaction ID
     */
    apiInvoicingTransactionTransactionIDPost(requestParameters: ApiInvoicingTransactionTransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

}

/**
 * 
 */
export class InvoicingApi extends runtime.BaseAPI implements InvoicingApiInterface {

    /**
     * Cancel invoice
     */
    async apiInvoicingCancelInvoiceIDPostRaw(requestParameters: ApiInvoicingCancelInvoiceIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.invoiceID === null || requestParameters.invoiceID === undefined) {
            throw new runtime.RequiredError('invoiceID','Required parameter requestParameters.invoiceID was null or undefined when calling apiInvoicingCancelInvoiceIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing/cancel/{invoiceID}`.replace(`{${"invoiceID"}}`, encodeURIComponent(String(requestParameters.invoiceID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Cancel invoice
     */
    async apiInvoicingCancelInvoiceIDPost(requestParameters: ApiInvoicingCancelInvoiceIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiInvoicingCancelInvoiceIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invoices details by filters
     */
    async apiInvoicingGetRaw(requestParameters: ApiInvoicingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseInvoiceSummary>> {
        const queryParameters: any = {};

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.invoiceNumber !== undefined) {
            queryParameters['InvoiceNumber'] = requestParameters.invoiceNumber;
        }

        if (requestParameters.invoiceID !== undefined) {
            queryParameters['InvoiceID'] = requestParameters.invoiceID;
        }

        if (requestParameters.billingDealID !== undefined) {
            queryParameters['BillingDealID'] = requestParameters.billingDealID;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.invoiceType !== undefined) {
            queryParameters['InvoiceType'] = requestParameters.invoiceType;
        }

        if (requestParameters.invoiceBillingType !== undefined) {
            queryParameters['InvoiceBillingType'] = requestParameters.invoiceBillingType;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.amountFrom !== undefined) {
            queryParameters['AmountFrom'] = requestParameters.amountFrom;
        }

        if (requestParameters.amountTo !== undefined) {
            queryParameters['AmountTo'] = requestParameters.amountTo;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['PaymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.documentOrigin !== undefined) {
            queryParameters['DocumentOrigin'] = requestParameters.documentOrigin;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get invoices details by filters
     */
    async apiInvoicingGet(requestParameters: ApiInvoicingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseInvoiceSummary> {
        const response = await this.apiInvoicingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get copy invoice download URL
     */
    async apiInvoicingInvoiceIDDownloadCopyGetRaw(requestParameters: ApiInvoicingInvoiceIDDownloadCopyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadInvoiceResponse>> {
        if (requestParameters.invoiceID === null || requestParameters.invoiceID === undefined) {
            throw new runtime.RequiredError('invoiceID','Required parameter requestParameters.invoiceID was null or undefined when calling apiInvoicingInvoiceIDDownloadCopyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing/{invoiceID}/downloadCopy`.replace(`{${"invoiceID"}}`, encodeURIComponent(String(requestParameters.invoiceID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get copy invoice download URL
     */
    async apiInvoicingInvoiceIDDownloadCopyGet(requestParameters: ApiInvoicingInvoiceIDDownloadCopyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadInvoiceResponse> {
        const response = await this.apiInvoicingInvoiceIDDownloadCopyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invoice download URL
     */
    async apiInvoicingInvoiceIDDownloadGetRaw(requestParameters: ApiInvoicingInvoiceIDDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadInvoiceResponse>> {
        if (requestParameters.invoiceID === null || requestParameters.invoiceID === undefined) {
            throw new runtime.RequiredError('invoiceID','Required parameter requestParameters.invoiceID was null or undefined when calling apiInvoicingInvoiceIDDownloadGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing/{invoiceID}/download`.replace(`{${"invoiceID"}}`, encodeURIComponent(String(requestParameters.invoiceID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get invoice download URL
     */
    async apiInvoicingInvoiceIDDownloadGet(requestParameters: ApiInvoicingInvoiceIDDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadInvoiceResponse> {
        const response = await this.apiInvoicingInvoiceIDDownloadGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invoice by invoiceID
     */
    async apiInvoicingInvoiceIDGetRaw(requestParameters: ApiInvoicingInvoiceIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceResponse>> {
        if (requestParameters.invoiceID === null || requestParameters.invoiceID === undefined) {
            throw new runtime.RequiredError('invoiceID','Required parameter requestParameters.invoiceID was null or undefined when calling apiInvoicingInvoiceIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing/{invoiceID}`.replace(`{${"invoiceID"}}`, encodeURIComponent(String(requestParameters.invoiceID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get invoice by invoiceID
     */
    async apiInvoicingInvoiceIDGet(requestParameters: ApiInvoicingInvoiceIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceResponse> {
        const response = await this.apiInvoicingInvoiceIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create invoice
     */
    async apiInvoicingPostRaw(requestParameters: ApiInvoicingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoicing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.invoiceRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create invoice
     */
    async apiInvoicingPost(requestParameters: ApiInvoicingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiInvoicingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend invoices to customer
     */
    async apiInvoicingResendPostRaw(requestParameters: ApiInvoicingResendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoicing/resend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.resendInvoiceRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Resend invoices to customer
     */
    async apiInvoicingResendPost(requestParameters: ApiInvoicingResendPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiInvoicingResendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend one invoice
     */
    async apiInvoicingResendSinglePostRaw(requestParameters: ApiInvoicingResendSinglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoicing/resend-single`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.resendSingleInvoiceRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Resend one invoice
     */
    async apiInvoicingResendSinglePost(requestParameters: ApiInvoicingResendSinglePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiInvoicingResendSinglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get invoices details by filters
     */
    async apiInvoicingTotalsSegmentGetRaw(requestParameters: ApiInvoicingTotalsSegmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesTotalsResponse>> {
        if (requestParameters.segment === null || requestParameters.segment === undefined) {
            throw new runtime.RequiredError('segment','Required parameter requestParameters.segment was null or undefined when calling apiInvoicingTotalsSegmentGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.invoiceNumber !== undefined) {
            queryParameters['InvoiceNumber'] = requestParameters.invoiceNumber;
        }

        if (requestParameters.invoiceID !== undefined) {
            queryParameters['InvoiceID'] = requestParameters.invoiceID;
        }

        if (requestParameters.billingDealID !== undefined) {
            queryParameters['BillingDealID'] = requestParameters.billingDealID;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.invoiceType !== undefined) {
            queryParameters['InvoiceType'] = requestParameters.invoiceType;
        }

        if (requestParameters.invoiceBillingType !== undefined) {
            queryParameters['InvoiceBillingType'] = requestParameters.invoiceBillingType;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.amountFrom !== undefined) {
            queryParameters['AmountFrom'] = requestParameters.amountFrom;
        }

        if (requestParameters.amountTo !== undefined) {
            queryParameters['AmountTo'] = requestParameters.amountTo;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['PaymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.documentOrigin !== undefined) {
            queryParameters['DocumentOrigin'] = requestParameters.documentOrigin;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoicing/totals/{segment}`.replace(`{${"segment"}}`, encodeURIComponent(String(requestParameters.segment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get invoices details by filters
     */
    async apiInvoicingTotalsSegmentGet(requestParameters: ApiInvoicingTotalsSegmentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesTotalsResponse> {
        const response = await this.apiInvoicingTotalsSegmentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create invoice for transaction ID
     */
    async apiInvoicingTransactionTransactionIDPostRaw(requestParameters: ApiInvoicingTransactionTransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.transactionID === null || requestParameters.transactionID === undefined) {
            throw new runtime.RequiredError('transactionID','Required parameter requestParameters.transactionID was null or undefined when calling apiInvoicingTransactionTransactionIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoicing/transaction/{transactionID}`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters.transactionID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dealDetails,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create invoice for transaction ID
     */
    async apiInvoicingTransactionTransactionIDPost(requestParameters: ApiInvoicingTransactionTransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiInvoicingTransactionTransactionIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
