/* tslint:disable */
/* eslint-disable */
/**
 * EasyCard Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockCreditCardRequest,
  CardPresenceEnum,
  ChargebackRequest,
  CheckCreditCardRequest,
  CreateTransactionRequest,
  CurrencyEnum,
  DocumentOriginEnum,
  JDealTypeEnum,
  OperationResponse,
  PaymentTypeEnum,
  PropertyPresenceEnum,
  QuickDateFilterTypeEnum,
  QuickStatusFilterTypeEnum,
  RefundRequest,
  ShowDeletedEnum,
  SolekEnum,
  SpecialTransactionTypeEnum,
  SummariesAmountResponseTransactionSummary,
  TransactionFinalizationStatusEnum,
  TransactionResponse,
  TransactionStatusEnum,
  TransactionTypeEnum,
} from '../models/index';

export interface ApiTransactionsBlockingPostRequest {
    blockCreditCardRequest?: BlockCreditCardRequest;
}

export interface ApiTransactionsChargebackPostRequest {
    chargebackRequest?: ChargebackRequest;
}

export interface ApiTransactionsCheckingPostRequest {
    checkCreditCardRequest?: CheckCreditCardRequest;
}

export interface ApiTransactionsCreateBankTransferPostRequest {
    createTransactionRequest?: CreateTransactionRequest;
}

export interface ApiTransactionsCreatePostRequest {
    createTransactionRequest?: CreateTransactionRequest;
}

export interface ApiTransactionsGetRequest {
    terminalID?: string;
    merchantID?: string;
    paymentTransactionID?: string;
    paymentTransactionRequestID?: string;
    paymentTransactionIntentID?: string;
    amountFrom?: number;
    amountTo?: number;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    transmissionQuickDateFilter?: QuickDateFilterTypeEnum;
    quickStatusFilter?: QuickStatusFilterTypeEnum;
    status?: TransactionStatusEnum;
    transactionType?: TransactionTypeEnum;
    jDealType?: JDealTypeEnum;
    cardPresence?: CardPresenceEnum;
    shvaShovarNumber?: string;
    shvaTransactionID?: string;
    clearingHouseTransactionID?: number;
    dateFrom?: string;
    dateTo?: string;
    consumerID?: string;
    creditCardTokenID?: string;
    cardNumber?: string;
    cardOwnerNationalID?: string;
    cardOwnerName?: string;
    consumerEmail?: string;
    dealReference?: string;
    dealDescription?: string;
    solek?: SolekEnum;
    creditCardVendor?: string;
    creditCardBrand?: string;
    billingDealID?: string;
    specialTransactionType?: SpecialTransactionTypeEnum;
    notTransmitted?: boolean;
    terminalTemplateID?: number;
    finalizationStatus?: TransactionFinalizationStatusEnum;
    documentOrigin?: DocumentOriginEnum;
    hasInvoice?: PropertyPresenceEnum;
    isPaymentRequest?: boolean;
    paymentType?: PaymentTypeEnum;
    shvaDealIDLastDigits?: string;
    paymentTransactionIDShort?: string;
    hasMasavFile?: boolean;
    consumerExternalReference?: string;
    initialTransactionID?: string;
    transmissionID?: string;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiTransactionsRefundPostRequest {
    refundRequest?: RefundRequest;
}

export interface ApiTransactionsSelectJ5TransactionIDPostRequest {
    transactionID: string;
}

export interface ApiTransactionsTransactionIDGetRequest {
    transactionID: string;
}

export interface ApiTransactionsTransmissionTransmissionIDGetRequest {
    transmissionID: string;
    terminalID?: string;
    merchantID?: string;
    paymentTransactionID?: string;
    paymentTransactionRequestID?: string;
    paymentTransactionIntentID?: string;
    amountFrom?: number;
    amountTo?: number;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    transmissionQuickDateFilter?: QuickDateFilterTypeEnum;
    quickStatusFilter?: QuickStatusFilterTypeEnum;
    status?: TransactionStatusEnum;
    transactionType?: TransactionTypeEnum;
    jDealType?: JDealTypeEnum;
    cardPresence?: CardPresenceEnum;
    shvaShovarNumber?: string;
    shvaTransactionID?: string;
    clearingHouseTransactionID?: number;
    dateFrom?: string;
    dateTo?: string;
    consumerID?: string;
    creditCardTokenID?: string;
    cardNumber?: string;
    cardOwnerNationalID?: string;
    cardOwnerName?: string;
    consumerEmail?: string;
    dealReference?: string;
    dealDescription?: string;
    solek?: SolekEnum;
    creditCardVendor?: string;
    creditCardBrand?: string;
    billingDealID?: string;
    specialTransactionType?: SpecialTransactionTypeEnum;
    notTransmitted?: boolean;
    terminalTemplateID?: number;
    finalizationStatus?: TransactionFinalizationStatusEnum;
    documentOrigin?: DocumentOriginEnum;
    hasInvoice?: PropertyPresenceEnum;
    isPaymentRequest?: boolean;
    paymentType?: PaymentTypeEnum;
    shvaDealIDLastDigits?: string;
    paymentTransactionIDShort?: string;
    hasMasavFile?: boolean;
    consumerExternalReference?: string;
    initialTransactionID?: string;
    transmissionID2?: string;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

/**
 * TransactionsApiApi - interface
 * 
 * @export
 * @interface TransactionsApiApiInterface
 */
export interface TransactionsApiApiInterface {
    /**
     * 
     * @summary Blocking funds on credit card (J5 deal)
     * @param {BlockCreditCardRequest} [blockCreditCardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsBlockingPostRaw(requestParameters: ApiTransactionsBlockingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Blocking funds on credit card (J5 deal)
     */
    apiTransactionsBlockingPost(requestParameters: ApiTransactionsBlockingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Refund or chargeback of and existing transaction
     * @param {ChargebackRequest} [chargebackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsChargebackPostRaw(requestParameters: ApiTransactionsChargebackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Refund or chargeback of and existing transaction
     */
    apiTransactionsChargebackPost(requestParameters: ApiTransactionsChargebackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Check if credit card is valid
     * @param {CheckCreditCardRequest} [checkCreditCardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsCheckingPostRaw(requestParameters: ApiTransactionsCheckingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Check if credit card is valid
     */
    apiTransactionsCheckingPost(requestParameters: ApiTransactionsCheckingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Create the charge based on credit card or previously stored credit card token (J4 deal)
     * @param {CreateTransactionRequest} [createTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsCreateBankTransferPostRaw(requestParameters: ApiTransactionsCreateBankTransferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    apiTransactionsCreateBankTransferPost(requestParameters: ApiTransactionsCreateBankTransferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Create the charge based on credit card or previously stored credit card token (J4 deal)
     * @param {CreateTransactionRequest} [createTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsCreatePostRaw(requestParameters: ApiTransactionsCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    apiTransactionsCreatePost(requestParameters: ApiTransactionsCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get payment transactions list using filter
     * @param {string} [terminalID] 
     * @param {string} [merchantID] 
     * @param {string} [paymentTransactionID] 
     * @param {string} [paymentTransactionRequestID] 
     * @param {string} [paymentTransactionIntentID] 
     * @param {number} [amountFrom] 
     * @param {number} [amountTo] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {QuickDateFilterTypeEnum} [transmissionQuickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {QuickStatusFilterTypeEnum} [quickStatusFilter]     Pending    Completed    Failed    Canceled    AwaitingForTransmission    Chargeback    TransmissionFailed    InProgress
     * @param {TransactionStatusEnum} [status]     initial    confirmedByAggregator    confirmedByPinpadPreProcessor    confirmedByProcessor    awaitingForTransmission    transmissionInProgress    transmissionCancelingInProgress    completed    awaitingToSelectJ5    chargeback    pending    chargebackFailed    transmissionToProcessorFailed    failedToCommitByAggregator    failedToConfirmByProcesor    failedToConfirmByAggregator    cancelledByMerchant    rejectedByProcessor    rejectedByAggregator    rejectedBy3Dsecure
     * @param {TransactionTypeEnum} [transactionType]     regularDeal (Simple deal type)    installments (Deal to pay by parts)    credit (Credit deal)    immediate (Credit deal)
     * @param {JDealTypeEnum} [jDealType]     J4 (Regular deal)    J2 (Check)    J5 (Block card)
     * @param {CardPresenceEnum} [cardPresence]     cardNotPresent    regular    Internet
     * @param {string} [shvaShovarNumber] 
     * @param {string} [shvaTransactionID] 
     * @param {number} [clearingHouseTransactionID] 
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {string} [consumerID] 
     * @param {string} [creditCardTokenID] 
     * @param {string} [cardNumber] 
     * @param {string} [cardOwnerNationalID] 
     * @param {string} [cardOwnerName] 
     * @param {string} [consumerEmail] End-customer Email
     * @param {string} [dealReference] Merchant deal reference
     * @param {string} [dealDescription] 
     * @param {SolekEnum} [solek]     UNKNOWN    ISRACARD    VISA    DINERS_CLUB    AMEX    JCB    LEUMI_CARD    OTHER    MASTERCARD
     * @param {string} [creditCardVendor] 
     * @param {string} [creditCardBrand] 
     * @param {string} [billingDealID] 
     * @param {SpecialTransactionTypeEnum} [specialTransactionType]     regularDeal    initialDeal    refund
     * @param {boolean} [notTransmitted] 
     * @param {number} [terminalTemplateID] 
     * @param {TransactionFinalizationStatusEnum} [finalizationStatus]     initial    failedToCancelByAggregator    canceledByAggregator
     * @param {DocumentOriginEnum} [documentOrigin]     UI (Document created manually by merchant user using Merchant\&#39;s UI)    API (Document created via API)    checkout (Document created by consumer using Checkout Page)    billing (Document generated based on billing schedule)    device (Transaction created using pinpad device (or other device))    paymentRequest (Document created by consumer using Checkout Page with a payment link)    bit (Document created by consumer using Bit)    googlePay (Transaction created using Google Pay)    applePay (Transaction created using Apple Pay)    legacy (Transaction created using Legacy)    blender (Document created by consumer using Bit)
     * @param {PropertyPresenceEnum} [hasInvoice]     All    Yes    No
     * @param {boolean} [isPaymentRequest] 
     * @param {PaymentTypeEnum} [paymentType]     card    cheque    cash    bank    blender
     * @param {string} [shvaDealIDLastDigits] 
     * @param {string} [paymentTransactionIDShort] 
     * @param {boolean} [hasMasavFile] 
     * @param {string} [consumerExternalReference] 
     * @param {string} [initialTransactionID] Reference to initial transaction
     * @param {string} [transmissionID] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsGetRaw(requestParameters: ApiTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseTransactionSummary>>;

    /**
     * Get payment transactions list using filter
     */
    apiTransactionsGet(requestParameters: ApiTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseTransactionSummary>;

    /**
     * 
     * @summary Refund request
     * @param {RefundRequest} [refundRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsRefundPostRaw(requestParameters: ApiTransactionsRefundPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Refund request
     */
    apiTransactionsRefundPost(requestParameters: ApiTransactionsRefundPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Implement J5 deal
     * @param {string} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsSelectJ5TransactionIDPostRaw(requestParameters: ApiTransactionsSelectJ5TransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Implement J5 deal
     */
    apiTransactionsSelectJ5TransactionIDPost(requestParameters: ApiTransactionsSelectJ5TransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get payment transaction details
     * @param {string} transactionID Payment transaction UUId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsTransactionIDGetRaw(requestParameters: ApiTransactionsTransactionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>>;

    /**
     * Get payment transaction details
     */
    apiTransactionsTransactionIDGet(requestParameters: ApiTransactionsTransactionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse>;

    /**
     * 
     * @summary Get payment transactions list using filter
     * @param {string} transmissionID 
     * @param {string} [terminalID] 
     * @param {string} [merchantID] 
     * @param {string} [paymentTransactionID] 
     * @param {string} [paymentTransactionRequestID] 
     * @param {string} [paymentTransactionIntentID] 
     * @param {number} [amountFrom] 
     * @param {number} [amountTo] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {QuickDateFilterTypeEnum} [transmissionQuickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {QuickStatusFilterTypeEnum} [quickStatusFilter]     Pending    Completed    Failed    Canceled    AwaitingForTransmission    Chargeback    TransmissionFailed    InProgress
     * @param {TransactionStatusEnum} [status]     initial    confirmedByAggregator    confirmedByPinpadPreProcessor    confirmedByProcessor    awaitingForTransmission    transmissionInProgress    transmissionCancelingInProgress    completed    awaitingToSelectJ5    chargeback    pending    chargebackFailed    transmissionToProcessorFailed    failedToCommitByAggregator    failedToConfirmByProcesor    failedToConfirmByAggregator    cancelledByMerchant    rejectedByProcessor    rejectedByAggregator    rejectedBy3Dsecure
     * @param {TransactionTypeEnum} [transactionType]     regularDeal (Simple deal type)    installments (Deal to pay by parts)    credit (Credit deal)    immediate (Credit deal)
     * @param {JDealTypeEnum} [jDealType]     J4 (Regular deal)    J2 (Check)    J5 (Block card)
     * @param {CardPresenceEnum} [cardPresence]     cardNotPresent    regular    Internet
     * @param {string} [shvaShovarNumber] 
     * @param {string} [shvaTransactionID] 
     * @param {number} [clearingHouseTransactionID] 
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {string} [consumerID] 
     * @param {string} [creditCardTokenID] 
     * @param {string} [cardNumber] 
     * @param {string} [cardOwnerNationalID] 
     * @param {string} [cardOwnerName] 
     * @param {string} [consumerEmail] End-customer Email
     * @param {string} [dealReference] Merchant deal reference
     * @param {string} [dealDescription] 
     * @param {SolekEnum} [solek]     UNKNOWN    ISRACARD    VISA    DINERS_CLUB    AMEX    JCB    LEUMI_CARD    OTHER    MASTERCARD
     * @param {string} [creditCardVendor] 
     * @param {string} [creditCardBrand] 
     * @param {string} [billingDealID] 
     * @param {SpecialTransactionTypeEnum} [specialTransactionType]     regularDeal    initialDeal    refund
     * @param {boolean} [notTransmitted] 
     * @param {number} [terminalTemplateID] 
     * @param {TransactionFinalizationStatusEnum} [finalizationStatus]     initial    failedToCancelByAggregator    canceledByAggregator
     * @param {DocumentOriginEnum} [documentOrigin]     UI (Document created manually by merchant user using Merchant\&#39;s UI)    API (Document created via API)    checkout (Document created by consumer using Checkout Page)    billing (Document generated based on billing schedule)    device (Transaction created using pinpad device (or other device))    paymentRequest (Document created by consumer using Checkout Page with a payment link)    bit (Document created by consumer using Bit)    googlePay (Transaction created using Google Pay)    applePay (Transaction created using Apple Pay)    legacy (Transaction created using Legacy)    blender (Document created by consumer using Bit)
     * @param {PropertyPresenceEnum} [hasInvoice]     All    Yes    No
     * @param {boolean} [isPaymentRequest] 
     * @param {PaymentTypeEnum} [paymentType]     card    cheque    cash    bank    blender
     * @param {string} [shvaDealIDLastDigits] 
     * @param {string} [paymentTransactionIDShort] 
     * @param {boolean} [hasMasavFile] 
     * @param {string} [consumerExternalReference] 
     * @param {string} [initialTransactionID] Reference to initial transaction
     * @param {string} [transmissionID2] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiApiInterface
     */
    apiTransactionsTransmissionTransmissionIDGetRaw(requestParameters: ApiTransactionsTransmissionTransmissionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseTransactionSummary>>;

    /**
     * Get payment transactions list using filter
     */
    apiTransactionsTransmissionTransmissionIDGet(requestParameters: ApiTransactionsTransmissionTransmissionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseTransactionSummary>;

}

/**
 * 
 */
export class TransactionsApiApi extends runtime.BaseAPI implements TransactionsApiApiInterface {

    /**
     * Blocking funds on credit card (J5 deal)
     */
    async apiTransactionsBlockingPostRaw(requestParameters: ApiTransactionsBlockingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/blocking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.blockCreditCardRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Blocking funds on credit card (J5 deal)
     */
    async apiTransactionsBlockingPost(requestParameters: ApiTransactionsBlockingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsBlockingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund or chargeback of and existing transaction
     */
    async apiTransactionsChargebackPostRaw(requestParameters: ApiTransactionsChargebackPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/chargeback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.chargebackRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Refund or chargeback of and existing transaction
     */
    async apiTransactionsChargebackPost(requestParameters: ApiTransactionsChargebackPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsChargebackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if credit card is valid
     */
    async apiTransactionsCheckingPostRaw(requestParameters: ApiTransactionsCheckingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/checking`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.checkCreditCardRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Check if credit card is valid
     */
    async apiTransactionsCheckingPost(requestParameters: ApiTransactionsCheckingPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsCheckingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    async apiTransactionsCreateBankTransferPostRaw(requestParameters: ApiTransactionsCreateBankTransferPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/createBankTransfer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createTransactionRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    async apiTransactionsCreateBankTransferPost(requestParameters: ApiTransactionsCreateBankTransferPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsCreateBankTransferPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    async apiTransactionsCreatePostRaw(requestParameters: ApiTransactionsCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createTransactionRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create the charge based on credit card or previously stored credit card token (J4 deal)
     */
    async apiTransactionsCreatePost(requestParameters: ApiTransactionsCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment transactions list using filter
     */
    async apiTransactionsGetRaw(requestParameters: ApiTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseTransactionSummary>> {
        const queryParameters: any = {};

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.paymentTransactionID !== undefined) {
            queryParameters['PaymentTransactionID'] = requestParameters.paymentTransactionID;
        }

        if (requestParameters.paymentTransactionRequestID !== undefined) {
            queryParameters['PaymentTransactionRequestID'] = requestParameters.paymentTransactionRequestID;
        }

        if (requestParameters.paymentTransactionIntentID !== undefined) {
            queryParameters['PaymentTransactionIntentID'] = requestParameters.paymentTransactionIntentID;
        }

        if (requestParameters.amountFrom !== undefined) {
            queryParameters['AmountFrom'] = requestParameters.amountFrom;
        }

        if (requestParameters.amountTo !== undefined) {
            queryParameters['AmountTo'] = requestParameters.amountTo;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.transmissionQuickDateFilter !== undefined) {
            queryParameters['TransmissionQuickDateFilter'] = requestParameters.transmissionQuickDateFilter;
        }

        if (requestParameters.quickStatusFilter !== undefined) {
            queryParameters['QuickStatusFilter'] = requestParameters.quickStatusFilter;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.transactionType !== undefined) {
            queryParameters['TransactionType'] = requestParameters.transactionType;
        }

        if (requestParameters.jDealType !== undefined) {
            queryParameters['JDealType'] = requestParameters.jDealType;
        }

        if (requestParameters.cardPresence !== undefined) {
            queryParameters['CardPresence'] = requestParameters.cardPresence;
        }

        if (requestParameters.shvaShovarNumber !== undefined) {
            queryParameters['ShvaShovarNumber'] = requestParameters.shvaShovarNumber;
        }

        if (requestParameters.shvaTransactionID !== undefined) {
            queryParameters['ShvaTransactionID'] = requestParameters.shvaTransactionID;
        }

        if (requestParameters.clearingHouseTransactionID !== undefined) {
            queryParameters['ClearingHouseTransactionID'] = requestParameters.clearingHouseTransactionID;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.creditCardTokenID !== undefined) {
            queryParameters['CreditCardTokenID'] = requestParameters.creditCardTokenID;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['CardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardOwnerNationalID !== undefined) {
            queryParameters['CardOwnerNationalID'] = requestParameters.cardOwnerNationalID;
        }

        if (requestParameters.cardOwnerName !== undefined) {
            queryParameters['CardOwnerName'] = requestParameters.cardOwnerName;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.dealReference !== undefined) {
            queryParameters['DealReference'] = requestParameters.dealReference;
        }

        if (requestParameters.dealDescription !== undefined) {
            queryParameters['DealDescription'] = requestParameters.dealDescription;
        }

        if (requestParameters.solek !== undefined) {
            queryParameters['Solek'] = requestParameters.solek;
        }

        if (requestParameters.creditCardVendor !== undefined) {
            queryParameters['CreditCardVendor'] = requestParameters.creditCardVendor;
        }

        if (requestParameters.creditCardBrand !== undefined) {
            queryParameters['CreditCardBrand'] = requestParameters.creditCardBrand;
        }

        if (requestParameters.billingDealID !== undefined) {
            queryParameters['BillingDealID'] = requestParameters.billingDealID;
        }

        if (requestParameters.specialTransactionType !== undefined) {
            queryParameters['SpecialTransactionType'] = requestParameters.specialTransactionType;
        }

        if (requestParameters.notTransmitted !== undefined) {
            queryParameters['NotTransmitted'] = requestParameters.notTransmitted;
        }

        if (requestParameters.terminalTemplateID !== undefined) {
            queryParameters['TerminalTemplateID'] = requestParameters.terminalTemplateID;
        }

        if (requestParameters.finalizationStatus !== undefined) {
            queryParameters['FinalizationStatus'] = requestParameters.finalizationStatus;
        }

        if (requestParameters.documentOrigin !== undefined) {
            queryParameters['DocumentOrigin'] = requestParameters.documentOrigin;
        }

        if (requestParameters.hasInvoice !== undefined) {
            queryParameters['HasInvoice'] = requestParameters.hasInvoice;
        }

        if (requestParameters.isPaymentRequest !== undefined) {
            queryParameters['IsPaymentRequest'] = requestParameters.isPaymentRequest;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['PaymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.shvaDealIDLastDigits !== undefined) {
            queryParameters['ShvaDealIDLastDigits'] = requestParameters.shvaDealIDLastDigits;
        }

        if (requestParameters.paymentTransactionIDShort !== undefined) {
            queryParameters['PaymentTransactionIDShort'] = requestParameters.paymentTransactionIDShort;
        }

        if (requestParameters.hasMasavFile !== undefined) {
            queryParameters['HasMasavFile'] = requestParameters.hasMasavFile;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.initialTransactionID !== undefined) {
            queryParameters['InitialTransactionID'] = requestParameters.initialTransactionID;
        }

        if (requestParameters.transmissionID !== undefined) {
            queryParameters['TransmissionID'] = requestParameters.transmissionID;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment transactions list using filter
     */
    async apiTransactionsGet(requestParameters: ApiTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseTransactionSummary> {
        const response = await this.apiTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refund request
     */
    async apiTransactionsRefundPostRaw(requestParameters: ApiTransactionsRefundPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/transactions/refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.refundRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Refund request
     */
    async apiTransactionsRefundPost(requestParameters: ApiTransactionsRefundPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsRefundPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Implement J5 deal
     */
    async apiTransactionsSelectJ5TransactionIDPostRaw(requestParameters: ApiTransactionsSelectJ5TransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.transactionID === null || requestParameters.transactionID === undefined) {
            throw new runtime.RequiredError('transactionID','Required parameter requestParameters.transactionID was null or undefined when calling apiTransactionsSelectJ5TransactionIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/transactions/selectJ5/{transactionID}`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters.transactionID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Implement J5 deal
     */
    async apiTransactionsSelectJ5TransactionIDPost(requestParameters: ApiTransactionsSelectJ5TransactionIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiTransactionsSelectJ5TransactionIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment transaction details
     */
    async apiTransactionsTransactionIDGetRaw(requestParameters: ApiTransactionsTransactionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.transactionID === null || requestParameters.transactionID === undefined) {
            throw new runtime.RequiredError('transactionID','Required parameter requestParameters.transactionID was null or undefined when calling apiTransactionsTransactionIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/transactions/{transactionID}`.replace(`{${"transactionID"}}`, encodeURIComponent(String(requestParameters.transactionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment transaction details
     */
    async apiTransactionsTransactionIDGet(requestParameters: ApiTransactionsTransactionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.apiTransactionsTransactionIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment transactions list using filter
     */
    async apiTransactionsTransmissionTransmissionIDGetRaw(requestParameters: ApiTransactionsTransmissionTransmissionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponseTransactionSummary>> {
        if (requestParameters.transmissionID === null || requestParameters.transmissionID === undefined) {
            throw new runtime.RequiredError('transmissionID','Required parameter requestParameters.transmissionID was null or undefined when calling apiTransactionsTransmissionTransmissionIDGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.merchantID !== undefined) {
            queryParameters['MerchantID'] = requestParameters.merchantID;
        }

        if (requestParameters.paymentTransactionID !== undefined) {
            queryParameters['PaymentTransactionID'] = requestParameters.paymentTransactionID;
        }

        if (requestParameters.paymentTransactionRequestID !== undefined) {
            queryParameters['PaymentTransactionRequestID'] = requestParameters.paymentTransactionRequestID;
        }

        if (requestParameters.paymentTransactionIntentID !== undefined) {
            queryParameters['PaymentTransactionIntentID'] = requestParameters.paymentTransactionIntentID;
        }

        if (requestParameters.amountFrom !== undefined) {
            queryParameters['AmountFrom'] = requestParameters.amountFrom;
        }

        if (requestParameters.amountTo !== undefined) {
            queryParameters['AmountTo'] = requestParameters.amountTo;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.transmissionQuickDateFilter !== undefined) {
            queryParameters['TransmissionQuickDateFilter'] = requestParameters.transmissionQuickDateFilter;
        }

        if (requestParameters.quickStatusFilter !== undefined) {
            queryParameters['QuickStatusFilter'] = requestParameters.quickStatusFilter;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.transactionType !== undefined) {
            queryParameters['TransactionType'] = requestParameters.transactionType;
        }

        if (requestParameters.jDealType !== undefined) {
            queryParameters['JDealType'] = requestParameters.jDealType;
        }

        if (requestParameters.cardPresence !== undefined) {
            queryParameters['CardPresence'] = requestParameters.cardPresence;
        }

        if (requestParameters.shvaShovarNumber !== undefined) {
            queryParameters['ShvaShovarNumber'] = requestParameters.shvaShovarNumber;
        }

        if (requestParameters.shvaTransactionID !== undefined) {
            queryParameters['ShvaTransactionID'] = requestParameters.shvaTransactionID;
        }

        if (requestParameters.clearingHouseTransactionID !== undefined) {
            queryParameters['ClearingHouseTransactionID'] = requestParameters.clearingHouseTransactionID;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.creditCardTokenID !== undefined) {
            queryParameters['CreditCardTokenID'] = requestParameters.creditCardTokenID;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['CardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardOwnerNationalID !== undefined) {
            queryParameters['CardOwnerNationalID'] = requestParameters.cardOwnerNationalID;
        }

        if (requestParameters.cardOwnerName !== undefined) {
            queryParameters['CardOwnerName'] = requestParameters.cardOwnerName;
        }

        if (requestParameters.consumerEmail !== undefined) {
            queryParameters['ConsumerEmail'] = requestParameters.consumerEmail;
        }

        if (requestParameters.dealReference !== undefined) {
            queryParameters['DealReference'] = requestParameters.dealReference;
        }

        if (requestParameters.dealDescription !== undefined) {
            queryParameters['DealDescription'] = requestParameters.dealDescription;
        }

        if (requestParameters.solek !== undefined) {
            queryParameters['Solek'] = requestParameters.solek;
        }

        if (requestParameters.creditCardVendor !== undefined) {
            queryParameters['CreditCardVendor'] = requestParameters.creditCardVendor;
        }

        if (requestParameters.creditCardBrand !== undefined) {
            queryParameters['CreditCardBrand'] = requestParameters.creditCardBrand;
        }

        if (requestParameters.billingDealID !== undefined) {
            queryParameters['BillingDealID'] = requestParameters.billingDealID;
        }

        if (requestParameters.specialTransactionType !== undefined) {
            queryParameters['SpecialTransactionType'] = requestParameters.specialTransactionType;
        }

        if (requestParameters.notTransmitted !== undefined) {
            queryParameters['NotTransmitted'] = requestParameters.notTransmitted;
        }

        if (requestParameters.terminalTemplateID !== undefined) {
            queryParameters['TerminalTemplateID'] = requestParameters.terminalTemplateID;
        }

        if (requestParameters.finalizationStatus !== undefined) {
            queryParameters['FinalizationStatus'] = requestParameters.finalizationStatus;
        }

        if (requestParameters.documentOrigin !== undefined) {
            queryParameters['DocumentOrigin'] = requestParameters.documentOrigin;
        }

        if (requestParameters.hasInvoice !== undefined) {
            queryParameters['HasInvoice'] = requestParameters.hasInvoice;
        }

        if (requestParameters.isPaymentRequest !== undefined) {
            queryParameters['IsPaymentRequest'] = requestParameters.isPaymentRequest;
        }

        if (requestParameters.paymentType !== undefined) {
            queryParameters['PaymentType'] = requestParameters.paymentType;
        }

        if (requestParameters.shvaDealIDLastDigits !== undefined) {
            queryParameters['ShvaDealIDLastDigits'] = requestParameters.shvaDealIDLastDigits;
        }

        if (requestParameters.paymentTransactionIDShort !== undefined) {
            queryParameters['PaymentTransactionIDShort'] = requestParameters.paymentTransactionIDShort;
        }

        if (requestParameters.hasMasavFile !== undefined) {
            queryParameters['HasMasavFile'] = requestParameters.hasMasavFile;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.initialTransactionID !== undefined) {
            queryParameters['InitialTransactionID'] = requestParameters.initialTransactionID;
        }

        if (requestParameters.transmissionID2 !== undefined) {
            queryParameters['TransmissionID'] = requestParameters.transmissionID2;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/transactions/transmission/{transmissionID}`.replace(`{${"transmissionID"}}`, encodeURIComponent(String(requestParameters.transmissionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment transactions list using filter
     */
    async apiTransactionsTransmissionTransmissionIDGet(requestParameters: ApiTransactionsTransmissionTransmissionIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponseTransactionSummary> {
        const response = await this.apiTransactionsTransmissionTransmissionIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
