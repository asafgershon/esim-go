/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BundleGroupList } from '../models';
// @ts-ignore
import type { Message } from '../models';
// @ts-ignore
import type { OrganisationResponse } from '../models';
// @ts-ignore
import type { TopupResponse } from '../models';
/**
 * OrganisationApi - axios parameter creator
 * @export
 */
export const OrganisationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update the pre-payed balance held by your organisation. Initial payment is done using the Portal: https://portal.esim-go.com/. This will store your card details for future use. Follow up payments can be done using the API.   Note: The minimum top-up amount is $1000 and the maximum daily top-up is set at $5000. If you wish to raise or lower this amount, please contact your account manager. 
         * @summary Topup Organisation Balance
         * @param {string} [accept] 
         * @param {string} [amount] (Required) The amount of to be charged to the saved card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationBalancePost: async (accept?: string, amount?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organisation/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve comprehensive information about your organisation, including details of all associated users.
         * @summary Get Current Organisation Details
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organisation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of the groups of Bundles available for your Organisation to order. Bundles in eSIM Go are categorised into groups.    Name of the bundle group depends on your account tier. In the example below you will find the groups description for **standard** organisation tier.   Standard Fixed  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard Fixed Turkey 1GB 7 Days bundle is esim_1GB_7D_TR_V2   Standard Long Duration  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard 50GB 90 Days Long Duration Bundle is esim_50GB_90D_RGBS_V2   Standard Unlimited Lite  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 512kbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_UL_1D_TR_V2   Standard Unlimited Essential  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 1.25mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_ULE_1D_TR_V2   Standard Unlimited Plus  * These bundles will provide 2GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 2mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Plus Turkey 1 day bundle is esim_ULP_1D_TR_V2 
         * @summary Get Bundle Groups
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationGroupsGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organisation/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganisationApi - functional programming interface
 * @export
 */
export const OrganisationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganisationApiAxiosParamCreator(configuration)
    return {
        /**
         * Update the pre-payed balance held by your organisation. Initial payment is done using the Portal: https://portal.esim-go.com/. This will store your card details for future use. Follow up payments can be done using the API.   Note: The minimum top-up amount is $1000 and the maximum daily top-up is set at $5000. If you wish to raise or lower this amount, please contact your account manager. 
         * @summary Topup Organisation Balance
         * @param {string} [accept] 
         * @param {string} [amount] (Required) The amount of to be charged to the saved card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organisationBalancePost(accept?: string, amount?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organisationBalancePost(accept, amount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganisationApi.organisationBalancePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve comprehensive information about your organisation, including details of all associated users.
         * @summary Get Current Organisation Details
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organisationGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganisationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organisationGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganisationApi.organisationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns a list of the groups of Bundles available for your Organisation to order. Bundles in eSIM Go are categorised into groups.    Name of the bundle group depends on your account tier. In the example below you will find the groups description for **standard** organisation tier.   Standard Fixed  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard Fixed Turkey 1GB 7 Days bundle is esim_1GB_7D_TR_V2   Standard Long Duration  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard 50GB 90 Days Long Duration Bundle is esim_50GB_90D_RGBS_V2   Standard Unlimited Lite  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 512kbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_UL_1D_TR_V2   Standard Unlimited Essential  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 1.25mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_ULE_1D_TR_V2   Standard Unlimited Plus  * These bundles will provide 2GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 2mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Plus Turkey 1 day bundle is esim_ULP_1D_TR_V2 
         * @summary Get Bundle Groups
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organisationGroupsGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundleGroupList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organisationGroupsGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganisationApi.organisationGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganisationApi - factory interface
 * @export
 */
export const OrganisationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganisationApiFp(configuration)
    return {
        /**
         * Update the pre-payed balance held by your organisation. Initial payment is done using the Portal: https://portal.esim-go.com/. This will store your card details for future use. Follow up payments can be done using the API.   Note: The minimum top-up amount is $1000 and the maximum daily top-up is set at $5000. If you wish to raise or lower this amount, please contact your account manager. 
         * @summary Topup Organisation Balance
         * @param {OrganisationApiOrganisationBalancePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationBalancePost(requestParameters: OrganisationApiOrganisationBalancePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TopupResponse> {
            return localVarFp.organisationBalancePost(requestParameters.accept, requestParameters.amount, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve comprehensive information about your organisation, including details of all associated users.
         * @summary Get Current Organisation Details
         * @param {OrganisationApiOrganisationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationGet(requestParameters: OrganisationApiOrganisationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrganisationResponse> {
            return localVarFp.organisationGet(requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of the groups of Bundles available for your Organisation to order. Bundles in eSIM Go are categorised into groups.    Name of the bundle group depends on your account tier. In the example below you will find the groups description for **standard** organisation tier.   Standard Fixed  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard Fixed Turkey 1GB 7 Days bundle is esim_1GB_7D_TR_V2   Standard Long Duration  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard 50GB 90 Days Long Duration Bundle is esim_50GB_90D_RGBS_V2   Standard Unlimited Lite  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 512kbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_UL_1D_TR_V2   Standard Unlimited Essential  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 1.25mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_ULE_1D_TR_V2   Standard Unlimited Plus  * These bundles will provide 2GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 2mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Plus Turkey 1 day bundle is esim_ULP_1D_TR_V2 
         * @summary Get Bundle Groups
         * @param {OrganisationApiOrganisationGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationGroupsGet(requestParameters: OrganisationApiOrganisationGroupsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BundleGroupList> {
            return localVarFp.organisationGroupsGet(requestParameters.accept, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganisationApi - interface
 * @export
 * @interface OrganisationApi
 */
export interface OrganisationApiInterface {
    /**
     * Update the pre-payed balance held by your organisation. Initial payment is done using the Portal: https://portal.esim-go.com/. This will store your card details for future use. Follow up payments can be done using the API.   Note: The minimum top-up amount is $1000 and the maximum daily top-up is set at $5000. If you wish to raise or lower this amount, please contact your account manager. 
     * @summary Topup Organisation Balance
     * @param {OrganisationApiOrganisationBalancePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApiInterface
     */
    organisationBalancePost(requestParameters?: OrganisationApiOrganisationBalancePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TopupResponse>;

    /**
     * This endpoint allows you to retrieve comprehensive information about your organisation, including details of all associated users.
     * @summary Get Current Organisation Details
     * @param {OrganisationApiOrganisationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApiInterface
     */
    organisationGet(requestParameters?: OrganisationApiOrganisationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganisationResponse>;

    /**
     * This endpoint returns a list of the groups of Bundles available for your Organisation to order. Bundles in eSIM Go are categorised into groups.    Name of the bundle group depends on your account tier. In the example below you will find the groups description for **standard** organisation tier.   Standard Fixed  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard Fixed Turkey 1GB 7 Days bundle is esim_1GB_7D_TR_V2   Standard Long Duration  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard 50GB 90 Days Long Duration Bundle is esim_50GB_90D_RGBS_V2   Standard Unlimited Lite  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 512kbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_UL_1D_TR_V2   Standard Unlimited Essential  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 1.25mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_ULE_1D_TR_V2   Standard Unlimited Plus  * These bundles will provide 2GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 2mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Plus Turkey 1 day bundle is esim_ULP_1D_TR_V2 
     * @summary Get Bundle Groups
     * @param {OrganisationApiOrganisationGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApiInterface
     */
    organisationGroupsGet(requestParameters?: OrganisationApiOrganisationGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BundleGroupList>;

}

/**
 * Request parameters for organisationBalancePost operation in OrganisationApi.
 * @export
 * @interface OrganisationApiOrganisationBalancePostRequest
 */
export interface OrganisationApiOrganisationBalancePostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganisationApiOrganisationBalancePost
     */
    readonly accept?: string

    /**
     * (Required) The amount of to be charged to the saved card
     * @type {string}
     * @memberof OrganisationApiOrganisationBalancePost
     */
    readonly amount?: string
}

/**
 * Request parameters for organisationGet operation in OrganisationApi.
 * @export
 * @interface OrganisationApiOrganisationGetRequest
 */
export interface OrganisationApiOrganisationGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganisationApiOrganisationGet
     */
    readonly accept?: string
}

/**
 * Request parameters for organisationGroupsGet operation in OrganisationApi.
 * @export
 * @interface OrganisationApiOrganisationGroupsGetRequest
 */
export interface OrganisationApiOrganisationGroupsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrganisationApiOrganisationGroupsGet
     */
    readonly accept?: string
}

/**
 * OrganisationApi - object-oriented interface
 * @export
 * @class OrganisationApi
 * @extends {BaseAPI}
 */
export class OrganisationApi extends BaseAPI implements OrganisationApiInterface {
    /**
     * Update the pre-payed balance held by your organisation. Initial payment is done using the Portal: https://portal.esim-go.com/. This will store your card details for future use. Follow up payments can be done using the API.   Note: The minimum top-up amount is $1000 and the maximum daily top-up is set at $5000. If you wish to raise or lower this amount, please contact your account manager. 
     * @summary Topup Organisation Balance
     * @param {OrganisationApiOrganisationBalancePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApi
     */
    public organisationBalancePost(requestParameters: OrganisationApiOrganisationBalancePostRequest = {}, options?: RawAxiosRequestConfig) {
        return OrganisationApiFp(this.configuration).organisationBalancePost(requestParameters.accept, requestParameters.amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve comprehensive information about your organisation, including details of all associated users.
     * @summary Get Current Organisation Details
     * @param {OrganisationApiOrganisationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApi
     */
    public organisationGet(requestParameters: OrganisationApiOrganisationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return OrganisationApiFp(this.configuration).organisationGet(requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of the groups of Bundles available for your Organisation to order. Bundles in eSIM Go are categorised into groups.    Name of the bundle group depends on your account tier. In the example below you will find the groups description for **standard** organisation tier.   Standard Fixed  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard Fixed Turkey 1GB 7 Days bundle is esim_1GB_7D_TR_V2   Standard Long Duration  * All these bundles are for a finite and fixed amount of data.  * eg. the moniker for a Standard 50GB 90 Days Long Duration Bundle is esim_50GB_90D_RGBS_V2   Standard Unlimited Lite  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 512kbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_UL_1D_TR_V2   Standard Unlimited Essential  * These bundles will provide 1GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 1.25mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Lite Turkey 1 day bundle is esim_ULE_1D_TR_V2   Standard Unlimited Plus  * These bundles will provide 2GB of unthrottled data every 24 hours, once this is depleted data will be throttled to 2mbps. This repeats each day for the duration of the bundle.  * eg. the moniker for a Standard Unlimited Plus Turkey 1 day bundle is esim_ULP_1D_TR_V2 
     * @summary Get Bundle Groups
     * @param {OrganisationApiOrganisationGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationApi
     */
    public organisationGroupsGet(requestParameters: OrganisationApiOrganisationGroupsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return OrganisationApiFp(this.configuration).organisationGroupsGet(requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }
}

