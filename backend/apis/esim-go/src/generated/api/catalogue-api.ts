/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BundleCatalogueResponse } from '../models';
// @ts-ignore
import type { CatalogueResponseInner } from '../models';
// @ts-ignore
import type { Message } from '../models';
/**
 * CatalogueApi - axios parameter creator
 * @export
 */
export const CatalogueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get details of a specific Bundle from your Organisation\'s catalogue. **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".
         * @summary Get Bundle details from catalogue
         * @param {string} name (Required) Name of Bundle to get countries for. Bundle names are case sensitive.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogueBundleNameGet: async (name: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('catalogueBundleNameGet', 'name', name)
            const localVarPath = `/catalogue/bundle/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Bundles available to your Organisation for ordering. Bundle names can be used with the `/orders` endpoint to place an order. 
         * @summary Get Bundle catalogue
         * @param {string} [accept] 
         * @param {number} [page] Page of Bundles to return
         * @param {number} [perPage] Number of Bundles to return per page
         * @param {string} [direction] Direction of ordering
         * @param {string} [orderBy] Name of column to order by
         * @param {string} [description] Wildcard search for description
         * @param {string} [group] Filter by Bundle Group (exact value) e.g. &#x60;Standard eSIM Bundles&#x60;
         * @param {string} [countries] Comma-separated list of country ISO codes to filter by. This will search for Bundles that include at least one of the countries as their base country. e.g. &#x60;GB, US&#x60;
         * @param {string} [region] This will return Bundles that have a base country in the specified region. e.g. &#x60;Europe&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogueGet: async (accept?: string, page?: number, perPage?: number, direction?: string, orderBy?: string, description?: string, group?: string, countries?: string, region?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/catalogue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogueApi - functional programming interface
 * @export
 */
export const CatalogueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogueApiAxiosParamCreator(configuration)
    return {
        /**
         * Get details of a specific Bundle from your Organisation\'s catalogue. **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".
         * @summary Get Bundle details from catalogue
         * @param {string} name (Required) Name of Bundle to get countries for. Bundle names are case sensitive.
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogueBundleNameGet(name: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundleCatalogueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogueBundleNameGet(name, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogueApi.catalogueBundleNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all Bundles available to your Organisation for ordering. Bundle names can be used with the `/orders` endpoint to place an order. 
         * @summary Get Bundle catalogue
         * @param {string} [accept] 
         * @param {number} [page] Page of Bundles to return
         * @param {number} [perPage] Number of Bundles to return per page
         * @param {string} [direction] Direction of ordering
         * @param {string} [orderBy] Name of column to order by
         * @param {string} [description] Wildcard search for description
         * @param {string} [group] Filter by Bundle Group (exact value) e.g. &#x60;Standard eSIM Bundles&#x60;
         * @param {string} [countries] Comma-separated list of country ISO codes to filter by. This will search for Bundles that include at least one of the countries as their base country. e.g. &#x60;GB, US&#x60;
         * @param {string} [region] This will return Bundles that have a base country in the specified region. e.g. &#x60;Europe&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogueGet(accept?: string, page?: number, perPage?: number, direction?: string, orderBy?: string, description?: string, group?: string, countries?: string, region?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogueResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogueGet(accept, page, perPage, direction, orderBy, description, group, countries, region, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogueApi.catalogueGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CatalogueApi - factory interface
 * @export
 */
export const CatalogueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogueApiFp(configuration)
    return {
        /**
         * Get details of a specific Bundle from your Organisation\'s catalogue. **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".
         * @summary Get Bundle details from catalogue
         * @param {CatalogueApiCatalogueBundleNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogueBundleNameGet(requestParameters: CatalogueApiCatalogueBundleNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BundleCatalogueResponse> {
            return localVarFp.catalogueBundleNameGet(requestParameters.name, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Bundles available to your Organisation for ordering. Bundle names can be used with the `/orders` endpoint to place an order. 
         * @summary Get Bundle catalogue
         * @param {CatalogueApiCatalogueGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogueGet(requestParameters: CatalogueApiCatalogueGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CatalogueResponseInner>> {
            return localVarFp.catalogueGet(requestParameters.accept, requestParameters.page, requestParameters.perPage, requestParameters.direction, requestParameters.orderBy, requestParameters.description, requestParameters.group, requestParameters.countries, requestParameters.region, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogueApi - interface
 * @export
 * @interface CatalogueApi
 */
export interface CatalogueApiInterface {
    /**
     * Get details of a specific Bundle from your Organisation\'s catalogue. **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".
     * @summary Get Bundle details from catalogue
     * @param {CatalogueApiCatalogueBundleNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogueApiInterface
     */
    catalogueBundleNameGet(requestParameters: CatalogueApiCatalogueBundleNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BundleCatalogueResponse>;

    /**
     * List all Bundles available to your Organisation for ordering. Bundle names can be used with the `/orders` endpoint to place an order. 
     * @summary Get Bundle catalogue
     * @param {CatalogueApiCatalogueGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogueApiInterface
     */
    catalogueGet(requestParameters?: CatalogueApiCatalogueGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CatalogueResponseInner>>;

}

/**
 * Request parameters for catalogueBundleNameGet operation in CatalogueApi.
 * @export
 * @interface CatalogueApiCatalogueBundleNameGetRequest
 */
export interface CatalogueApiCatalogueBundleNameGetRequest {
    /**
     * (Required) Name of Bundle to get countries for. Bundle names are case sensitive.
     * @type {string}
     * @memberof CatalogueApiCatalogueBundleNameGet
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof CatalogueApiCatalogueBundleNameGet
     */
    readonly accept?: string
}

/**
 * Request parameters for catalogueGet operation in CatalogueApi.
 * @export
 * @interface CatalogueApiCatalogueGetRequest
 */
export interface CatalogueApiCatalogueGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly accept?: string

    /**
     * Page of Bundles to return
     * @type {number}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly page?: number

    /**
     * Number of Bundles to return per page
     * @type {number}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly perPage?: number

    /**
     * Direction of ordering
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly direction?: string

    /**
     * Name of column to order by
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly orderBy?: string

    /**
     * Wildcard search for description
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly description?: string

    /**
     * Filter by Bundle Group (exact value) e.g. &#x60;Standard eSIM Bundles&#x60;
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly group?: string

    /**
     * Comma-separated list of country ISO codes to filter by. This will search for Bundles that include at least one of the countries as their base country. e.g. &#x60;GB, US&#x60;
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly countries?: string

    /**
     * This will return Bundles that have a base country in the specified region. e.g. &#x60;Europe&#x60;
     * @type {string}
     * @memberof CatalogueApiCatalogueGet
     */
    readonly region?: string
}

/**
 * CatalogueApi - object-oriented interface
 * @export
 * @class CatalogueApi
 * @extends {BaseAPI}
 */
export class CatalogueApi extends BaseAPI implements CatalogueApiInterface {
    /**
     * Get details of a specific Bundle from your Organisation\'s catalogue. **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".
     * @summary Get Bundle details from catalogue
     * @param {CatalogueApiCatalogueBundleNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogueApi
     */
    public catalogueBundleNameGet(requestParameters: CatalogueApiCatalogueBundleNameGetRequest, options?: RawAxiosRequestConfig) {
        return CatalogueApiFp(this.configuration).catalogueBundleNameGet(requestParameters.name, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Bundles available to your Organisation for ordering. Bundle names can be used with the `/orders` endpoint to place an order. 
     * @summary Get Bundle catalogue
     * @param {CatalogueApiCatalogueGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogueApi
     */
    public catalogueGet(requestParameters: CatalogueApiCatalogueGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CatalogueApiFp(this.configuration).catalogueGet(requestParameters.accept, requestParameters.page, requestParameters.perPage, requestParameters.direction, requestParameters.orderBy, requestParameters.description, requestParameters.group, requestParameters.countries, requestParameters.region, options).then((request) => request(this.axios, this.basePath));
    }
}

