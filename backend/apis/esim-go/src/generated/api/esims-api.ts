/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AssignmentResponse } from '../models';
// @ts-ignore
import type { BundlesList } from '../models';
// @ts-ignore
import type { CompatibilityResponse } from '../models';
// @ts-ignore
import type { ESIMApplyResponse } from '../models';
// @ts-ignore
import type { ESIMDetailsInstallResponse } from '../models';
// @ts-ignore
import type { ESIMDetailsResponse } from '../models';
// @ts-ignore
import type { ESIMHistory } from '../models';
// @ts-ignore
import type { ESIMs } from '../models';
// @ts-ignore
import type { EsimsApplyPostRequest } from '../models';
// @ts-ignore
import type { EsimsIccidSmsPostRequest } from '../models';
// @ts-ignore
import type { LocationResponse } from '../models';
// @ts-ignore
import type { Message } from '../models';
// @ts-ignore
import type { StatusMessage } from '../models';
// @ts-ignore
import type { UpdateSimDetails } from '../models';
/**
 * ESIMsApi - axios parameter creator
 * @export
 */
export const ESIMsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # eSIM Provisioning and Bundle Application Endpoint  This endpoint allows you to obtain a new eSIM with a pre-applied Bundle or apply a Bundle to an existing eSIM.  ## Key Features: 1. Assign Bundles to new or existing eSIMs 2. Option to request multiple eSIMs with the same Bundle 3. Ability to assign different Bundles to separate new eSIMs  ## Usage Guidelines: - Provide either \'Bundle\' or \'Bundles\' parameter - ICCID is optional for existing eSIMs - \'Repeat\' parameter for multiple new eSIMs (incompatible with ICCID) - Bundle names are case-sensitive (e.g., \"esim_1GB_7D_IM_U\")  ## Important Notes: - Requires pre-purchased Bundles in your account inventory - Bundle activation usually instant, but allow up to 10 minutes for full processing - eSIM can be installed and registered on a network during processing - The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  The endpoint always returns the ICCID in the response. 
         * @summary Apply Bundle to an eSIM
         * @param {EsimsApplyPostRequest} esimsApplyPostRequest Details of Bundle to apply to eSIM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsApplyPost: async (esimsApplyPostRequest: EsimsApplyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'esimsApplyPostRequest' is not null or undefined
            assertParamExists('esimsApplyPost', 'esimsApplyPostRequest', esimsApplyPostRequest)
            const localVarPath = `/esims/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(esimsApplyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # eSIM SMDP+ Details Retrieval Endpoint  This API endpoint retrieves eSIM SMDP+ details based on provided Order or Apply References.  ## Key features:  1. Input: One or multiple reference numbers can be submitted via query parameters. 2. Output: For each reference, the system returns:    - ICCID (Integrated Circuit Card Identifier)    - SMDP+ (Subscription Manager Data Preparation) address    - Matching ID 3. Output format options:    - Default: text/csv    - Alternative formats: application/json, application/zip    - Format selection is controlled via the \'Accept\' header in the request 4. Special functionality: When requesting \'application/zip\', the response is a ZIP file containing QR code images in PNG format. 
         * @summary Get eSIM Install Details
         * @param {string} [reference] (Required) Order Reference or Apply Reference
         * @param {string} [additionalFields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsAssignmentsGet: async (reference?: string, additionalFields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/esims/assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (reference !== undefined) {
                localVarQueryParameter['reference'] = reference;
            }

            if (additionalFields !== undefined) {
                localVarQueryParameter['additionalFields'] = additionalFields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all eSIMs currently assigned to your organization. It provides a comprehensive view of your eSIM inventory with flexible options for data retrieval and management.  **Key Features:**   1. Pagination: Efficiently manage large datasets by specifying the page number and items per page.   2. Sorting: Customize the order of results using the \'direction\' and \'orderBy\' parameters.   3. Filtering: Refine your search with multiple filter options for precise data retrieval. 
         * @summary List eSIMs
         * @param {string} [page] Page of ESIMs to return
         * @param {EsimsGetPerPageEnum} [perPage] Number of ESIMs to return per page
         * @param {EsimsGetDirectionEnum} [direction] Direction of ordering
         * @param {EsimsGetOrderByEnum} [orderBy] Name of column to order by
         * @param {EsimsGetFilterByEnum} [filterBy] Name of column to filter by. eSIMs can be filtered by ICCID, Customer Reference, Last Action (Bundle Refund, Bundle Applied, Bundle Revoked, eSIM Updated, eSIM Refreshed, eSIM Utilisation Alert), Last Action Date and SIM Assignment Date.
         * @param {string} [filter] Value to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsGet: async (page?: string, perPage?: EsimsGetPerPageEnum, direction?: EsimsGetDirectionEnum, orderBy?: EsimsGetOrderByEnum, filterBy?: EsimsGetFilterByEnum, filter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/esims`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (filterBy !== undefined) {
                localVarQueryParameter['filterBy'] = filterBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a list of all bundles that have been applied to a specific eSIM. This endpoint is useful for tracking the service history and current status of an eSIM.  Remaining data can be found here.  Each Bundle can have multiple assignments.  Bundle Assignment States: - **Processing:**   The bundle assignment is currently processing.   This is usually instant but can, on occasion, take up to 10 minutes to complete.   The eSIM can still be installed and will register on a network while the bundle is processing. - **Queued:**   The bundle has been successfully assigned, has not been used yet, and is queued for use. - **Active:**   The bundle has successfully been used.   It has data remaining and is within the bundle duration. - **Depleted:**   The bundle has no data remaining but is still within the bundle duration. - **Expired:**   The bundle has expired, and the bundle duration has been exceeded. - **Revoked:**   The bundle has been revoked, and is no longer on the esim. - **Lapsed:**   The bundle has expired without being used and is no longer on the eSIM. 
         * @summary List Bundles applied to eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {string} [includeUsed] Include used &amp; expired Bundles Backward compatibility for v2.1 
         * @param {string} [limit] Number of assignments to return. Must be between 1 and 200. Default is 15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesGet: async (iccid: string, accept?: string, includeUsed?: string, limit?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidBundlesGet', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/bundles`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (includeUsed !== undefined) {
                localVarQueryParameter['includeUsed'] = includeUsed;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint revokes a specific bundle from an eSIM using assignment ID.          **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke specific Bundle
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} name (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {string} assignmentId (Required) ID of individual Bundle Assignment to revoke from an eSIM
         * @param {string} [accept] 
         * @param {string} [type] type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameAssignmentsAssignmentIdDelete: async (iccid: string, name: string, assignmentId: string, accept?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidBundlesNameAssignmentsAssignmentIdDelete', 'iccid', iccid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('esimsIccidBundlesNameAssignmentsAssignmentIdDelete', 'name', name)
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('esimsIccidBundlesNameAssignmentsAssignmentIdDelete', 'assignmentId', assignmentId)
            const localVarPath = `/esims/{iccid}/bundles/{name}/assignments/{assignmentId}`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)))
                .replace(`{${"assignmentId"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to revoke the latest assignment of a given bundle type from an eSIM. It requires two parameters: the ICCID of the eSIM and the name of the bundle to be revoked. If the specified ICCID has multiple bundles with the same name, the oldest unused bundle will be revoked.  Example: For an eSIM with ICCID 8943108165015003887 that has the following bundles:  • ESIM_1G_UK (Assignment ID: 243)  • ESIM_1G_UK (Assignment ID: 245)  • ESIM_1G_US (Assignment ID: 247)  If you revoke the \"ESIM_1G_UK\" bundle, the oldest unused assignment (ID: 243) will be revoked.  **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke applied Bundle
         * @param {string} iccid The ICCID of the eSIM
         * @param {string} name Name of Bundle  Format as defined in [List Catalogue](/api/v2_4/operations/catalogue/get) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {boolean} [refundToBalance] If Applicable, refund the value of this bundle to organisation balance
         * @param {string} [offerId] If Applicable, the offerId of the bundle to revoke. needed for refunding to balance
         * @param {EsimsIccidBundlesNameDeleteTypeEnum} [type] type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameDelete: async (iccid: string, name: string, refundToBalance?: boolean, offerId?: string, type?: EsimsIccidBundlesNameDeleteTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidBundlesNameDelete', 'iccid', iccid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('esimsIccidBundlesNameDelete', 'name', name)
            const localVarPath = `/esims/{iccid}/bundles/{name}`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refundToBalance !== undefined) {
                localVarQueryParameter['refundToBalance'] = refundToBalance;
            }

            if (offerId !== undefined) {
                localVarQueryParameter['offerId'] = offerId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides details about an individual assignment of a Bundle applied to an eSIM.   Bundle Assignment States:   - Processing: The bundle assignment is currently processing. This is usually      instant but can occasionally take up to 10 minutes to complete. The eSIM      can still be installed and will register on a network while the bundle is      processing.   - Queued: The bundle has been successfully assigned, has not been used yet,      and is queued for use.   - Active: The bundle has successfully been used. It has data remaining and      is within the bundle duration.   - Depleted: The bundle has no data remaining but is still within the bundle      duration.   - Expired: The bundle has expired, and the bundle duration has been exceeded.   - Revoked: The bundle has been revoked and is no longer on the eSIM.   - Lapsed: The bundle has expired without being used and is no longer on the eSIM.  Notes:   - If multiple of the same bundle are applied to a single eSIM, the status      bundle with the latest assignment will be returned.   - Bundle names are case sensitive and should be typed exactly as shown,      e.g., \"esim_1GB_7D_IM_U\".   - Remaining data can be found in the response. 
         * @summary Get applied Bundle status
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} name (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameGet: async (iccid: string, name: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidBundlesNameGet', 'iccid', iccid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('esimsIccidBundlesNameGet', 'name', name)
            const localVarPath = `/esims/{iccid}/bundles/{name}`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To ensure optimal service, eSIM Go utilizes multiple providers. As a result, certain bundles may be incompatible with existing eSIMs if they originate from different providers, preventing eSIM top-ups.    This endpoint is designed to verify eSIM-bundle compatibility.
         * @summary Check eSIM and Bundle Compatibility
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} bundle 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidCompatibleBundleGet: async (iccid: string, bundle: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidCompatibleBundleGet', 'iccid', iccid)
            // verify required parameter 'bundle' is not null or undefined
            assertParamExists('esimsIccidCompatibleBundleGet', 'bundle', bundle)
            const localVarPath = `/esims/{iccid}/compatible/{bundle}`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)))
                .replace(`{${"bundle"}}`, encodeURIComponent(String(bundle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve detailed information about a specific eSIM using its ICCID (Integrated Circuit Card Identifier).  
         * @summary Get eSIM details
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {string} [additionalFields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidGet: async (iccid: string, accept?: string, additionalFields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidGet', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (additionalFields !== undefined) {
                localVarQueryParameter['additionalFields'] = additionalFields;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the history of a specific eSIM. It provides a chronological list of actions performed on the eSIM, including bundle assignments and their states.  This endpoint is useful for tracking the lifecycle of an eSIM, including bundle assignments, updates, and other significant events.  Bundle Assignment States: - **Bundle Applied:**   The bundle has been successfully assigned to the eSIM - **eSIM Updated:**   The eSIM Reference has been updated. - **eSIM Refreshed:**   eSIM was forcibly disconnected from the network, prompting it to reestablish its connection. - **eSIM Utilisation Alert:**   A notification has been triggered due to the eSIM reaching a certain usage threshold. - **eSIM Returned:**   The eSIM is no longer assigned to your organisation after undergoing the returns process. - **Bundle Refunded To Balance:**   The unused bundle has been credited back to the organization\'s account balance. - **Bundle Refunded to Inventory:**   The unused bundle has been returned to the organization\'s inventory for potential reassignment. - **Bundle Revoked:**   The bundle has been removed from the eSIM. - **eSIM First Attachment:**   The eSIM has successfully connected to a mobile network for the first time since activation. - **eSIM First Use:**  The eSIM has been used for the first time to consume data service. - **Bundle Expired:**   The bundle\'s validity period has ended and/or has been used in full. It is no longer active or usable. - **Bundle Lapsed:**   The bundle has become inactive after no activity for 12 months. 
         * @summary Get eSIM history
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidHistoryGet: async (iccid: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidHistoryGet', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/history`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides the most recent location and associated network operator information for a specified eSIM.
         * @summary Get eSIM Location
         * @param {string} iccid 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidLocationGet: async (iccid: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidLocationGet', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/location`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This request generates a cancel location request to the network, prompting it to reestablish its connection. Please note that this process disconnects the customer from the network and should be used solely for troubleshooting. It is not intended for canceling locations in bulk.
         * @summary Refresh eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidRefreshGet: async (iccid: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidRefreshGet', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/refresh`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Send SMS endpoint is a powerful feature of the eSIMGo API that allows you to send text messages directly to eSIMs. This endpoint becomes particularly useful when combined with eSIMGo\'s real-time notification system, which provides updates about eSIM activity through callback functionality. The callback should be set up separatelly.   Key points:  1. Message requirements:   - UTF-8 compliant   - Length: 1-160 characters  2. Default recipient: \'eSIM\' (currently the only supported value)   - Custom identifiers available upon request  Note: For custom identifiers, please contact your Account Manager. 
         * @summary Send SMS to eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {EsimsIccidSmsPostRequest} [esimsIccidSmsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidSmsPost: async (iccid: string, contentType?: string, accept?: string, esimsIccidSmsPostRequest?: EsimsIccidSmsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iccid' is not null or undefined
            assertParamExists('esimsIccidSmsPost', 'iccid', iccid)
            const localVarPath = `/esims/{iccid}/sms`
                .replace(`{${"iccid"}}`, encodeURIComponent(String(iccid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(esimsIccidSmsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A feature that enables the association of a unique identifier with an eSIM. This functionality allows for the integration of relevant operational data, such as customer order IDs. 
         * @summary Update eSIM Details
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [iccid] (Required) ICCID of eSIM
         * @param {string} [customerRef] (Required) New Customer Reference
         * @param {UpdateSimDetails} [updateSimDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsPut: async (contentType?: string, accept?: string, iccid?: string, customerRef?: string, updateSimDetails?: UpdateSimDetails, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/esims`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (iccid !== undefined) {
                localVarQueryParameter['iccid'] = iccid;
            }

            if (customerRef !== undefined) {
                localVarQueryParameter['customerRef'] = customerRef;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSimDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ESIMsApi - functional programming interface
 * @export
 */
export const ESIMsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ESIMsApiAxiosParamCreator(configuration)
    return {
        /**
         * # eSIM Provisioning and Bundle Application Endpoint  This endpoint allows you to obtain a new eSIM with a pre-applied Bundle or apply a Bundle to an existing eSIM.  ## Key Features: 1. Assign Bundles to new or existing eSIMs 2. Option to request multiple eSIMs with the same Bundle 3. Ability to assign different Bundles to separate new eSIMs  ## Usage Guidelines: - Provide either \'Bundle\' or \'Bundles\' parameter - ICCID is optional for existing eSIMs - \'Repeat\' parameter for multiple new eSIMs (incompatible with ICCID) - Bundle names are case-sensitive (e.g., \"esim_1GB_7D_IM_U\")  ## Important Notes: - Requires pre-purchased Bundles in your account inventory - Bundle activation usually instant, but allow up to 10 minutes for full processing - eSIM can be installed and registered on a network during processing - The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  The endpoint always returns the ICCID in the response. 
         * @summary Apply Bundle to an eSIM
         * @param {EsimsApplyPostRequest} esimsApplyPostRequest Details of Bundle to apply to eSIM
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsApplyPost(esimsApplyPostRequest: EsimsApplyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESIMApplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsApplyPost(esimsApplyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsApplyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * # eSIM SMDP+ Details Retrieval Endpoint  This API endpoint retrieves eSIM SMDP+ details based on provided Order or Apply References.  ## Key features:  1. Input: One or multiple reference numbers can be submitted via query parameters. 2. Output: For each reference, the system returns:    - ICCID (Integrated Circuit Card Identifier)    - SMDP+ (Subscription Manager Data Preparation) address    - Matching ID 3. Output format options:    - Default: text/csv    - Alternative formats: application/json, application/zip    - Format selection is controlled via the \'Accept\' header in the request 4. Special functionality: When requesting \'application/zip\', the response is a ZIP file containing QR code images in PNG format. 
         * @summary Get eSIM Install Details
         * @param {string} [reference] (Required) Order Reference or Apply Reference
         * @param {string} [additionalFields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsAssignmentsGet(reference?: string, additionalFields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESIMDetailsInstallResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsAssignmentsGet(reference, additionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsAssignmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint retrieves all eSIMs currently assigned to your organization. It provides a comprehensive view of your eSIM inventory with flexible options for data retrieval and management.  **Key Features:**   1. Pagination: Efficiently manage large datasets by specifying the page number and items per page.   2. Sorting: Customize the order of results using the \'direction\' and \'orderBy\' parameters.   3. Filtering: Refine your search with multiple filter options for precise data retrieval. 
         * @summary List eSIMs
         * @param {string} [page] Page of ESIMs to return
         * @param {EsimsGetPerPageEnum} [perPage] Number of ESIMs to return per page
         * @param {EsimsGetDirectionEnum} [direction] Direction of ordering
         * @param {EsimsGetOrderByEnum} [orderBy] Name of column to order by
         * @param {EsimsGetFilterByEnum} [filterBy] Name of column to filter by. eSIMs can be filtered by ICCID, Customer Reference, Last Action (Bundle Refund, Bundle Applied, Bundle Revoked, eSIM Updated, eSIM Refreshed, eSIM Utilisation Alert), Last Action Date and SIM Assignment Date.
         * @param {string} [filter] Value to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsGet(page?: string, perPage?: EsimsGetPerPageEnum, direction?: EsimsGetDirectionEnum, orderBy?: EsimsGetOrderByEnum, filterBy?: EsimsGetFilterByEnum, filter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESIMs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsGet(page, perPage, direction, orderBy, filterBy, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve a list of all bundles that have been applied to a specific eSIM. This endpoint is useful for tracking the service history and current status of an eSIM.  Remaining data can be found here.  Each Bundle can have multiple assignments.  Bundle Assignment States: - **Processing:**   The bundle assignment is currently processing.   This is usually instant but can, on occasion, take up to 10 minutes to complete.   The eSIM can still be installed and will register on a network while the bundle is processing. - **Queued:**   The bundle has been successfully assigned, has not been used yet, and is queued for use. - **Active:**   The bundle has successfully been used.   It has data remaining and is within the bundle duration. - **Depleted:**   The bundle has no data remaining but is still within the bundle duration. - **Expired:**   The bundle has expired, and the bundle duration has been exceeded. - **Revoked:**   The bundle has been revoked, and is no longer on the esim. - **Lapsed:**   The bundle has expired without being used and is no longer on the eSIM. 
         * @summary List Bundles applied to eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {string} [includeUsed] Include used &amp; expired Bundles Backward compatibility for v2.1 
         * @param {string} [limit] Number of assignments to return. Must be between 1 and 200. Default is 15 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidBundlesGet(iccid: string, accept?: string, includeUsed?: string, limit?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BundlesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidBundlesGet(iccid, accept, includeUsed, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidBundlesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint revokes a specific bundle from an eSIM using assignment ID.          **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke specific Bundle
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} name (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {string} assignmentId (Required) ID of individual Bundle Assignment to revoke from an eSIM
         * @param {string} [accept] 
         * @param {string} [type] type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidBundlesNameAssignmentsAssignmentIdDelete(iccid: string, name: string, assignmentId: string, accept?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidBundlesNameAssignmentsAssignmentIdDelete(iccid, name, assignmentId, accept, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidBundlesNameAssignmentsAssignmentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint is used to revoke the latest assignment of a given bundle type from an eSIM. It requires two parameters: the ICCID of the eSIM and the name of the bundle to be revoked. If the specified ICCID has multiple bundles with the same name, the oldest unused bundle will be revoked.  Example: For an eSIM with ICCID 8943108165015003887 that has the following bundles:  • ESIM_1G_UK (Assignment ID: 243)  • ESIM_1G_UK (Assignment ID: 245)  • ESIM_1G_US (Assignment ID: 247)  If you revoke the \"ESIM_1G_UK\" bundle, the oldest unused assignment (ID: 243) will be revoked.  **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke applied Bundle
         * @param {string} iccid The ICCID of the eSIM
         * @param {string} name Name of Bundle  Format as defined in [List Catalogue](/api/v2_4/operations/catalogue/get) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {boolean} [refundToBalance] If Applicable, refund the value of this bundle to organisation balance
         * @param {string} [offerId] If Applicable, the offerId of the bundle to revoke. needed for refunding to balance
         * @param {EsimsIccidBundlesNameDeleteTypeEnum} [type] type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidBundlesNameDelete(iccid: string, name: string, refundToBalance?: boolean, offerId?: string, type?: EsimsIccidBundlesNameDeleteTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidBundlesNameDelete(iccid, name, refundToBalance, offerId, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidBundlesNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Provides details about an individual assignment of a Bundle applied to an eSIM.   Bundle Assignment States:   - Processing: The bundle assignment is currently processing. This is usually      instant but can occasionally take up to 10 minutes to complete. The eSIM      can still be installed and will register on a network while the bundle is      processing.   - Queued: The bundle has been successfully assigned, has not been used yet,      and is queued for use.   - Active: The bundle has successfully been used. It has data remaining and      is within the bundle duration.   - Depleted: The bundle has no data remaining but is still within the bundle      duration.   - Expired: The bundle has expired, and the bundle duration has been exceeded.   - Revoked: The bundle has been revoked and is no longer on the eSIM.   - Lapsed: The bundle has expired without being used and is no longer on the eSIM.  Notes:   - If multiple of the same bundle are applied to a single eSIM, the status      bundle with the latest assignment will be returned.   - Bundle names are case sensitive and should be typed exactly as shown,      e.g., \"esim_1GB_7D_IM_U\".   - Remaining data can be found in the response. 
         * @summary Get applied Bundle status
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} name (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidBundlesNameGet(iccid: string, name: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidBundlesNameGet(iccid, name, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidBundlesNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * To ensure optimal service, eSIM Go utilizes multiple providers. As a result, certain bundles may be incompatible with existing eSIMs if they originate from different providers, preventing eSIM top-ups.    This endpoint is designed to verify eSIM-bundle compatibility.
         * @summary Check eSIM and Bundle Compatibility
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} bundle 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidCompatibleBundleGet(iccid: string, bundle: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompatibilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidCompatibleBundleGet(iccid, bundle, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidCompatibleBundleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to retrieve detailed information about a specific eSIM using its ICCID (Integrated Circuit Card Identifier).  
         * @summary Get eSIM details
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {string} [additionalFields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidGet(iccid: string, accept?: string, additionalFields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESIMDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidGet(iccid, accept, additionalFields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the history of a specific eSIM. It provides a chronological list of actions performed on the eSIM, including bundle assignments and their states.  This endpoint is useful for tracking the lifecycle of an eSIM, including bundle assignments, updates, and other significant events.  Bundle Assignment States: - **Bundle Applied:**   The bundle has been successfully assigned to the eSIM - **eSIM Updated:**   The eSIM Reference has been updated. - **eSIM Refreshed:**   eSIM was forcibly disconnected from the network, prompting it to reestablish its connection. - **eSIM Utilisation Alert:**   A notification has been triggered due to the eSIM reaching a certain usage threshold. - **eSIM Returned:**   The eSIM is no longer assigned to your organisation after undergoing the returns process. - **Bundle Refunded To Balance:**   The unused bundle has been credited back to the organization\'s account balance. - **Bundle Refunded to Inventory:**   The unused bundle has been returned to the organization\'s inventory for potential reassignment. - **Bundle Revoked:**   The bundle has been removed from the eSIM. - **eSIM First Attachment:**   The eSIM has successfully connected to a mobile network for the first time since activation. - **eSIM First Use:**  The eSIM has been used for the first time to consume data service. - **Bundle Expired:**   The bundle\'s validity period has ended and/or has been used in full. It is no longer active or usable. - **Bundle Lapsed:**   The bundle has become inactive after no activity for 12 months. 
         * @summary Get eSIM history
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidHistoryGet(iccid: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ESIMHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidHistoryGet(iccid, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidHistoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint provides the most recent location and associated network operator information for a specified eSIM.
         * @summary Get eSIM Location
         * @param {string} iccid 
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidLocationGet(iccid: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidLocationGet(iccid, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidLocationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This request generates a cancel location request to the network, prompting it to reestablish its connection. Please note that this process disconnects the customer from the network and should be used solely for troubleshooting. It is not intended for canceling locations in bulk.
         * @summary Refresh eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidRefreshGet(iccid: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidRefreshGet(iccid, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidRefreshGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The Send SMS endpoint is a powerful feature of the eSIMGo API that allows you to send text messages directly to eSIMs. This endpoint becomes particularly useful when combined with eSIMGo\'s real-time notification system, which provides updates about eSIM activity through callback functionality. The callback should be set up separatelly.   Key points:  1. Message requirements:   - UTF-8 compliant   - Length: 1-160 characters  2. Default recipient: \'eSIM\' (currently the only supported value)   - Custom identifiers available upon request  Note: For custom identifiers, please contact your Account Manager. 
         * @summary Send SMS to eSIM
         * @param {string} iccid (Required) The ICCID of the eSIM
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {EsimsIccidSmsPostRequest} [esimsIccidSmsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsIccidSmsPost(iccid: string, contentType?: string, accept?: string, esimsIccidSmsPostRequest?: EsimsIccidSmsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsIccidSmsPost(iccid, contentType, accept, esimsIccidSmsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsIccidSmsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * A feature that enables the association of a unique identifier with an eSIM. This functionality allows for the integration of relevant operational data, such as customer order IDs. 
         * @summary Update eSIM Details
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [iccid] (Required) ICCID of eSIM
         * @param {string} [customerRef] (Required) New Customer Reference
         * @param {UpdateSimDetails} [updateSimDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async esimsPut(contentType?: string, accept?: string, iccid?: string, customerRef?: string, updateSimDetails?: UpdateSimDetails, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.esimsPut(contentType, accept, iccid, customerRef, updateSimDetails, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ESIMsApi.esimsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ESIMsApi - factory interface
 * @export
 */
export const ESIMsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ESIMsApiFp(configuration)
    return {
        /**
         * # eSIM Provisioning and Bundle Application Endpoint  This endpoint allows you to obtain a new eSIM with a pre-applied Bundle or apply a Bundle to an existing eSIM.  ## Key Features: 1. Assign Bundles to new or existing eSIMs 2. Option to request multiple eSIMs with the same Bundle 3. Ability to assign different Bundles to separate new eSIMs  ## Usage Guidelines: - Provide either \'Bundle\' or \'Bundles\' parameter - ICCID is optional for existing eSIMs - \'Repeat\' parameter for multiple new eSIMs (incompatible with ICCID) - Bundle names are case-sensitive (e.g., \"esim_1GB_7D_IM_U\")  ## Important Notes: - Requires pre-purchased Bundles in your account inventory - Bundle activation usually instant, but allow up to 10 minutes for full processing - eSIM can be installed and registered on a network during processing - The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  The endpoint always returns the ICCID in the response. 
         * @summary Apply Bundle to an eSIM
         * @param {ESIMsApiEsimsApplyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsApplyPost(requestParameters: ESIMsApiEsimsApplyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMApplyResponse> {
            return localVarFp.esimsApplyPost(requestParameters.esimsApplyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # eSIM SMDP+ Details Retrieval Endpoint  This API endpoint retrieves eSIM SMDP+ details based on provided Order or Apply References.  ## Key features:  1. Input: One or multiple reference numbers can be submitted via query parameters. 2. Output: For each reference, the system returns:    - ICCID (Integrated Circuit Card Identifier)    - SMDP+ (Subscription Manager Data Preparation) address    - Matching ID 3. Output format options:    - Default: text/csv    - Alternative formats: application/json, application/zip    - Format selection is controlled via the \'Accept\' header in the request 4. Special functionality: When requesting \'application/zip\', the response is a ZIP file containing QR code images in PNG format. 
         * @summary Get eSIM Install Details
         * @param {ESIMsApiEsimsAssignmentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsAssignmentsGet(requestParameters: ESIMsApiEsimsAssignmentsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ESIMDetailsInstallResponse> {
            return localVarFp.esimsAssignmentsGet(requestParameters.reference, requestParameters.additionalFields, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint retrieves all eSIMs currently assigned to your organization. It provides a comprehensive view of your eSIM inventory with flexible options for data retrieval and management.  **Key Features:**   1. Pagination: Efficiently manage large datasets by specifying the page number and items per page.   2. Sorting: Customize the order of results using the \'direction\' and \'orderBy\' parameters.   3. Filtering: Refine your search with multiple filter options for precise data retrieval. 
         * @summary List eSIMs
         * @param {ESIMsApiEsimsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsGet(requestParameters: ESIMsApiEsimsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ESIMs> {
            return localVarFp.esimsGet(requestParameters.page, requestParameters.perPage, requestParameters.direction, requestParameters.orderBy, requestParameters.filterBy, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a list of all bundles that have been applied to a specific eSIM. This endpoint is useful for tracking the service history and current status of an eSIM.  Remaining data can be found here.  Each Bundle can have multiple assignments.  Bundle Assignment States: - **Processing:**   The bundle assignment is currently processing.   This is usually instant but can, on occasion, take up to 10 minutes to complete.   The eSIM can still be installed and will register on a network while the bundle is processing. - **Queued:**   The bundle has been successfully assigned, has not been used yet, and is queued for use. - **Active:**   The bundle has successfully been used.   It has data remaining and is within the bundle duration. - **Depleted:**   The bundle has no data remaining but is still within the bundle duration. - **Expired:**   The bundle has expired, and the bundle duration has been exceeded. - **Revoked:**   The bundle has been revoked, and is no longer on the esim. - **Lapsed:**   The bundle has expired without being used and is no longer on the eSIM. 
         * @summary List Bundles applied to eSIM
         * @param {ESIMsApiEsimsIccidBundlesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesGet(requestParameters: ESIMsApiEsimsIccidBundlesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BundlesList> {
            return localVarFp.esimsIccidBundlesGet(requestParameters.iccid, requestParameters.accept, requestParameters.includeUsed, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint revokes a specific bundle from an eSIM using assignment ID.          **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke specific Bundle
         * @param {ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameAssignmentsAssignmentIdDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.esimsIccidBundlesNameAssignmentsAssignmentIdDelete(requestParameters.iccid, requestParameters.name, requestParameters.assignmentId, requestParameters.accept, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to revoke the latest assignment of a given bundle type from an eSIM. It requires two parameters: the ICCID of the eSIM and the name of the bundle to be revoked. If the specified ICCID has multiple bundles with the same name, the oldest unused bundle will be revoked.  Example: For an eSIM with ICCID 8943108165015003887 that has the following bundles:  • ESIM_1G_UK (Assignment ID: 243)  • ESIM_1G_UK (Assignment ID: 245)  • ESIM_1G_US (Assignment ID: 247)  If you revoke the \"ESIM_1G_UK\" bundle, the oldest unused assignment (ID: 243) will be revoked.  **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
         * @summary Revoke applied Bundle
         * @param {ESIMsApiEsimsIccidBundlesNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.esimsIccidBundlesNameDelete(requestParameters.iccid, requestParameters.name, requestParameters.refundToBalance, requestParameters.offerId, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides details about an individual assignment of a Bundle applied to an eSIM.   Bundle Assignment States:   - Processing: The bundle assignment is currently processing. This is usually      instant but can occasionally take up to 10 minutes to complete. The eSIM      can still be installed and will register on a network while the bundle is      processing.   - Queued: The bundle has been successfully assigned, has not been used yet,      and is queued for use.   - Active: The bundle has successfully been used. It has data remaining and      is within the bundle duration.   - Depleted: The bundle has no data remaining but is still within the bundle      duration.   - Expired: The bundle has expired, and the bundle duration has been exceeded.   - Revoked: The bundle has been revoked and is no longer on the eSIM.   - Lapsed: The bundle has expired without being used and is no longer on the eSIM.  Notes:   - If multiple of the same bundle are applied to a single eSIM, the status      bundle with the latest assignment will be returned.   - Bundle names are case sensitive and should be typed exactly as shown,      e.g., \"esim_1GB_7D_IM_U\".   - Remaining data can be found in the response. 
         * @summary Get applied Bundle status
         * @param {ESIMsApiEsimsIccidBundlesNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidBundlesNameGet(requestParameters: ESIMsApiEsimsIccidBundlesNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentResponse> {
            return localVarFp.esimsIccidBundlesNameGet(requestParameters.iccid, requestParameters.name, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * To ensure optimal service, eSIM Go utilizes multiple providers. As a result, certain bundles may be incompatible with existing eSIMs if they originate from different providers, preventing eSIM top-ups.    This endpoint is designed to verify eSIM-bundle compatibility.
         * @summary Check eSIM and Bundle Compatibility
         * @param {ESIMsApiEsimsIccidCompatibleBundleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidCompatibleBundleGet(requestParameters: ESIMsApiEsimsIccidCompatibleBundleGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompatibilityResponse> {
            return localVarFp.esimsIccidCompatibleBundleGet(requestParameters.iccid, requestParameters.bundle, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve detailed information about a specific eSIM using its ICCID (Integrated Circuit Card Identifier).  
         * @summary Get eSIM details
         * @param {ESIMsApiEsimsIccidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidGet(requestParameters: ESIMsApiEsimsIccidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMDetailsResponse> {
            return localVarFp.esimsIccidGet(requestParameters.iccid, requestParameters.accept, requestParameters.additionalFields, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the history of a specific eSIM. It provides a chronological list of actions performed on the eSIM, including bundle assignments and their states.  This endpoint is useful for tracking the lifecycle of an eSIM, including bundle assignments, updates, and other significant events.  Bundle Assignment States: - **Bundle Applied:**   The bundle has been successfully assigned to the eSIM - **eSIM Updated:**   The eSIM Reference has been updated. - **eSIM Refreshed:**   eSIM was forcibly disconnected from the network, prompting it to reestablish its connection. - **eSIM Utilisation Alert:**   A notification has been triggered due to the eSIM reaching a certain usage threshold. - **eSIM Returned:**   The eSIM is no longer assigned to your organisation after undergoing the returns process. - **Bundle Refunded To Balance:**   The unused bundle has been credited back to the organization\'s account balance. - **Bundle Refunded to Inventory:**   The unused bundle has been returned to the organization\'s inventory for potential reassignment. - **Bundle Revoked:**   The bundle has been removed from the eSIM. - **eSIM First Attachment:**   The eSIM has successfully connected to a mobile network for the first time since activation. - **eSIM First Use:**  The eSIM has been used for the first time to consume data service. - **Bundle Expired:**   The bundle\'s validity period has ended and/or has been used in full. It is no longer active or usable. - **Bundle Lapsed:**   The bundle has become inactive after no activity for 12 months. 
         * @summary Get eSIM history
         * @param {ESIMsApiEsimsIccidHistoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidHistoryGet(requestParameters: ESIMsApiEsimsIccidHistoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMHistory> {
            return localVarFp.esimsIccidHistoryGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides the most recent location and associated network operator information for a specified eSIM.
         * @summary Get eSIM Location
         * @param {ESIMsApiEsimsIccidLocationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidLocationGet(requestParameters: ESIMsApiEsimsIccidLocationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationResponse> {
            return localVarFp.esimsIccidLocationGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * This request generates a cancel location request to the network, prompting it to reestablish its connection. Please note that this process disconnects the customer from the network and should be used solely for troubleshooting. It is not intended for canceling locations in bulk.
         * @summary Refresh eSIM
         * @param {ESIMsApiEsimsIccidRefreshGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidRefreshGet(requestParameters: ESIMsApiEsimsIccidRefreshGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.esimsIccidRefreshGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * The Send SMS endpoint is a powerful feature of the eSIMGo API that allows you to send text messages directly to eSIMs. This endpoint becomes particularly useful when combined with eSIMGo\'s real-time notification system, which provides updates about eSIM activity through callback functionality. The callback should be set up separatelly.   Key points:  1. Message requirements:   - UTF-8 compliant   - Length: 1-160 characters  2. Default recipient: \'eSIM\' (currently the only supported value)   - Custom identifiers available upon request  Note: For custom identifiers, please contact your Account Manager. 
         * @summary Send SMS to eSIM
         * @param {ESIMsApiEsimsIccidSmsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsIccidSmsPost(requestParameters: ESIMsApiEsimsIccidSmsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.esimsIccidSmsPost(requestParameters.iccid, requestParameters.contentType, requestParameters.accept, requestParameters.esimsIccidSmsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A feature that enables the association of a unique identifier with an eSIM. This functionality allows for the integration of relevant operational data, such as customer order IDs. 
         * @summary Update eSIM Details
         * @param {ESIMsApiEsimsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        esimsPut(requestParameters: ESIMsApiEsimsPutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.esimsPut(requestParameters.contentType, requestParameters.accept, requestParameters.iccid, requestParameters.customerRef, requestParameters.updateSimDetails, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ESIMsApi - interface
 * @export
 * @interface ESIMsApi
 */
export interface ESIMsApiInterface {
    /**
     * # eSIM Provisioning and Bundle Application Endpoint  This endpoint allows you to obtain a new eSIM with a pre-applied Bundle or apply a Bundle to an existing eSIM.  ## Key Features: 1. Assign Bundles to new or existing eSIMs 2. Option to request multiple eSIMs with the same Bundle 3. Ability to assign different Bundles to separate new eSIMs  ## Usage Guidelines: - Provide either \'Bundle\' or \'Bundles\' parameter - ICCID is optional for existing eSIMs - \'Repeat\' parameter for multiple new eSIMs (incompatible with ICCID) - Bundle names are case-sensitive (e.g., \"esim_1GB_7D_IM_U\")  ## Important Notes: - Requires pre-purchased Bundles in your account inventory - Bundle activation usually instant, but allow up to 10 minutes for full processing - eSIM can be installed and registered on a network during processing - The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  The endpoint always returns the ICCID in the response. 
     * @summary Apply Bundle to an eSIM
     * @param {ESIMsApiEsimsApplyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsApplyPost(requestParameters: ESIMsApiEsimsApplyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMApplyResponse>;

    /**
     * # eSIM SMDP+ Details Retrieval Endpoint  This API endpoint retrieves eSIM SMDP+ details based on provided Order or Apply References.  ## Key features:  1. Input: One or multiple reference numbers can be submitted via query parameters. 2. Output: For each reference, the system returns:    - ICCID (Integrated Circuit Card Identifier)    - SMDP+ (Subscription Manager Data Preparation) address    - Matching ID 3. Output format options:    - Default: text/csv    - Alternative formats: application/json, application/zip    - Format selection is controlled via the \'Accept\' header in the request 4. Special functionality: When requesting \'application/zip\', the response is a ZIP file containing QR code images in PNG format. 
     * @summary Get eSIM Install Details
     * @param {ESIMsApiEsimsAssignmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsAssignmentsGet(requestParameters?: ESIMsApiEsimsAssignmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMDetailsInstallResponse>;

    /**
     * This endpoint retrieves all eSIMs currently assigned to your organization. It provides a comprehensive view of your eSIM inventory with flexible options for data retrieval and management.  **Key Features:**   1. Pagination: Efficiently manage large datasets by specifying the page number and items per page.   2. Sorting: Customize the order of results using the \'direction\' and \'orderBy\' parameters.   3. Filtering: Refine your search with multiple filter options for precise data retrieval. 
     * @summary List eSIMs
     * @param {ESIMsApiEsimsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsGet(requestParameters?: ESIMsApiEsimsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMs>;

    /**
     * This endpoint allows you to retrieve a list of all bundles that have been applied to a specific eSIM. This endpoint is useful for tracking the service history and current status of an eSIM.  Remaining data can be found here.  Each Bundle can have multiple assignments.  Bundle Assignment States: - **Processing:**   The bundle assignment is currently processing.   This is usually instant but can, on occasion, take up to 10 minutes to complete.   The eSIM can still be installed and will register on a network while the bundle is processing. - **Queued:**   The bundle has been successfully assigned, has not been used yet, and is queued for use. - **Active:**   The bundle has successfully been used.   It has data remaining and is within the bundle duration. - **Depleted:**   The bundle has no data remaining but is still within the bundle duration. - **Expired:**   The bundle has expired, and the bundle duration has been exceeded. - **Revoked:**   The bundle has been revoked, and is no longer on the esim. - **Lapsed:**   The bundle has expired without being used and is no longer on the eSIM. 
     * @summary List Bundles applied to eSIM
     * @param {ESIMsApiEsimsIccidBundlesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidBundlesGet(requestParameters: ESIMsApiEsimsIccidBundlesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BundlesList>;

    /**
     * This endpoint revokes a specific bundle from an eSIM using assignment ID.          **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
     * @summary Revoke specific Bundle
     * @param {ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidBundlesNameAssignmentsAssignmentIdDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

    /**
     * This endpoint is used to revoke the latest assignment of a given bundle type from an eSIM. It requires two parameters: the ICCID of the eSIM and the name of the bundle to be revoked. If the specified ICCID has multiple bundles with the same name, the oldest unused bundle will be revoked.  Example: For an eSIM with ICCID 8943108165015003887 that has the following bundles:  • ESIM_1G_UK (Assignment ID: 243)  • ESIM_1G_UK (Assignment ID: 245)  • ESIM_1G_US (Assignment ID: 247)  If you revoke the \"ESIM_1G_UK\" bundle, the oldest unused assignment (ID: 243) will be revoked.  **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
     * @summary Revoke applied Bundle
     * @param {ESIMsApiEsimsIccidBundlesNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidBundlesNameDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

    /**
     * Provides details about an individual assignment of a Bundle applied to an eSIM.   Bundle Assignment States:   - Processing: The bundle assignment is currently processing. This is usually      instant but can occasionally take up to 10 minutes to complete. The eSIM      can still be installed and will register on a network while the bundle is      processing.   - Queued: The bundle has been successfully assigned, has not been used yet,      and is queued for use.   - Active: The bundle has successfully been used. It has data remaining and      is within the bundle duration.   - Depleted: The bundle has no data remaining but is still within the bundle      duration.   - Expired: The bundle has expired, and the bundle duration has been exceeded.   - Revoked: The bundle has been revoked and is no longer on the eSIM.   - Lapsed: The bundle has expired without being used and is no longer on the eSIM.  Notes:   - If multiple of the same bundle are applied to a single eSIM, the status      bundle with the latest assignment will be returned.   - Bundle names are case sensitive and should be typed exactly as shown,      e.g., \"esim_1GB_7D_IM_U\".   - Remaining data can be found in the response. 
     * @summary Get applied Bundle status
     * @param {ESIMsApiEsimsIccidBundlesNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidBundlesNameGet(requestParameters: ESIMsApiEsimsIccidBundlesNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssignmentResponse>;

    /**
     * To ensure optimal service, eSIM Go utilizes multiple providers. As a result, certain bundles may be incompatible with existing eSIMs if they originate from different providers, preventing eSIM top-ups.    This endpoint is designed to verify eSIM-bundle compatibility.
     * @summary Check eSIM and Bundle Compatibility
     * @param {ESIMsApiEsimsIccidCompatibleBundleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidCompatibleBundleGet(requestParameters: ESIMsApiEsimsIccidCompatibleBundleGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CompatibilityResponse>;

    /**
     * This endpoint allows you to retrieve detailed information about a specific eSIM using its ICCID (Integrated Circuit Card Identifier).  
     * @summary Get eSIM details
     * @param {ESIMsApiEsimsIccidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidGet(requestParameters: ESIMsApiEsimsIccidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMDetailsResponse>;

    /**
     * This endpoint returns the history of a specific eSIM. It provides a chronological list of actions performed on the eSIM, including bundle assignments and their states.  This endpoint is useful for tracking the lifecycle of an eSIM, including bundle assignments, updates, and other significant events.  Bundle Assignment States: - **Bundle Applied:**   The bundle has been successfully assigned to the eSIM - **eSIM Updated:**   The eSIM Reference has been updated. - **eSIM Refreshed:**   eSIM was forcibly disconnected from the network, prompting it to reestablish its connection. - **eSIM Utilisation Alert:**   A notification has been triggered due to the eSIM reaching a certain usage threshold. - **eSIM Returned:**   The eSIM is no longer assigned to your organisation after undergoing the returns process. - **Bundle Refunded To Balance:**   The unused bundle has been credited back to the organization\'s account balance. - **Bundle Refunded to Inventory:**   The unused bundle has been returned to the organization\'s inventory for potential reassignment. - **Bundle Revoked:**   The bundle has been removed from the eSIM. - **eSIM First Attachment:**   The eSIM has successfully connected to a mobile network for the first time since activation. - **eSIM First Use:**  The eSIM has been used for the first time to consume data service. - **Bundle Expired:**   The bundle\'s validity period has ended and/or has been used in full. It is no longer active or usable. - **Bundle Lapsed:**   The bundle has become inactive after no activity for 12 months. 
     * @summary Get eSIM history
     * @param {ESIMsApiEsimsIccidHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidHistoryGet(requestParameters: ESIMsApiEsimsIccidHistoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ESIMHistory>;

    /**
     * This endpoint provides the most recent location and associated network operator information for a specified eSIM.
     * @summary Get eSIM Location
     * @param {ESIMsApiEsimsIccidLocationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidLocationGet(requestParameters: ESIMsApiEsimsIccidLocationGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationResponse>;

    /**
     * This request generates a cancel location request to the network, prompting it to reestablish its connection. Please note that this process disconnects the customer from the network and should be used solely for troubleshooting. It is not intended for canceling locations in bulk.
     * @summary Refresh eSIM
     * @param {ESIMsApiEsimsIccidRefreshGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidRefreshGet(requestParameters: ESIMsApiEsimsIccidRefreshGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

    /**
     * The Send SMS endpoint is a powerful feature of the eSIMGo API that allows you to send text messages directly to eSIMs. This endpoint becomes particularly useful when combined with eSIMGo\'s real-time notification system, which provides updates about eSIM activity through callback functionality. The callback should be set up separatelly.   Key points:  1. Message requirements:   - UTF-8 compliant   - Length: 1-160 characters  2. Default recipient: \'eSIM\' (currently the only supported value)   - Custom identifiers available upon request  Note: For custom identifiers, please contact your Account Manager. 
     * @summary Send SMS to eSIM
     * @param {ESIMsApiEsimsIccidSmsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsIccidSmsPost(requestParameters: ESIMsApiEsimsIccidSmsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

    /**
     * A feature that enables the association of a unique identifier with an eSIM. This functionality allows for the integration of relevant operational data, such as customer order IDs. 
     * @summary Update eSIM Details
     * @param {ESIMsApiEsimsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApiInterface
     */
    esimsPut(requestParameters?: ESIMsApiEsimsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

}

/**
 * Request parameters for esimsApplyPost operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsApplyPostRequest
 */
export interface ESIMsApiEsimsApplyPostRequest {
    /**
     * Details of Bundle to apply to eSIM
     * @type {EsimsApplyPostRequest}
     * @memberof ESIMsApiEsimsApplyPost
     */
    readonly esimsApplyPostRequest: EsimsApplyPostRequest
}

/**
 * Request parameters for esimsAssignmentsGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsAssignmentsGetRequest
 */
export interface ESIMsApiEsimsAssignmentsGetRequest {
    /**
     * (Required) Order Reference or Apply Reference
     * @type {string}
     * @memberof ESIMsApiEsimsAssignmentsGet
     */
    readonly reference?: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsAssignmentsGet
     */
    readonly additionalFields?: string
}

/**
 * Request parameters for esimsGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsGetRequest
 */
export interface ESIMsApiEsimsGetRequest {
    /**
     * Page of ESIMs to return
     * @type {string}
     * @memberof ESIMsApiEsimsGet
     */
    readonly page?: string

    /**
     * Number of ESIMs to return per page
     * @type {10 | 25 | 50 | 100}
     * @memberof ESIMsApiEsimsGet
     */
    readonly perPage?: EsimsGetPerPageEnum

    /**
     * Direction of ordering
     * @type {'asc' | 'desc'}
     * @memberof ESIMsApiEsimsGet
     */
    readonly direction?: EsimsGetDirectionEnum

    /**
     * Name of column to order by
     * @type {'iccid'}
     * @memberof ESIMsApiEsimsGet
     */
    readonly orderBy?: EsimsGetOrderByEnum

    /**
     * Name of column to filter by. eSIMs can be filtered by ICCID, Customer Reference, Last Action (Bundle Refund, Bundle Applied, Bundle Revoked, eSIM Updated, eSIM Refreshed, eSIM Utilisation Alert), Last Action Date and SIM Assignment Date.
     * @type {'iccid, customerRef, lastAction, actionDate, assignedDate'}
     * @memberof ESIMsApiEsimsGet
     */
    readonly filterBy?: EsimsGetFilterByEnum

    /**
     * Value to filter by
     * @type {string}
     * @memberof ESIMsApiEsimsGet
     */
    readonly filter?: string
}

/**
 * Request parameters for esimsIccidBundlesGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidBundlesGetRequest
 */
export interface ESIMsApiEsimsIccidBundlesGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesGet
     */
    readonly accept?: string

    /**
     * Include used &amp; expired Bundles Backward compatibility for v2.1 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesGet
     */
    readonly includeUsed?: string

    /**
     * Number of assignments to return. Must be between 1 and 200. Default is 15 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesGet
     */
    readonly limit?: string
}

/**
 * Request parameters for esimsIccidBundlesNameAssignmentsAssignmentIdDelete operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest
 */
export interface ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDelete
     */
    readonly iccid: string

    /**
     * (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDelete
     */
    readonly name: string

    /**
     * (Required) ID of individual Bundle Assignment to revoke from an eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDelete
     */
    readonly assignmentId: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDelete
     */
    readonly accept?: string

    /**
     * type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDelete
     */
    readonly type?: string
}

/**
 * Request parameters for esimsIccidBundlesNameDelete operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidBundlesNameDeleteRequest
 */
export interface ESIMsApiEsimsIccidBundlesNameDeleteRequest {
    /**
     * The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameDelete
     */
    readonly iccid: string

    /**
     * Name of Bundle  Format as defined in [List Catalogue](/api/v2_4/operations/catalogue/get) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameDelete
     */
    readonly name: string

    /**
     * If Applicable, refund the value of this bundle to organisation balance
     * @type {boolean}
     * @memberof ESIMsApiEsimsIccidBundlesNameDelete
     */
    readonly refundToBalance?: boolean

    /**
     * If Applicable, the offerId of the bundle to revoke. needed for refunding to balance
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameDelete
     */
    readonly offerId?: string

    /**
     * type &#x60;validate&#x60; will provide options for the revoke and the behaviours, if any. type &#x60;transaction&#x60; will execute the revoke. Defaults to &#x60;transaction&#x60;
     * @type {'validate' | 'transaction'}
     * @memberof ESIMsApiEsimsIccidBundlesNameDelete
     */
    readonly type?: EsimsIccidBundlesNameDeleteTypeEnum
}

/**
 * Request parameters for esimsIccidBundlesNameGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidBundlesNameGetRequest
 */
export interface ESIMsApiEsimsIccidBundlesNameGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameGet
     */
    readonly iccid: string

    /**
     * (Required) Name of Bundle Format as defined in [List Catalogue](/api/#get-/catalogue) API call. Example: &#x60;esim_10GB_30D_IM_U&#x60; 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameGet
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidBundlesNameGet
     */
    readonly accept?: string
}

/**
 * Request parameters for esimsIccidCompatibleBundleGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidCompatibleBundleGetRequest
 */
export interface ESIMsApiEsimsIccidCompatibleBundleGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidCompatibleBundleGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidCompatibleBundleGet
     */
    readonly bundle: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidCompatibleBundleGet
     */
    readonly accept?: string
}

/**
 * Request parameters for esimsIccidGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidGetRequest
 */
export interface ESIMsApiEsimsIccidGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidGet
     */
    readonly accept?: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidGet
     */
    readonly additionalFields?: string
}

/**
 * Request parameters for esimsIccidHistoryGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidHistoryGetRequest
 */
export interface ESIMsApiEsimsIccidHistoryGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidHistoryGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidHistoryGet
     */
    readonly accept?: string
}

/**
 * Request parameters for esimsIccidLocationGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidLocationGetRequest
 */
export interface ESIMsApiEsimsIccidLocationGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidLocationGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidLocationGet
     */
    readonly accept?: string
}

/**
 * Request parameters for esimsIccidRefreshGet operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidRefreshGetRequest
 */
export interface ESIMsApiEsimsIccidRefreshGetRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidRefreshGet
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidRefreshGet
     */
    readonly accept?: string
}

/**
 * Request parameters for esimsIccidSmsPost operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsIccidSmsPostRequest
 */
export interface ESIMsApiEsimsIccidSmsPostRequest {
    /**
     * (Required) The ICCID of the eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsIccidSmsPost
     */
    readonly iccid: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidSmsPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsIccidSmsPost
     */
    readonly accept?: string

    /**
     * 
     * @type {EsimsIccidSmsPostRequest}
     * @memberof ESIMsApiEsimsIccidSmsPost
     */
    readonly esimsIccidSmsPostRequest?: EsimsIccidSmsPostRequest
}

/**
 * Request parameters for esimsPut operation in ESIMsApi.
 * @export
 * @interface ESIMsApiEsimsPutRequest
 */
export interface ESIMsApiEsimsPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsPut
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof ESIMsApiEsimsPut
     */
    readonly accept?: string

    /**
     * (Required) ICCID of eSIM
     * @type {string}
     * @memberof ESIMsApiEsimsPut
     */
    readonly iccid?: string

    /**
     * (Required) New Customer Reference
     * @type {string}
     * @memberof ESIMsApiEsimsPut
     */
    readonly customerRef?: string

    /**
     * 
     * @type {UpdateSimDetails}
     * @memberof ESIMsApiEsimsPut
     */
    readonly updateSimDetails?: UpdateSimDetails
}

/**
 * ESIMsApi - object-oriented interface
 * @export
 * @class ESIMsApi
 * @extends {BaseAPI}
 */
export class ESIMsApi extends BaseAPI implements ESIMsApiInterface {
    /**
     * # eSIM Provisioning and Bundle Application Endpoint  This endpoint allows you to obtain a new eSIM with a pre-applied Bundle or apply a Bundle to an existing eSIM.  ## Key Features: 1. Assign Bundles to new or existing eSIMs 2. Option to request multiple eSIMs with the same Bundle 3. Ability to assign different Bundles to separate new eSIMs  ## Usage Guidelines: - Provide either \'Bundle\' or \'Bundles\' parameter - ICCID is optional for existing eSIMs - \'Repeat\' parameter for multiple new eSIMs (incompatible with ICCID) - Bundle names are case-sensitive (e.g., \"esim_1GB_7D_IM_U\")  ## Important Notes: - Requires pre-purchased Bundles in your account inventory - Bundle activation usually instant, but allow up to 10 minutes for full processing - eSIM can be installed and registered on a network during processing - The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  The endpoint always returns the ICCID in the response. 
     * @summary Apply Bundle to an eSIM
     * @param {ESIMsApiEsimsApplyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsApplyPost(requestParameters: ESIMsApiEsimsApplyPostRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsApplyPost(requestParameters.esimsApplyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # eSIM SMDP+ Details Retrieval Endpoint  This API endpoint retrieves eSIM SMDP+ details based on provided Order or Apply References.  ## Key features:  1. Input: One or multiple reference numbers can be submitted via query parameters. 2. Output: For each reference, the system returns:    - ICCID (Integrated Circuit Card Identifier)    - SMDP+ (Subscription Manager Data Preparation) address    - Matching ID 3. Output format options:    - Default: text/csv    - Alternative formats: application/json, application/zip    - Format selection is controlled via the \'Accept\' header in the request 4. Special functionality: When requesting \'application/zip\', the response is a ZIP file containing QR code images in PNG format. 
     * @summary Get eSIM Install Details
     * @param {ESIMsApiEsimsAssignmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsAssignmentsGet(requestParameters: ESIMsApiEsimsAssignmentsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsAssignmentsGet(requestParameters.reference, requestParameters.additionalFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint retrieves all eSIMs currently assigned to your organization. It provides a comprehensive view of your eSIM inventory with flexible options for data retrieval and management.  **Key Features:**   1. Pagination: Efficiently manage large datasets by specifying the page number and items per page.   2. Sorting: Customize the order of results using the \'direction\' and \'orderBy\' parameters.   3. Filtering: Refine your search with multiple filter options for precise data retrieval. 
     * @summary List eSIMs
     * @param {ESIMsApiEsimsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsGet(requestParameters: ESIMsApiEsimsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsGet(requestParameters.page, requestParameters.perPage, requestParameters.direction, requestParameters.orderBy, requestParameters.filterBy, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a list of all bundles that have been applied to a specific eSIM. This endpoint is useful for tracking the service history and current status of an eSIM.  Remaining data can be found here.  Each Bundle can have multiple assignments.  Bundle Assignment States: - **Processing:**   The bundle assignment is currently processing.   This is usually instant but can, on occasion, take up to 10 minutes to complete.   The eSIM can still be installed and will register on a network while the bundle is processing. - **Queued:**   The bundle has been successfully assigned, has not been used yet, and is queued for use. - **Active:**   The bundle has successfully been used.   It has data remaining and is within the bundle duration. - **Depleted:**   The bundle has no data remaining but is still within the bundle duration. - **Expired:**   The bundle has expired, and the bundle duration has been exceeded. - **Revoked:**   The bundle has been revoked, and is no longer on the esim. - **Lapsed:**   The bundle has expired without being used and is no longer on the eSIM. 
     * @summary List Bundles applied to eSIM
     * @param {ESIMsApiEsimsIccidBundlesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidBundlesGet(requestParameters: ESIMsApiEsimsIccidBundlesGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidBundlesGet(requestParameters.iccid, requestParameters.accept, requestParameters.includeUsed, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint revokes a specific bundle from an eSIM using assignment ID.          **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
     * @summary Revoke specific Bundle
     * @param {ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidBundlesNameAssignmentsAssignmentIdDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameAssignmentsAssignmentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidBundlesNameAssignmentsAssignmentIdDelete(requestParameters.iccid, requestParameters.name, requestParameters.assignmentId, requestParameters.accept, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is used to revoke the latest assignment of a given bundle type from an eSIM. It requires two parameters: the ICCID of the eSIM and the name of the bundle to be revoked. If the specified ICCID has multiple bundles with the same name, the oldest unused bundle will be revoked.  Example: For an eSIM with ICCID 8943108165015003887 that has the following bundles:  • ESIM_1G_UK (Assignment ID: 243)  • ESIM_1G_UK (Assignment ID: 245)  • ESIM_1G_US (Assignment ID: 247)  If you revoke the \"ESIM_1G_UK\" bundle, the oldest unused assignment (ID: 243) will be revoked.  **IMPORTANT:** If there are no bundles left on the eSIM AFTER the revoke, AND if the eSIM is not installed, the eSIM may undergo the eSIM Go returns process. The start of the returns process will REMOVE the eSIM from your account - you will no longer be able to access it. After a minimum of 4 days: if during the returns process, the eSIM is now installed (e.g. by your end user), the eSIM will be returned to your account. If you DO NOT want the eSIM to be given back to eSIM Go, ensure the eSIM either: - Is installed - Has more than 1 bundle on it at the time of revoking  Revokes latest assignment of a given Bundle type. If a bundle assignment has not been started and no data has been consumed, the bundle assignment can either be returned to the inventory or credited back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be returned to the inventory or taken as a credit.  **Note:** Bundle names are case sensitive and should be typed like the following \"esim_1GB_7D_IM_U\". 
     * @summary Revoke applied Bundle
     * @param {ESIMsApiEsimsIccidBundlesNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidBundlesNameDelete(requestParameters: ESIMsApiEsimsIccidBundlesNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidBundlesNameDelete(requestParameters.iccid, requestParameters.name, requestParameters.refundToBalance, requestParameters.offerId, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides details about an individual assignment of a Bundle applied to an eSIM.   Bundle Assignment States:   - Processing: The bundle assignment is currently processing. This is usually      instant but can occasionally take up to 10 minutes to complete. The eSIM      can still be installed and will register on a network while the bundle is      processing.   - Queued: The bundle has been successfully assigned, has not been used yet,      and is queued for use.   - Active: The bundle has successfully been used. It has data remaining and      is within the bundle duration.   - Depleted: The bundle has no data remaining but is still within the bundle      duration.   - Expired: The bundle has expired, and the bundle duration has been exceeded.   - Revoked: The bundle has been revoked and is no longer on the eSIM.   - Lapsed: The bundle has expired without being used and is no longer on the eSIM.  Notes:   - If multiple of the same bundle are applied to a single eSIM, the status      bundle with the latest assignment will be returned.   - Bundle names are case sensitive and should be typed exactly as shown,      e.g., \"esim_1GB_7D_IM_U\".   - Remaining data can be found in the response. 
     * @summary Get applied Bundle status
     * @param {ESIMsApiEsimsIccidBundlesNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidBundlesNameGet(requestParameters: ESIMsApiEsimsIccidBundlesNameGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidBundlesNameGet(requestParameters.iccid, requestParameters.name, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To ensure optimal service, eSIM Go utilizes multiple providers. As a result, certain bundles may be incompatible with existing eSIMs if they originate from different providers, preventing eSIM top-ups.    This endpoint is designed to verify eSIM-bundle compatibility.
     * @summary Check eSIM and Bundle Compatibility
     * @param {ESIMsApiEsimsIccidCompatibleBundleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidCompatibleBundleGet(requestParameters: ESIMsApiEsimsIccidCompatibleBundleGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidCompatibleBundleGet(requestParameters.iccid, requestParameters.bundle, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve detailed information about a specific eSIM using its ICCID (Integrated Circuit Card Identifier).  
     * @summary Get eSIM details
     * @param {ESIMsApiEsimsIccidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidGet(requestParameters: ESIMsApiEsimsIccidGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidGet(requestParameters.iccid, requestParameters.accept, requestParameters.additionalFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the history of a specific eSIM. It provides a chronological list of actions performed on the eSIM, including bundle assignments and their states.  This endpoint is useful for tracking the lifecycle of an eSIM, including bundle assignments, updates, and other significant events.  Bundle Assignment States: - **Bundle Applied:**   The bundle has been successfully assigned to the eSIM - **eSIM Updated:**   The eSIM Reference has been updated. - **eSIM Refreshed:**   eSIM was forcibly disconnected from the network, prompting it to reestablish its connection. - **eSIM Utilisation Alert:**   A notification has been triggered due to the eSIM reaching a certain usage threshold. - **eSIM Returned:**   The eSIM is no longer assigned to your organisation after undergoing the returns process. - **Bundle Refunded To Balance:**   The unused bundle has been credited back to the organization\'s account balance. - **Bundle Refunded to Inventory:**   The unused bundle has been returned to the organization\'s inventory for potential reassignment. - **Bundle Revoked:**   The bundle has been removed from the eSIM. - **eSIM First Attachment:**   The eSIM has successfully connected to a mobile network for the first time since activation. - **eSIM First Use:**  The eSIM has been used for the first time to consume data service. - **Bundle Expired:**   The bundle\'s validity period has ended and/or has been used in full. It is no longer active or usable. - **Bundle Lapsed:**   The bundle has become inactive after no activity for 12 months. 
     * @summary Get eSIM history
     * @param {ESIMsApiEsimsIccidHistoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidHistoryGet(requestParameters: ESIMsApiEsimsIccidHistoryGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidHistoryGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint provides the most recent location and associated network operator information for a specified eSIM.
     * @summary Get eSIM Location
     * @param {ESIMsApiEsimsIccidLocationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidLocationGet(requestParameters: ESIMsApiEsimsIccidLocationGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidLocationGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This request generates a cancel location request to the network, prompting it to reestablish its connection. Please note that this process disconnects the customer from the network and should be used solely for troubleshooting. It is not intended for canceling locations in bulk.
     * @summary Refresh eSIM
     * @param {ESIMsApiEsimsIccidRefreshGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidRefreshGet(requestParameters: ESIMsApiEsimsIccidRefreshGetRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidRefreshGet(requestParameters.iccid, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The Send SMS endpoint is a powerful feature of the eSIMGo API that allows you to send text messages directly to eSIMs. This endpoint becomes particularly useful when combined with eSIMGo\'s real-time notification system, which provides updates about eSIM activity through callback functionality. The callback should be set up separatelly.   Key points:  1. Message requirements:   - UTF-8 compliant   - Length: 1-160 characters  2. Default recipient: \'eSIM\' (currently the only supported value)   - Custom identifiers available upon request  Note: For custom identifiers, please contact your Account Manager. 
     * @summary Send SMS to eSIM
     * @param {ESIMsApiEsimsIccidSmsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsIccidSmsPost(requestParameters: ESIMsApiEsimsIccidSmsPostRequest, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsIccidSmsPost(requestParameters.iccid, requestParameters.contentType, requestParameters.accept, requestParameters.esimsIccidSmsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A feature that enables the association of a unique identifier with an eSIM. This functionality allows for the integration of relevant operational data, such as customer order IDs. 
     * @summary Update eSIM Details
     * @param {ESIMsApiEsimsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ESIMsApi
     */
    public esimsPut(requestParameters: ESIMsApiEsimsPutRequest = {}, options?: RawAxiosRequestConfig) {
        return ESIMsApiFp(this.configuration).esimsPut(requestParameters.contentType, requestParameters.accept, requestParameters.iccid, requestParameters.customerRef, requestParameters.updateSimDetails, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum EsimsGetPerPageEnum {
    NUMBER_10 = 10,
    NUMBER_25 = 25,
    NUMBER_50 = 50,
    NUMBER_100 = 100
}
/**
  * @export
  * @enum {string}
  */
export enum EsimsGetDirectionEnum {
    ASC = 'asc',
    DESC = 'desc'
}
/**
  * @export
  * @enum {string}
  */
export enum EsimsGetOrderByEnum {
    ICCID = 'iccid'
}
/**
  * @export
  * @enum {string}
  */
export enum EsimsGetFilterByEnum {
    ICCID_CUSTOMER_REF_LAST_ACTION_ACTION_DATE_ASSIGNED_DATE = 'iccid, customerRef, lastAction, actionDate, assignedDate'
}
/**
  * @export
  * @enum {string}
  */
export enum EsimsIccidBundlesNameDeleteTypeEnum {
    VALIDATE = 'validate',
    TRANSACTION = 'transaction'
}
