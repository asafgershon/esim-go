/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2FutureOrdersPost200Response } from '../models';
// @ts-ignore
import type { V2FutureOrdersPost422Response } from '../models';
// @ts-ignore
import type { V2FutureOrdersPostRequest } from '../models';
// @ts-ignore
import type { V2OrdersAsyncPost202Response } from '../models';
// @ts-ignore
import type { V2OrdersPost200Response } from '../models';
// @ts-ignore
import type { V2OrdersPost422Response } from '../models';
// @ts-ignore
import type { V2VoucherEsimPost200Response } from '../models';
/**
 * RESTAPIEndpointsPlaceOrderApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsPlaceOrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to submit an order to the Airalo Partner API, which will be created on the specified due date.  To proceed, provide the required information: - Due date - Quantity - Package ID - Description (optional)  Please note: - On success, the endpoint response will include a unique 25-character request_id. - You must store this value in your system to cancel the order later if needed and to know for which order you got a response on your webhook URL. - An access token from the \"Request Access Token\" endpoint is required in the request.   **Delivery modes** **What is a webhook URL?** Webhook URL is a URL that is configured on your domain and your won webserver. That URL should be able to receive HTTP POST requests with your order data that will be sent from our servers . NOTE: We check the liveness of your webhook URL with an HTTP HEAD request to which we expect 200 OK response.  **What happens when the due date arrives?** When the due date arrives your order is processed and the order details are sent as a POST HTTP request to  either your opted in \"async_orders\" notification type url (more info [here](https://partner-api-airalo.apidog.io/async-orders-11883038e0) ) or on the \"webhhok_url\" optional parameter of this endpoint which overrides the above opted in URL. NOTE that you must have one of the above (either opted in URL or webhhok_url) provided in order to make a future order.  if you provide the optional parameter \"sharing_option\", which goes together with the \"to_email\" parameter  then an email with the eSim details will also be sent to the email provided in the \"to_email\" parameter as well. Depending from the selected sharing option which can be one of link or pdf or both you will get the eSim data  either in a PDF format attached to the email or as a link.  **What is the format of the message that is sent to the webhook URL?** The format of the message that is sent to the webhook URL is the same as the response of the [regular order](https://partner-api-airalo.apidog.io/submit-order-11883024e0). It only has one additional parameter named \"request_id\" which is the same request_id that you got in the response  when you made the future order at the time of making the order,  so that you know for which future order you got details on your webhook URL.   For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ).
         * @summary Future orders
         * @param {string} accept 
         * @param {string} authorization 
         * @param {V2FutureOrdersPostRequest} [v2FutureOrdersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FutureOrdersPost: async (accept: string, authorization: string, v2FutureOrdersPostRequest?: V2FutureOrdersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2FutureOrdersPost', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2FutureOrdersPost', 'authorization', authorization)
            const localVarPath = `/v2/future-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v2FutureOrdersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to submit an asynchronous order to the Airalo Partners API. This ensures greater performance and reduces the wait time for your desired flow. Each async order will generate unique `nanoid` stored in reponse\'s `request_id` - Make sure you store this id in your system, as it is a reference for the order which is pending processing. You should check map it for every successfully received order response on your webhook url.    Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Submit order async
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} quantity Required. The quantity of items in the order. Maximum of 50.
         * @param {string} packageId Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
         * @param {string} type Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
         * @param {string} description Optional. A custom description for the order, which can help you identify it later.
         * @param {string} webhookUrl Optional. A custom, valid url to which you will receive the order details data asynchronously. Note that you can optin or provide in request. &#x60;The webhook_url if provided in payload will overwrite the one which is opted in.&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersAsyncPost: async (accept: string, authorization: string, quantity: string, packageId: string, type: string, description: string, webhookUrl: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'authorization', authorization)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'quantity', quantity)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'packageId', packageId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'type', type)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'description', description)
            // verify required parameter 'webhookUrl' is not null or undefined
            assertParamExists('v2OrdersAsyncPost', 'webhookUrl', webhookUrl)
            const localVarPath = `/v2/orders-async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (quantity !== undefined) { 
                localVarFormParams.append('quantity', quantity as any);
            }
    
            if (packageId !== undefined) { 
                localVarFormParams.append('package_id', packageId as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (webhookUrl !== undefined) { 
                localVarFormParams.append('webhook_url', webhookUrl as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to submit an order to the Airalo Partners API. Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.      When **to_email** is set email will be sent asynchronously, the template is configured in multiple languages, as of now the  message body and subject cannot be given by the Partner
         * @summary Submit order
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} quantity Required. The quantity of items in the order. Maximum of 50.
         * @param {string} packageId Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
         * @param {string} type Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
         * @param {string} description Optional. A custom description for the order, which can help you identify it later.
         * @param {string} brandSettingsName Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
         * @param {string} toEmail Optional. If specified, email with esim sharing will be sent. sharing_option should be specified as well. 
         * @param {string} sharingOption Optional. Array. Required when to_email is set. Available options: link, pdf
         * @param {string} copyAddress Optional. Array. It uses when to_email is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersPost: async (accept: string, authorization: string, quantity: string, packageId: string, type: string, description: string, brandSettingsName: string, toEmail: string, sharingOption: string, copyAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2OrdersPost', 'accept', accept)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2OrdersPost', 'authorization', authorization)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('v2OrdersPost', 'quantity', quantity)
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('v2OrdersPost', 'packageId', packageId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('v2OrdersPost', 'type', type)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('v2OrdersPost', 'description', description)
            // verify required parameter 'brandSettingsName' is not null or undefined
            assertParamExists('v2OrdersPost', 'brandSettingsName', brandSettingsName)
            // verify required parameter 'toEmail' is not null or undefined
            assertParamExists('v2OrdersPost', 'toEmail', toEmail)
            // verify required parameter 'sharingOption' is not null or undefined
            assertParamExists('v2OrdersPost', 'sharingOption', sharingOption)
            // verify required parameter 'copyAddress' is not null or undefined
            assertParamExists('v2OrdersPost', 'copyAddress', copyAddress)
            const localVarPath = `/v2/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (quantity !== undefined) { 
                localVarFormParams.append('quantity', quantity as any);
            }
    
            if (packageId !== undefined) { 
                localVarFormParams.append('package_id', packageId as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (brandSettingsName !== undefined) { 
                localVarFormParams.append('brand_settings_name', brandSettingsName as any);
            }
    
            if (toEmail !== undefined) { 
                localVarFormParams.append('to_email', toEmail as any);
            }
    
            if (sharingOption !== undefined) { 
                localVarFormParams.append('sharing_option[]', sharingOption as any);
            }
    
            if (copyAddress !== undefined) { 
                localVarFormParams.append('copy_address[]', copyAddress as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create an esim voucher to the Airalo Partners API. Provide the required information, such as quantity and package id  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **Body Structure:**  ``` json {     \"vouchers\": [         {             \"package_id\": \"replace with actual package slug\",             \"quantity\": 3,             \"booking_reference\": \"123\"         }     ] }   ```  **Request parameters:**  - **vouchers** (array, required):          - An array of voucher objects to be created for eSIMs. Each voucher object contains the following fields:                  - **package_id** (string, required):                          - The unique identifier (slug) of the eSIM package for which the voucher is being issued.                              - Example: \"package_id\": \"eu-europe-5gb-30days\"                          - **quantity** (integer, required):                          - The number of vouchers you wish to purchase for the specified package.                              - Example: \"quantity\": 3                          - **booking_reference** (string, optional):                          - An optional field used to store the booking reference for this voucher, which can be used for tracking purposes in your own system.                              - Example: \"booking_reference\": \"123\"                              - If not provided, this field will be ignored.
         * @summary eSIM voucher
         * @param {string} authorization 
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VoucherEsimPost: async (authorization: string, contentType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('v2VoucherEsimPost', 'authorization', authorization)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('v2VoucherEsimPost', 'contentType', contentType)
            const localVarPath = `/v2/voucher/esim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsPlaceOrderApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsPlaceOrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsPlaceOrderApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to submit an order to the Airalo Partner API, which will be created on the specified due date.  To proceed, provide the required information: - Due date - Quantity - Package ID - Description (optional)  Please note: - On success, the endpoint response will include a unique 25-character request_id. - You must store this value in your system to cancel the order later if needed and to know for which order you got a response on your webhook URL. - An access token from the \"Request Access Token\" endpoint is required in the request.   **Delivery modes** **What is a webhook URL?** Webhook URL is a URL that is configured on your domain and your won webserver. That URL should be able to receive HTTP POST requests with your order data that will be sent from our servers . NOTE: We check the liveness of your webhook URL with an HTTP HEAD request to which we expect 200 OK response.  **What happens when the due date arrives?** When the due date arrives your order is processed and the order details are sent as a POST HTTP request to  either your opted in \"async_orders\" notification type url (more info [here](https://partner-api-airalo.apidog.io/async-orders-11883038e0) ) or on the \"webhhok_url\" optional parameter of this endpoint which overrides the above opted in URL. NOTE that you must have one of the above (either opted in URL or webhhok_url) provided in order to make a future order.  if you provide the optional parameter \"sharing_option\", which goes together with the \"to_email\" parameter  then an email with the eSim details will also be sent to the email provided in the \"to_email\" parameter as well. Depending from the selected sharing option which can be one of link or pdf or both you will get the eSim data  either in a PDF format attached to the email or as a link.  **What is the format of the message that is sent to the webhook URL?** The format of the message that is sent to the webhook URL is the same as the response of the [regular order](https://partner-api-airalo.apidog.io/submit-order-11883024e0). It only has one additional parameter named \"request_id\" which is the same request_id that you got in the response  when you made the future order at the time of making the order,  so that you know for which future order you got details on your webhook URL.   For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ).
         * @summary Future orders
         * @param {string} accept 
         * @param {string} authorization 
         * @param {V2FutureOrdersPostRequest} [v2FutureOrdersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2FutureOrdersPost(accept: string, authorization: string, v2FutureOrdersPostRequest?: V2FutureOrdersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2FutureOrdersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2FutureOrdersPost(accept, authorization, v2FutureOrdersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceOrderApi.v2FutureOrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to submit an asynchronous order to the Airalo Partners API. This ensures greater performance and reduces the wait time for your desired flow. Each async order will generate unique `nanoid` stored in reponse\'s `request_id` - Make sure you store this id in your system, as it is a reference for the order which is pending processing. You should check map it for every successfully received order response on your webhook url.    Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Submit order async
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} quantity Required. The quantity of items in the order. Maximum of 50.
         * @param {string} packageId Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
         * @param {string} type Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
         * @param {string} description Optional. A custom description for the order, which can help you identify it later.
         * @param {string} webhookUrl Optional. A custom, valid url to which you will receive the order details data asynchronously. Note that you can optin or provide in request. &#x60;The webhook_url if provided in payload will overwrite the one which is opted in.&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrdersAsyncPost(accept: string, authorization: string, quantity: string, packageId: string, type: string, description: string, webhookUrl: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrdersAsyncPost(accept, authorization, quantity, packageId, type, description, webhookUrl, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceOrderApi.v2OrdersAsyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to submit an order to the Airalo Partners API. Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.      When **to_email** is set email will be sent asynchronously, the template is configured in multiple languages, as of now the  message body and subject cannot be given by the Partner
         * @summary Submit order
         * @param {string} accept 
         * @param {string} authorization 
         * @param {string} quantity Required. The quantity of items in the order. Maximum of 50.
         * @param {string} packageId Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
         * @param {string} type Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
         * @param {string} description Optional. A custom description for the order, which can help you identify it later.
         * @param {string} brandSettingsName Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
         * @param {string} toEmail Optional. If specified, email with esim sharing will be sent. sharing_option should be specified as well. 
         * @param {string} sharingOption Optional. Array. Required when to_email is set. Available options: link, pdf
         * @param {string} copyAddress Optional. Array. It uses when to_email is set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrdersPost(accept: string, authorization: string, quantity: string, packageId: string, type: string, description: string, brandSettingsName: string, toEmail: string, sharingOption: string, copyAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2OrdersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrdersPost(accept, authorization, quantity, packageId, type, description, brandSettingsName, toEmail, sharingOption, copyAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceOrderApi.v2OrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint allows you to create an esim voucher to the Airalo Partners API. Provide the required information, such as quantity and package id  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **Body Structure:**  ``` json {     \"vouchers\": [         {             \"package_id\": \"replace with actual package slug\",             \"quantity\": 3,             \"booking_reference\": \"123\"         }     ] }   ```  **Request parameters:**  - **vouchers** (array, required):          - An array of voucher objects to be created for eSIMs. Each voucher object contains the following fields:                  - **package_id** (string, required):                          - The unique identifier (slug) of the eSIM package for which the voucher is being issued.                              - Example: \"package_id\": \"eu-europe-5gb-30days\"                          - **quantity** (integer, required):                          - The number of vouchers you wish to purchase for the specified package.                              - Example: \"quantity\": 3                          - **booking_reference** (string, optional):                          - An optional field used to store the booking reference for this voucher, which can be used for tracking purposes in your own system.                              - Example: \"booking_reference\": \"123\"                              - If not provided, this field will be ignored.
         * @summary eSIM voucher
         * @param {string} authorization 
         * @param {string} contentType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2VoucherEsimPost(authorization: string, contentType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2VoucherEsimPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2VoucherEsimPost(authorization, contentType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsPlaceOrderApi.v2VoucherEsimPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsPlaceOrderApi - factory interface
 * @export
 */
export const RESTAPIEndpointsPlaceOrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsPlaceOrderApiFp(configuration)
    return {
        /**
         * This endpoint allows you to submit an order to the Airalo Partner API, which will be created on the specified due date.  To proceed, provide the required information: - Due date - Quantity - Package ID - Description (optional)  Please note: - On success, the endpoint response will include a unique 25-character request_id. - You must store this value in your system to cancel the order later if needed and to know for which order you got a response on your webhook URL. - An access token from the \"Request Access Token\" endpoint is required in the request.   **Delivery modes** **What is a webhook URL?** Webhook URL is a URL that is configured on your domain and your won webserver. That URL should be able to receive HTTP POST requests with your order data that will be sent from our servers . NOTE: We check the liveness of your webhook URL with an HTTP HEAD request to which we expect 200 OK response.  **What happens when the due date arrives?** When the due date arrives your order is processed and the order details are sent as a POST HTTP request to  either your opted in \"async_orders\" notification type url (more info [here](https://partner-api-airalo.apidog.io/async-orders-11883038e0) ) or on the \"webhhok_url\" optional parameter of this endpoint which overrides the above opted in URL. NOTE that you must have one of the above (either opted in URL or webhhok_url) provided in order to make a future order.  if you provide the optional parameter \"sharing_option\", which goes together with the \"to_email\" parameter  then an email with the eSim details will also be sent to the email provided in the \"to_email\" parameter as well. Depending from the selected sharing option which can be one of link or pdf or both you will get the eSim data  either in a PDF format attached to the email or as a link.  **What is the format of the message that is sent to the webhook URL?** The format of the message that is sent to the webhook URL is the same as the response of the [regular order](https://partner-api-airalo.apidog.io/submit-order-11883024e0). It only has one additional parameter named \"request_id\" which is the same request_id that you got in the response  when you made the future order at the time of making the order,  so that you know for which future order you got details on your webhook URL.   For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ).
         * @summary Future orders
         * @param {RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2FutureOrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2FutureOrdersPost200Response> {
            return localVarFp.v2FutureOrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.v2FutureOrdersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to submit an asynchronous order to the Airalo Partners API. This ensures greater performance and reduces the wait time for your desired flow. Each async order will generate unique `nanoid` stored in reponse\'s `request_id` - Make sure you store this id in your system, as it is a reference for the order which is pending processing. You should check map it for every successfully received order response on your webhook url.    Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
         * @summary Submit order async
         * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersAsyncPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.v2OrdersAsyncPost(requestParameters.accept, requestParameters.authorization, requestParameters.quantity, requestParameters.packageId, requestParameters.type, requestParameters.description, requestParameters.webhookUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to submit an order to the Airalo Partners API. Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.      When **to_email** is set email will be sent asynchronously, the template is configured in multiple languages, as of now the  message body and subject cannot be given by the Partner
         * @summary Submit order
         * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersPost200Response> {
            return localVarFp.v2OrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.quantity, requestParameters.packageId, requestParameters.type, requestParameters.description, requestParameters.brandSettingsName, requestParameters.toEmail, requestParameters.sharingOption, requestParameters.copyAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create an esim voucher to the Airalo Partners API. Provide the required information, such as quantity and package id  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **Body Structure:**  ``` json {     \"vouchers\": [         {             \"package_id\": \"replace with actual package slug\",             \"quantity\": 3,             \"booking_reference\": \"123\"         }     ] }   ```  **Request parameters:**  - **vouchers** (array, required):          - An array of voucher objects to be created for eSIMs. Each voucher object contains the following fields:                  - **package_id** (string, required):                          - The unique identifier (slug) of the eSIM package for which the voucher is being issued.                              - Example: \"package_id\": \"eu-europe-5gb-30days\"                          - **quantity** (integer, required):                          - The number of vouchers you wish to purchase for the specified package.                              - Example: \"quantity\": 3                          - **booking_reference** (string, optional):                          - An optional field used to store the booking reference for this voucher, which can be used for tracking purposes in your own system.                              - Example: \"booking_reference\": \"123\"                              - If not provided, this field will be ignored.
         * @summary eSIM voucher
         * @param {RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2VoucherEsimPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2VoucherEsimPost200Response> {
            return localVarFp.v2VoucherEsimPost(requestParameters.authorization, requestParameters.contentType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsPlaceOrderApi - interface
 * @export
 * @interface RESTAPIEndpointsPlaceOrderApi
 */
export interface RESTAPIEndpointsPlaceOrderApiInterface {
    /**
     * This endpoint allows you to submit an order to the Airalo Partner API, which will be created on the specified due date.  To proceed, provide the required information: - Due date - Quantity - Package ID - Description (optional)  Please note: - On success, the endpoint response will include a unique 25-character request_id. - You must store this value in your system to cancel the order later if needed and to know for which order you got a response on your webhook URL. - An access token from the \"Request Access Token\" endpoint is required in the request.   **Delivery modes** **What is a webhook URL?** Webhook URL is a URL that is configured on your domain and your won webserver. That URL should be able to receive HTTP POST requests with your order data that will be sent from our servers . NOTE: We check the liveness of your webhook URL with an HTTP HEAD request to which we expect 200 OK response.  **What happens when the due date arrives?** When the due date arrives your order is processed and the order details are sent as a POST HTTP request to  either your opted in \"async_orders\" notification type url (more info [here](https://partner-api-airalo.apidog.io/async-orders-11883038e0) ) or on the \"webhhok_url\" optional parameter of this endpoint which overrides the above opted in URL. NOTE that you must have one of the above (either opted in URL or webhhok_url) provided in order to make a future order.  if you provide the optional parameter \"sharing_option\", which goes together with the \"to_email\" parameter  then an email with the eSim details will also be sent to the email provided in the \"to_email\" parameter as well. Depending from the selected sharing option which can be one of link or pdf or both you will get the eSim data  either in a PDF format attached to the email or as a link.  **What is the format of the message that is sent to the webhook URL?** The format of the message that is sent to the webhook URL is the same as the response of the [regular order](https://partner-api-airalo.apidog.io/submit-order-11883024e0). It only has one additional parameter named \"request_id\" which is the same request_id that you got in the response  when you made the future order at the time of making the order,  so that you know for which future order you got details on your webhook URL.   For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ).
     * @summary Future orders
     * @param {RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApiInterface
     */
    v2FutureOrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2FutureOrdersPost200Response>;

    /**
     * This endpoint allows you to submit an asynchronous order to the Airalo Partners API. This ensures greater performance and reduces the wait time for your desired flow. Each async order will generate unique `nanoid` stored in reponse\'s `request_id` - Make sure you store this id in your system, as it is a reference for the order which is pending processing. You should check map it for every successfully received order response on your webhook url.    Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
     * @summary Submit order async
     * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApiInterface
     */
    v2OrdersAsyncPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

    /**
     * This endpoint allows you to submit an order to the Airalo Partners API. Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.      When **to_email** is set email will be sent asynchronously, the template is configured in multiple languages, as of now the  message body and subject cannot be given by the Partner
     * @summary Submit order
     * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApiInterface
     */
    v2OrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2OrdersPost200Response>;

    /**
     * This endpoint allows you to create an esim voucher to the Airalo Partners API. Provide the required information, such as quantity and package id  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **Body Structure:**  ``` json {     \"vouchers\": [         {             \"package_id\": \"replace with actual package slug\",             \"quantity\": 3,             \"booking_reference\": \"123\"         }     ] }   ```  **Request parameters:**  - **vouchers** (array, required):          - An array of voucher objects to be created for eSIMs. Each voucher object contains the following fields:                  - **package_id** (string, required):                          - The unique identifier (slug) of the eSIM package for which the voucher is being issued.                              - Example: \"package_id\": \"eu-europe-5gb-30days\"                          - **quantity** (integer, required):                          - The number of vouchers you wish to purchase for the specified package.                              - Example: \"quantity\": 3                          - **booking_reference** (string, optional):                          - An optional field used to store the booking reference for this voucher, which can be used for tracking purposes in your own system.                              - Example: \"booking_reference\": \"123\"                              - If not provided, this field will be ignored.
     * @summary eSIM voucher
     * @param {RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApiInterface
     */
    v2VoucherEsimPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2VoucherEsimPost200Response>;

}

/**
 * Request parameters for v2FutureOrdersPost operation in RESTAPIEndpointsPlaceOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest
 */
export interface RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPost
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPost
     */
    readonly authorization: string

    /**
     * 
     * @type {V2FutureOrdersPostRequest}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPost
     */
    readonly v2FutureOrdersPostRequest?: V2FutureOrdersPostRequest
}

/**
 * Request parameters for v2OrdersAsyncPost operation in RESTAPIEndpointsPlaceOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest
 */
export interface RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly authorization: string

    /**
     * Required. The quantity of items in the order. Maximum of 50.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly quantity: string

    /**
     * Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly packageId: string

    /**
     * Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly type: string

    /**
     * Optional. A custom description for the order, which can help you identify it later.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly description: string

    /**
     * Optional. A custom, valid url to which you will receive the order details data asynchronously. Note that you can optin or provide in request. &#x60;The webhook_url if provided in payload will overwrite the one which is opted in.&#x60;
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPost
     */
    readonly webhookUrl: string
}

/**
 * Request parameters for v2OrdersPost operation in RESTAPIEndpointsPlaceOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest
 */
export interface RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly accept: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly authorization: string

    /**
     * Required. The quantity of items in the order. Maximum of 50.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly quantity: string

    /**
     * Required. The package ID associated with the order. You can obtain this from the \\\&quot;Packages / Get Packages\\\&quot; endpoint.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly packageId: string

    /**
     * Optional. The only possible value for this endpoint is \\\&quot;sim\\\&quot;. If left empty, default \\\&quot;sim\\\&quot; value will be used.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly type: string

    /**
     * Optional. A custom description for the order, which can help you identify it later.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly description: string

    /**
     * Nullable. The definition under what brand the eSIM should be shared. Null for unbranded.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly brandSettingsName: string

    /**
     * Optional. If specified, email with esim sharing will be sent. sharing_option should be specified as well. 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly toEmail: string

    /**
     * Optional. Array. Required when to_email is set. Available options: link, pdf
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly sharingOption: string

    /**
     * Optional. Array. It uses when to_email is set.
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2OrdersPost
     */
    readonly copyAddress: string
}

/**
 * Request parameters for v2VoucherEsimPost operation in RESTAPIEndpointsPlaceOrderApi.
 * @export
 * @interface RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest
 */
export interface RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPost
     */
    readonly authorization: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPost
     */
    readonly contentType: string
}

/**
 * RESTAPIEndpointsPlaceOrderApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsPlaceOrderApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsPlaceOrderApi extends BaseAPI implements RESTAPIEndpointsPlaceOrderApiInterface {
    /**
     * This endpoint allows you to submit an order to the Airalo Partner API, which will be created on the specified due date.  To proceed, provide the required information: - Due date - Quantity - Package ID - Description (optional)  Please note: - On success, the endpoint response will include a unique 25-character request_id. - You must store this value in your system to cancel the order later if needed and to know for which order you got a response on your webhook URL. - An access token from the \"Request Access Token\" endpoint is required in the request.   **Delivery modes** **What is a webhook URL?** Webhook URL is a URL that is configured on your domain and your won webserver. That URL should be able to receive HTTP POST requests with your order data that will be sent from our servers . NOTE: We check the liveness of your webhook URL with an HTTP HEAD request to which we expect 200 OK response.  **What happens when the due date arrives?** When the due date arrives your order is processed and the order details are sent as a POST HTTP request to  either your opted in \"async_orders\" notification type url (more info [here](https://partner-api-airalo.apidog.io/async-orders-11883038e0) ) or on the \"webhhok_url\" optional parameter of this endpoint which overrides the above opted in URL. NOTE that you must have one of the above (either opted in URL or webhhok_url) provided in order to make a future order.  if you provide the optional parameter \"sharing_option\", which goes together with the \"to_email\" parameter  then an email with the eSim details will also be sent to the email provided in the \"to_email\" parameter as well. Depending from the selected sharing option which can be one of link or pdf or both you will get the eSim data  either in a PDF format attached to the email or as a link.  **What is the format of the message that is sent to the webhook URL?** The format of the message that is sent to the webhook URL is the same as the response of the [regular order](https://partner-api-airalo.apidog.io/submit-order-11883024e0). It only has one additional parameter named \"request_id\" which is the same request_id that you got in the response  when you made the future order at the time of making the order,  so that you know for which future order you got details on your webhook URL.   For more details and best practices, visit our [FAQ page](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ).
     * @summary Future orders
     * @param {RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApi
     */
    public v2FutureOrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2FutureOrdersPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceOrderApiFp(this.configuration).v2FutureOrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.v2FutureOrdersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to submit an asynchronous order to the Airalo Partners API. This ensures greater performance and reduces the wait time for your desired flow. Each async order will generate unique `nanoid` stored in reponse\'s `request_id` - Make sure you store this id in your system, as it is a reference for the order which is pending processing. You should check map it for every successfully received order response on your webhook url.    Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.
     * @summary Submit order async
     * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApi
     */
    public v2OrdersAsyncPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersAsyncPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceOrderApiFp(this.configuration).v2OrdersAsyncPost(requestParameters.accept, requestParameters.authorization, requestParameters.quantity, requestParameters.packageId, requestParameters.type, requestParameters.description, requestParameters.webhookUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to submit an order to the Airalo Partners API. Provide the required information, such as quantity and package ID, and include optional description if needed.  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **direct_apple_installation_url:**  Partner API now supports direct installation on iOS devices. With the introduction of Universal Links by Apple, users with iOS 17.4 or higher can directly install eSIMs using a special URL, which can be provided to your end clients if they are using iOS version 17.4 or above.      When **to_email** is set email will be sent asynchronously, the template is configured in multiple languages, as of now the  message body and subject cannot be given by the Partner
     * @summary Submit order
     * @param {RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApi
     */
    public v2OrdersPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2OrdersPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceOrderApiFp(this.configuration).v2OrdersPost(requestParameters.accept, requestParameters.authorization, requestParameters.quantity, requestParameters.packageId, requestParameters.type, requestParameters.description, requestParameters.brandSettingsName, requestParameters.toEmail, requestParameters.sharingOption, requestParameters.copyAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create an esim voucher to the Airalo Partners API. Provide the required information, such as quantity and package id  The access token, obtained from the \"Request Access Token\" endpoint, should be included in the request.  For more informations, best practices visit our FAQ page: [https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ](https://airalopartners.zendesk.com/hc/en-us/sections/13207524820893-FAQ)  **Body Structure:**  ``` json {     \"vouchers\": [         {             \"package_id\": \"replace with actual package slug\",             \"quantity\": 3,             \"booking_reference\": \"123\"         }     ] }   ```  **Request parameters:**  - **vouchers** (array, required):          - An array of voucher objects to be created for eSIMs. Each voucher object contains the following fields:                  - **package_id** (string, required):                          - The unique identifier (slug) of the eSIM package for which the voucher is being issued.                              - Example: \"package_id\": \"eu-europe-5gb-30days\"                          - **quantity** (integer, required):                          - The number of vouchers you wish to purchase for the specified package.                              - Example: \"quantity\": 3                          - **booking_reference** (string, optional):                          - An optional field used to store the booking reference for this voucher, which can be used for tracking purposes in your own system.                              - Example: \"booking_reference\": \"123\"                              - If not provided, this field will be ignored.
     * @summary eSIM voucher
     * @param {RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsPlaceOrderApi
     */
    public v2VoucherEsimPost(requestParameters: RESTAPIEndpointsPlaceOrderApiV2VoucherEsimPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsPlaceOrderApiFp(this.configuration).v2VoucherEsimPost(requestParameters.authorization, requestParameters.contentType, options).then((request) => request(this.axios, this.basePath));
    }
}

