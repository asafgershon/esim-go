/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2TokenPost200Response } from '../models';
// @ts-ignore
import type { V2TokenPost422Response } from '../models';
/**
 * RESTAPIEndpointsAuthenticateApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsAuthenticateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint provides an access token required for making authenticated requests to the Airalo Partners API. Submit your client ID and client secret to obtain a token valid for **24 hours**. While the token remains valid for a year, we recommend refreshing it more frequently for enhanced security.    #### Important Notes   - The response contains the access token, which must be cached and reused for subsequent API calls until it expires or is refreshed.   - Store the client ID and client secret securely in an **encrypted format** on your systems.   - All actions performed using these credentials will be considered valid transactions, and the partner will be responsible for any associated costs.  
         * @summary Request access token
         * @param {string} accept 
         * @param {string} clientId Required. Unique identifier of your application. Must be kept secure and never exposed publicly.
         * @param {string} clientSecret Required. Confidential key associated with your client ID. Must be kept secure and never exposed publicly.
         * @param {string} grantType Required. The grant type should be set to \\\&quot;client_credentials\\\&quot;.  It indicates server-to-server authentication, where the client application directly requests an access token without user intervention.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TokenPost: async (accept: string, clientId: string, clientSecret: string, grantType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('v2TokenPost', 'accept', accept)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('v2TokenPost', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('v2TokenPost', 'clientSecret', clientSecret)
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('v2TokenPost', 'grantType', grantType)
            const localVarPath = `/v2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (clientId !== undefined) { 
                localVarFormParams.append('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.append('client_secret', clientSecret as any);
            }
    
            if (grantType !== undefined) { 
                localVarFormParams.append('grant_type', grantType as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsAuthenticateApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsAuthenticateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsAuthenticateApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint provides an access token required for making authenticated requests to the Airalo Partners API. Submit your client ID and client secret to obtain a token valid for **24 hours**. While the token remains valid for a year, we recommend refreshing it more frequently for enhanced security.    #### Important Notes   - The response contains the access token, which must be cached and reused for subsequent API calls until it expires or is refreshed.   - Store the client ID and client secret securely in an **encrypted format** on your systems.   - All actions performed using these credentials will be considered valid transactions, and the partner will be responsible for any associated costs.  
         * @summary Request access token
         * @param {string} accept 
         * @param {string} clientId Required. Unique identifier of your application. Must be kept secure and never exposed publicly.
         * @param {string} clientSecret Required. Confidential key associated with your client ID. Must be kept secure and never exposed publicly.
         * @param {string} grantType Required. The grant type should be set to \\\&quot;client_credentials\\\&quot;.  It indicates server-to-server authentication, where the client application directly requests an access token without user intervention.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2TokenPost(accept: string, clientId: string, clientSecret: string, grantType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2TokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2TokenPost(accept, clientId, clientSecret, grantType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsAuthenticateApi.v2TokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsAuthenticateApi - factory interface
 * @export
 */
export const RESTAPIEndpointsAuthenticateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsAuthenticateApiFp(configuration)
    return {
        /**
         * This endpoint provides an access token required for making authenticated requests to the Airalo Partners API. Submit your client ID and client secret to obtain a token valid for **24 hours**. While the token remains valid for a year, we recommend refreshing it more frequently for enhanced security.    #### Important Notes   - The response contains the access token, which must be cached and reused for subsequent API calls until it expires or is refreshed.   - Store the client ID and client secret securely in an **encrypted format** on your systems.   - All actions performed using these credentials will be considered valid transactions, and the partner will be responsible for any associated costs.  
         * @summary Request access token
         * @param {RESTAPIEndpointsAuthenticateApiV2TokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2TokenPost(requestParameters: RESTAPIEndpointsAuthenticateApiV2TokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2TokenPost200Response> {
            return localVarFp.v2TokenPost(requestParameters.accept, requestParameters.clientId, requestParameters.clientSecret, requestParameters.grantType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsAuthenticateApi - interface
 * @export
 * @interface RESTAPIEndpointsAuthenticateApi
 */
export interface RESTAPIEndpointsAuthenticateApiInterface {
    /**
     * This endpoint provides an access token required for making authenticated requests to the Airalo Partners API. Submit your client ID and client secret to obtain a token valid for **24 hours**. While the token remains valid for a year, we recommend refreshing it more frequently for enhanced security.    #### Important Notes   - The response contains the access token, which must be cached and reused for subsequent API calls until it expires or is refreshed.   - Store the client ID and client secret securely in an **encrypted format** on your systems.   - All actions performed using these credentials will be considered valid transactions, and the partner will be responsible for any associated costs.  
     * @summary Request access token
     * @param {RESTAPIEndpointsAuthenticateApiV2TokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsAuthenticateApiInterface
     */
    v2TokenPost(requestParameters: RESTAPIEndpointsAuthenticateApiV2TokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2TokenPost200Response>;

}

/**
 * Request parameters for v2TokenPost operation in RESTAPIEndpointsAuthenticateApi.
 * @export
 * @interface RESTAPIEndpointsAuthenticateApiV2TokenPostRequest
 */
export interface RESTAPIEndpointsAuthenticateApiV2TokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsAuthenticateApiV2TokenPost
     */
    readonly accept: string

    /**
     * Required. Unique identifier of your application. Must be kept secure and never exposed publicly.
     * @type {string}
     * @memberof RESTAPIEndpointsAuthenticateApiV2TokenPost
     */
    readonly clientId: string

    /**
     * Required. Confidential key associated with your client ID. Must be kept secure and never exposed publicly.
     * @type {string}
     * @memberof RESTAPIEndpointsAuthenticateApiV2TokenPost
     */
    readonly clientSecret: string

    /**
     * Required. The grant type should be set to \\\&quot;client_credentials\\\&quot;.  It indicates server-to-server authentication, where the client application directly requests an access token without user intervention.
     * @type {string}
     * @memberof RESTAPIEndpointsAuthenticateApiV2TokenPost
     */
    readonly grantType: string
}

/**
 * RESTAPIEndpointsAuthenticateApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsAuthenticateApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsAuthenticateApi extends BaseAPI implements RESTAPIEndpointsAuthenticateApiInterface {
    /**
     * This endpoint provides an access token required for making authenticated requests to the Airalo Partners API. Submit your client ID and client secret to obtain a token valid for **24 hours**. While the token remains valid for a year, we recommend refreshing it more frequently for enhanced security.    #### Important Notes   - The response contains the access token, which must be cached and reused for subsequent API calls until it expires or is refreshed.   - Store the client ID and client secret securely in an **encrypted format** on your systems.   - All actions performed using these credentials will be considered valid transactions, and the partner will be responsible for any associated costs.  
     * @summary Request access token
     * @param {RESTAPIEndpointsAuthenticateApiV2TokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsAuthenticateApi
     */
    public v2TokenPost(requestParameters: RESTAPIEndpointsAuthenticateApiV2TokenPostRequest, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsAuthenticateApiFp(this.configuration).v2TokenPost(requestParameters.accept, requestParameters.clientId, requestParameters.clientSecret, requestParameters.grantType, options).then((request) => request(this.axios, this.basePath));
    }
}

