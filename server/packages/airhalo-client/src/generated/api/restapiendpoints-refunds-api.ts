/* tslint:disable */
/* eslint-disable */
/**
 *  Airalo Developer Platform 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { V2CancelFutureOrdersPost200Response } from '../models';
// @ts-ignore
import type { V2RefundPost202Response } from '../models';
/**
 * RESTAPIEndpointsRefundsApi - axios parameter creator
 * @export
 */
export const RESTAPIEndpointsRefundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # Overview  The Airalo Refund API makes it simple to request refunds for eSIMs. This guide walks you through everything you need to know, including the API endpoint, request and response formats, error handling, and sample requests.  ## ⚠️ Important Disclaimer  > **The Refund API helps streamline the refund request process by reducing manual effort. However, submitting a request through this API does *not* guarantee approval.**   >   > Each refund request is **individually** reviewed based on Airalo\'s Refund Policy to ensure it meets all terms and conditions. Refund approvals remain subject to Airalo’s internal policies and decisions.   >  If your request meets the contract terms, the refund will be credited to your account as Airalo credits, ready to use for future transactions. > > **Please note that access to this API requires a contract amendment.** Make sure you have the right agreement in place before intergrating the service into you workflow.    
         * @summary Refund request
         * @param {string} [accept] Indicates the expected response format.
         * @param {string} [authorization] Bearer token for authenticating the request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2RefundPost: async (accept?: string, authorization?: string, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RESTAPIEndpointsRefundsApi - functional programming interface
 * @export
 */
export const RESTAPIEndpointsRefundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RESTAPIEndpointsRefundsApiAxiosParamCreator(configuration)
    return {
        /**
         * # Overview  The Airalo Refund API makes it simple to request refunds for eSIMs. This guide walks you through everything you need to know, including the API endpoint, request and response formats, error handling, and sample requests.  ## ⚠️ Important Disclaimer  > **The Refund API helps streamline the refund request process by reducing manual effort. However, submitting a request through this API does *not* guarantee approval.**   >   > Each refund request is **individually** reviewed based on Airalo\'s Refund Policy to ensure it meets all terms and conditions. Refund approvals remain subject to Airalo’s internal policies and decisions.   >  If your request meets the contract terms, the refund will be credited to your account as Airalo credits, ready to use for future transactions. > > **Please note that access to this API requires a contract amendment.** Make sure you have the right agreement in place before intergrating the service into you workflow.    
         * @summary Refund request
         * @param {string} [accept] Indicates the expected response format.
         * @param {string} [authorization] Bearer token for authenticating the request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2RefundPost(accept?: string, authorization?: string, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2RefundPost202Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2RefundPost(accept, authorization, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RESTAPIEndpointsRefundsApi.v2RefundPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RESTAPIEndpointsRefundsApi - factory interface
 * @export
 */
export const RESTAPIEndpointsRefundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RESTAPIEndpointsRefundsApiFp(configuration)
    return {
        /**
         * # Overview  The Airalo Refund API makes it simple to request refunds for eSIMs. This guide walks you through everything you need to know, including the API endpoint, request and response formats, error handling, and sample requests.  ## ⚠️ Important Disclaimer  > **The Refund API helps streamline the refund request process by reducing manual effort. However, submitting a request through this API does *not* guarantee approval.**   >   > Each refund request is **individually** reviewed based on Airalo\'s Refund Policy to ensure it meets all terms and conditions. Refund approvals remain subject to Airalo’s internal policies and decisions.   >  If your request meets the contract terms, the refund will be credited to your account as Airalo credits, ready to use for future transactions. > > **Please note that access to this API requires a contract amendment.** Make sure you have the right agreement in place before intergrating the service into you workflow.    
         * @summary Refund request
         * @param {RESTAPIEndpointsRefundsApiV2RefundPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2RefundPost(requestParameters: RESTAPIEndpointsRefundsApiV2RefundPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<V2RefundPost202Response> {
            return localVarFp.v2RefundPost(requestParameters.accept, requestParameters.authorization, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RESTAPIEndpointsRefundsApi - interface
 * @export
 * @interface RESTAPIEndpointsRefundsApi
 */
export interface RESTAPIEndpointsRefundsApiInterface {
    /**
     * # Overview  The Airalo Refund API makes it simple to request refunds for eSIMs. This guide walks you through everything you need to know, including the API endpoint, request and response formats, error handling, and sample requests.  ## ⚠️ Important Disclaimer  > **The Refund API helps streamline the refund request process by reducing manual effort. However, submitting a request through this API does *not* guarantee approval.**   >   > Each refund request is **individually** reviewed based on Airalo\'s Refund Policy to ensure it meets all terms and conditions. Refund approvals remain subject to Airalo’s internal policies and decisions.   >  If your request meets the contract terms, the refund will be credited to your account as Airalo credits, ready to use for future transactions. > > **Please note that access to this API requires a contract amendment.** Make sure you have the right agreement in place before intergrating the service into you workflow.    
     * @summary Refund request
     * @param {RESTAPIEndpointsRefundsApiV2RefundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsRefundsApiInterface
     */
    v2RefundPost(requestParameters?: RESTAPIEndpointsRefundsApiV2RefundPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2RefundPost202Response>;

}

/**
 * Request parameters for v2RefundPost operation in RESTAPIEndpointsRefundsApi.
 * @export
 * @interface RESTAPIEndpointsRefundsApiV2RefundPostRequest
 */
export interface RESTAPIEndpointsRefundsApiV2RefundPostRequest {
    /**
     * Indicates the expected response format.
     * @type {string}
     * @memberof RESTAPIEndpointsRefundsApiV2RefundPost
     */
    readonly accept?: string

    /**
     * Bearer token for authenticating the request
     * @type {string}
     * @memberof RESTAPIEndpointsRefundsApiV2RefundPost
     */
    readonly authorization?: string

    /**
     * 
     * @type {string}
     * @memberof RESTAPIEndpointsRefundsApiV2RefundPost
     */
    readonly body?: string
}

/**
 * RESTAPIEndpointsRefundsApi - object-oriented interface
 * @export
 * @class RESTAPIEndpointsRefundsApi
 * @extends {BaseAPI}
 */
export class RESTAPIEndpointsRefundsApi extends BaseAPI implements RESTAPIEndpointsRefundsApiInterface {
    /**
     * # Overview  The Airalo Refund API makes it simple to request refunds for eSIMs. This guide walks you through everything you need to know, including the API endpoint, request and response formats, error handling, and sample requests.  ## ⚠️ Important Disclaimer  > **The Refund API helps streamline the refund request process by reducing manual effort. However, submitting a request through this API does *not* guarantee approval.**   >   > Each refund request is **individually** reviewed based on Airalo\'s Refund Policy to ensure it meets all terms and conditions. Refund approvals remain subject to Airalo’s internal policies and decisions.   >  If your request meets the contract terms, the refund will be credited to your account as Airalo credits, ready to use for future transactions. > > **Please note that access to this API requires a contract amendment.** Make sure you have the right agreement in place before intergrating the service into you workflow.    
     * @summary Refund request
     * @param {RESTAPIEndpointsRefundsApiV2RefundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RESTAPIEndpointsRefundsApi
     */
    public v2RefundPost(requestParameters: RESTAPIEndpointsRefundsApiV2RefundPostRequest = {}, options?: RawAxiosRequestConfig) {
        return RESTAPIEndpointsRefundsApiFp(this.configuration).v2RefundPost(requestParameters.accept, requestParameters.authorization, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

