/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { InventoryResponse } from '../models';
// @ts-ignore
import type { Message } from '../models';
// @ts-ignore
import type { RefundInventoryItem } from '../models';
// @ts-ignore
import type { StatusMessage } from '../models';
/**
 * InventoryApi - axios parameter creator
 * @export
 */
export const InventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * All of your Organisation\'s currently purchased Bundles and their remaining usages. 
         * @summary Get bundle inventory
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryGet: async (accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refunds an item in the inventory to the organisations balance. Takes a usageId and a quantity. The usageId\'s can be found by querying the /inventory endpoint The quantity of a refund cannot exceed the remaining quantity left for the specific usageId. If you wish to refund multiple usageId\'s, multiple calls to this endpoint will need to be done. If a bundle assignment has not been started and no data has been consumed, the bundle can be refunded as a credit back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be refunded. 
         * @summary Refund bundle from inventory
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {RefundInventoryItem} [refundInventoryItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryRefundPost: async (contentType?: string, accept?: string, refundInventoryItem?: RefundInventoryItem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventory/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refundInventoryItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InventoryApi - functional programming interface
 * @export
 */
export const InventoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InventoryApiAxiosParamCreator(configuration)
    return {
        /**
         * All of your Organisation\'s currently purchased Bundles and their remaining usages. 
         * @summary Get bundle inventory
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryGet(accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryGet(accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.inventoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refunds an item in the inventory to the organisations balance. Takes a usageId and a quantity. The usageId\'s can be found by querying the /inventory endpoint The quantity of a refund cannot exceed the remaining quantity left for the specific usageId. If you wish to refund multiple usageId\'s, multiple calls to this endpoint will need to be done. If a bundle assignment has not been started and no data has been consumed, the bundle can be refunded as a credit back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be refunded. 
         * @summary Refund bundle from inventory
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {RefundInventoryItem} [refundInventoryItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoryRefundPost(contentType?: string, accept?: string, refundInventoryItem?: RefundInventoryItem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoryRefundPost(contentType, accept, refundInventoryItem, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InventoryApi.inventoryRefundPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InventoryApi - factory interface
 * @export
 */
export const InventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InventoryApiFp(configuration)
    return {
        /**
         * All of your Organisation\'s currently purchased Bundles and their remaining usages. 
         * @summary Get bundle inventory
         * @param {InventoryApiInventoryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryGet(requestParameters: InventoryApiInventoryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<InventoryResponse> {
            return localVarFp.inventoryGet(requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * Refunds an item in the inventory to the organisations balance. Takes a usageId and a quantity. The usageId\'s can be found by querying the /inventory endpoint The quantity of a refund cannot exceed the remaining quantity left for the specific usageId. If you wish to refund multiple usageId\'s, multiple calls to this endpoint will need to be done. If a bundle assignment has not been started and no data has been consumed, the bundle can be refunded as a credit back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be refunded. 
         * @summary Refund bundle from inventory
         * @param {InventoryApiInventoryRefundPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoryRefundPost(requestParameters: InventoryApiInventoryRefundPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage> {
            return localVarFp.inventoryRefundPost(requestParameters.contentType, requestParameters.accept, requestParameters.refundInventoryItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InventoryApi - interface
 * @export
 * @interface InventoryApi
 */
export interface InventoryApiInterface {
    /**
     * All of your Organisation\'s currently purchased Bundles and their remaining usages. 
     * @summary Get bundle inventory
     * @param {InventoryApiInventoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    inventoryGet(requestParameters?: InventoryApiInventoryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InventoryResponse>;

    /**
     * Refunds an item in the inventory to the organisations balance. Takes a usageId and a quantity. The usageId\'s can be found by querying the /inventory endpoint The quantity of a refund cannot exceed the remaining quantity left for the specific usageId. If you wish to refund multiple usageId\'s, multiple calls to this endpoint will need to be done. If a bundle assignment has not been started and no data has been consumed, the bundle can be refunded as a credit back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be refunded. 
     * @summary Refund bundle from inventory
     * @param {InventoryApiInventoryRefundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApiInterface
     */
    inventoryRefundPost(requestParameters?: InventoryApiInventoryRefundPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatusMessage>;

}

/**
 * Request parameters for inventoryGet operation in InventoryApi.
 * @export
 * @interface InventoryApiInventoryGetRequest
 */
export interface InventoryApiInventoryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryApiInventoryGet
     */
    readonly accept?: string
}

/**
 * Request parameters for inventoryRefundPost operation in InventoryApi.
 * @export
 * @interface InventoryApiInventoryRefundPostRequest
 */
export interface InventoryApiInventoryRefundPostRequest {
    /**
     * 
     * @type {string}
     * @memberof InventoryApiInventoryRefundPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {string}
     * @memberof InventoryApiInventoryRefundPost
     */
    readonly accept?: string

    /**
     * 
     * @type {RefundInventoryItem}
     * @memberof InventoryApiInventoryRefundPost
     */
    readonly refundInventoryItem?: RefundInventoryItem
}

/**
 * InventoryApi - object-oriented interface
 * @export
 * @class InventoryApi
 * @extends {BaseAPI}
 */
export class InventoryApi extends BaseAPI implements InventoryApiInterface {
    /**
     * All of your Organisation\'s currently purchased Bundles and their remaining usages. 
     * @summary Get bundle inventory
     * @param {InventoryApiInventoryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public inventoryGet(requestParameters: InventoryApiInventoryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).inventoryGet(requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refunds an item in the inventory to the organisations balance. Takes a usageId and a quantity. The usageId\'s can be found by querying the /inventory endpoint The quantity of a refund cannot exceed the remaining quantity left for the specific usageId. If you wish to refund multiple usageId\'s, multiple calls to this endpoint will need to be done. If a bundle assignment has not been started and no data has been consumed, the bundle can be refunded as a credit back to the organisations balance. If the bundle assignment has started, or was purchased outside of their permitted refund period, typically 60 days, it cannot be refunded. 
     * @summary Refund bundle from inventory
     * @param {InventoryApiInventoryRefundPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryApi
     */
    public inventoryRefundPost(requestParameters: InventoryApiInventoryRefundPostRequest = {}, options?: RawAxiosRequestConfig) {
        return InventoryApiFp(this.configuration).inventoryRefundPost(requestParameters.contentType, requestParameters.accept, requestParameters.refundInventoryItem, options).then((request) => request(this.axios, this.basePath));
    }
}

