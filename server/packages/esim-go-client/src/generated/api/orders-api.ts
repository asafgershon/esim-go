/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Message } from '../models';
// @ts-ignore
import type { OrderRequest } from '../models';
// @ts-ignore
import type { OrderResponseTransaction } from '../models';
// @ts-ignore
import type { OrdersPost200Response } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get details on all previous orders, including total cost and contents. Response data is paginated. 
         * @summary List orders
         * @param {string} [accept] 
         * @param {boolean} [includeIccids] Set to true to include eSIM data (ICCID, Matching ID and SMDP Address) in the response, and an ICCIDs array. 
         * @param {number} [page] Page number to return. 
         * @param {number} [limit] Number of results to return per page. 
         * @param {string} [createdAt] Specifies the date range for filtering orders. This parameter has a \&#39;lte:\&#39; prefix to specify the end date. For example, to query orders from March 1, 2024, to March 31, 2024, use the following format: &#x60;createdAt&#x3D;gte:2024-03-01T00:00:00.000Z&amp;createdAt&#x3D;lte:2024-03-31T23:59:59.999Z&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet: async (accept?: string, includeIccids?: boolean, page?: number, limit?: number, createdAt?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (includeIccids !== undefined) {
                localVarQueryParameter['includeIccids'] = includeIccids;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = createdAt;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details on an order, including total cost and contents 
         * @summary Get order detail
         * @param {string} orderReference (Required) Reference for your order
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderReferenceGet: async (orderReference: string, accept?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderReference' is not null or undefined
            assertParamExists('ordersOrderReferenceGet', 'orderReference', orderReference)
            const localVarPath = `/orders/{orderReference}`
                .replace(`{${"orderReference"}}`, encodeURIComponent(String(orderReference)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Orders can be validated and processed using this endpoint. Total will be deducted from your Organisation\'s balance.  ## Auto-assign By specifying ICCID(s) of eSIM(s) belonging to your Organisation and setting \'assign\' to true, a bundle can be automatically assigned to eSIM(s).  If specified ICCID(s) of eSIM(s) and the specified bundle(s) are not compatible, and ‘allowReassign’ set to true, the bundle(s) will be assigned to new ICCID(s).  Bundle assignments to an eSIM are usually instant but please allow for up to 10 minutes for the bundle to fully process. While the bundle is processing the eSIM can be successfully installed and the eSIM will register onto a network if within coverage.  The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  ## Usage: - eSIM ICCIDs can only be specified if assign is set to true - If assign is set to true, but no ICCIDs are provided, bundles are   assigned to new eSIMs - If ICCIDs are provided, quantity is required to match the number of   ICCIDs for each bundle - If quantity is specified and assign is set to false, the quantity of   that bundle is purchased into inventory - If new bundles and specified eSIM ICCIDs are not compatible and ‘allowReassign’ set to true, bundles will be assigned to new ICCIDs 
         * @summary Create orders
         * @param {string} [contentType] 
         * @param {OrderRequest} [orderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost: async (contentType?: string, orderRequest?: OrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get details on all previous orders, including total cost and contents. Response data is paginated. 
         * @summary List orders
         * @param {string} [accept] 
         * @param {boolean} [includeIccids] Set to true to include eSIM data (ICCID, Matching ID and SMDP Address) in the response, and an ICCIDs array. 
         * @param {number} [page] Page number to return. 
         * @param {number} [limit] Number of results to return per page. 
         * @param {string} [createdAt] Specifies the date range for filtering orders. This parameter has a \&#39;lte:\&#39; prefix to specify the end date. For example, to query orders from March 1, 2024, to March 31, 2024, use the following format: &#x60;createdAt&#x3D;gte:2024-03-01T00:00:00.000Z&amp;createdAt&#x3D;lte:2024-03-31T23:59:59.999Z&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersGet(accept?: string, includeIccids?: boolean, page?: number, limit?: number, createdAt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersGet(accept, includeIccids, page, limit, createdAt, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details on an order, including total cost and contents 
         * @summary Get order detail
         * @param {string} orderReference (Required) Reference for your order
         * @param {string} [accept] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderReferenceGet(orderReference: string, accept?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponseTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderReferenceGet(orderReference, accept, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersOrderReferenceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Orders can be validated and processed using this endpoint. Total will be deducted from your Organisation\'s balance.  ## Auto-assign By specifying ICCID(s) of eSIM(s) belonging to your Organisation and setting \'assign\' to true, a bundle can be automatically assigned to eSIM(s).  If specified ICCID(s) of eSIM(s) and the specified bundle(s) are not compatible, and ‘allowReassign’ set to true, the bundle(s) will be assigned to new ICCID(s).  Bundle assignments to an eSIM are usually instant but please allow for up to 10 minutes for the bundle to fully process. While the bundle is processing the eSIM can be successfully installed and the eSIM will register onto a network if within coverage.  The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  ## Usage: - eSIM ICCIDs can only be specified if assign is set to true - If assign is set to true, but no ICCIDs are provided, bundles are   assigned to new eSIMs - If ICCIDs are provided, quantity is required to match the number of   ICCIDs for each bundle - If quantity is specified and assign is set to false, the quantity of   that bundle is purchased into inventory - If new bundles and specified eSIM ICCIDs are not compatible and ‘allowReassign’ set to true, bundles will be assigned to new ICCIDs 
         * @summary Create orders
         * @param {string} [contentType] 
         * @param {OrderRequest} [orderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersPost(contentType?: string, orderRequest?: OrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersPost(contentType, orderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Get details on all previous orders, including total cost and contents. Response data is paginated. 
         * @summary List orders
         * @param {OrdersApiOrdersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(requestParameters: OrdersApiOrdersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseTransaction> {
            return localVarFp.ordersGet(requestParameters.accept, requestParameters.includeIccids, requestParameters.page, requestParameters.limit, requestParameters.createdAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details on an order, including total cost and contents 
         * @summary Get order detail
         * @param {OrdersApiOrdersOrderReferenceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderReferenceGet(requestParameters: OrdersApiOrdersOrderReferenceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseTransaction> {
            return localVarFp.ordersOrderReferenceGet(requestParameters.orderReference, requestParameters.accept, options).then((request) => request(axios, basePath));
        },
        /**
         * Orders can be validated and processed using this endpoint. Total will be deducted from your Organisation\'s balance.  ## Auto-assign By specifying ICCID(s) of eSIM(s) belonging to your Organisation and setting \'assign\' to true, a bundle can be automatically assigned to eSIM(s).  If specified ICCID(s) of eSIM(s) and the specified bundle(s) are not compatible, and ‘allowReassign’ set to true, the bundle(s) will be assigned to new ICCID(s).  Bundle assignments to an eSIM are usually instant but please allow for up to 10 minutes for the bundle to fully process. While the bundle is processing the eSIM can be successfully installed and the eSIM will register onto a network if within coverage.  The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  ## Usage: - eSIM ICCIDs can only be specified if assign is set to true - If assign is set to true, but no ICCIDs are provided, bundles are   assigned to new eSIMs - If ICCIDs are provided, quantity is required to match the number of   ICCIDs for each bundle - If quantity is specified and assign is set to false, the quantity of   that bundle is purchased into inventory - If new bundles and specified eSIM ICCIDs are not compatible and ‘allowReassign’ set to true, bundles will be assigned to new ICCIDs 
         * @summary Create orders
         * @param {OrdersApiOrdersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersPost(requestParameters: OrdersApiOrdersPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrdersPost200Response> {
            return localVarFp.ordersPost(requestParameters.contentType, requestParameters.orderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - interface
 * @export
 * @interface OrdersApi
 */
export interface OrdersApiInterface {
    /**
     * Get details on all previous orders, including total cost and contents. Response data is paginated. 
     * @summary List orders
     * @param {OrdersApiOrdersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersGet(requestParameters?: OrdersApiOrdersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseTransaction>;

    /**
     * Get details on an order, including total cost and contents 
     * @summary Get order detail
     * @param {OrdersApiOrdersOrderReferenceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersOrderReferenceGet(requestParameters: OrdersApiOrdersOrderReferenceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponseTransaction>;

    /**
     * Orders can be validated and processed using this endpoint. Total will be deducted from your Organisation\'s balance.  ## Auto-assign By specifying ICCID(s) of eSIM(s) belonging to your Organisation and setting \'assign\' to true, a bundle can be automatically assigned to eSIM(s).  If specified ICCID(s) of eSIM(s) and the specified bundle(s) are not compatible, and ‘allowReassign’ set to true, the bundle(s) will be assigned to new ICCID(s).  Bundle assignments to an eSIM are usually instant but please allow for up to 10 minutes for the bundle to fully process. While the bundle is processing the eSIM can be successfully installed and the eSIM will register onto a network if within coverage.  The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  ## Usage: - eSIM ICCIDs can only be specified if assign is set to true - If assign is set to true, but no ICCIDs are provided, bundles are   assigned to new eSIMs - If ICCIDs are provided, quantity is required to match the number of   ICCIDs for each bundle - If quantity is specified and assign is set to false, the quantity of   that bundle is purchased into inventory - If new bundles and specified eSIM ICCIDs are not compatible and ‘allowReassign’ set to true, bundles will be assigned to new ICCIDs 
     * @summary Create orders
     * @param {OrdersApiOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    ordersPost(requestParameters?: OrdersApiOrdersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrdersPost200Response>;

}

/**
 * Request parameters for ordersGet operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersGetRequest
 */
export interface OrdersApiOrdersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiOrdersGet
     */
    readonly accept?: string

    /**
     * Set to true to include eSIM data (ICCID, Matching ID and SMDP Address) in the response, and an ICCIDs array. 
     * @type {boolean}
     * @memberof OrdersApiOrdersGet
     */
    readonly includeIccids?: boolean

    /**
     * Page number to return. 
     * @type {number}
     * @memberof OrdersApiOrdersGet
     */
    readonly page?: number

    /**
     * Number of results to return per page. 
     * @type {number}
     * @memberof OrdersApiOrdersGet
     */
    readonly limit?: number

    /**
     * Specifies the date range for filtering orders. This parameter has a \&#39;lte:\&#39; prefix to specify the end date. For example, to query orders from March 1, 2024, to March 31, 2024, use the following format: &#x60;createdAt&#x3D;gte:2024-03-01T00:00:00.000Z&amp;createdAt&#x3D;lte:2024-03-31T23:59:59.999Z&#x60;. 
     * @type {string}
     * @memberof OrdersApiOrdersGet
     */
    readonly createdAt?: string
}

/**
 * Request parameters for ordersOrderReferenceGet operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersOrderReferenceGetRequest
 */
export interface OrdersApiOrdersOrderReferenceGetRequest {
    /**
     * (Required) Reference for your order
     * @type {string}
     * @memberof OrdersApiOrdersOrderReferenceGet
     */
    readonly orderReference: string

    /**
     * 
     * @type {string}
     * @memberof OrdersApiOrdersOrderReferenceGet
     */
    readonly accept?: string
}

/**
 * Request parameters for ordersPost operation in OrdersApi.
 * @export
 * @interface OrdersApiOrdersPostRequest
 */
export interface OrdersApiOrdersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiOrdersPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {OrderRequest}
     * @memberof OrdersApiOrdersPost
     */
    readonly orderRequest?: OrderRequest
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI implements OrdersApiInterface {
    /**
     * Get details on all previous orders, including total cost and contents. Response data is paginated. 
     * @summary List orders
     * @param {OrdersApiOrdersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersGet(requestParameters: OrdersApiOrdersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersGet(requestParameters.accept, requestParameters.includeIccids, requestParameters.page, requestParameters.limit, requestParameters.createdAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details on an order, including total cost and contents 
     * @summary Get order detail
     * @param {OrdersApiOrdersOrderReferenceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersOrderReferenceGet(requestParameters: OrdersApiOrdersOrderReferenceGetRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersOrderReferenceGet(requestParameters.orderReference, requestParameters.accept, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Orders can be validated and processed using this endpoint. Total will be deducted from your Organisation\'s balance.  ## Auto-assign By specifying ICCID(s) of eSIM(s) belonging to your Organisation and setting \'assign\' to true, a bundle can be automatically assigned to eSIM(s).  If specified ICCID(s) of eSIM(s) and the specified bundle(s) are not compatible, and ‘allowReassign’ set to true, the bundle(s) will be assigned to new ICCID(s).  Bundle assignments to an eSIM are usually instant but please allow for up to 10 minutes for the bundle to fully process. While the bundle is processing the eSIM can be successfully installed and the eSIM will register onto a network if within coverage.  The Bundle Status can be checked through [Get the Status of a bundle assigned to an eSIM](/api/v2_4/operations/esimsiccidbundlesname/get/)  ## Usage: - eSIM ICCIDs can only be specified if assign is set to true - If assign is set to true, but no ICCIDs are provided, bundles are   assigned to new eSIMs - If ICCIDs are provided, quantity is required to match the number of   ICCIDs for each bundle - If quantity is specified and assign is set to false, the quantity of   that bundle is purchased into inventory - If new bundles and specified eSIM ICCIDs are not compatible and ‘allowReassign’ set to true, bundles will be assigned to new ICCIDs 
     * @summary Create orders
     * @param {OrdersApiOrdersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersPost(requestParameters: OrdersApiOrdersPostRequest = {}, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersPost(requestParameters.contentType, requestParameters.orderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

