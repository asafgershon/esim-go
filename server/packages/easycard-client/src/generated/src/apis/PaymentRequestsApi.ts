/* tslint:disable */
/* eslint-disable */
/**
 * EasyCard Transactions API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrencyEnum,
  OperationResponse,
  PayReqQuickStatusFilterTypeEnum,
  PaymentRequestCreate,
  PaymentRequestResponse,
  PaymentRequestStatusEnum,
  QuickDateFilterTypeEnum,
  ShowDeletedEnum,
  SummariesAmountResponsePaymentRequestSummary,
} from '../models/index';

export interface ApiPaymentRequestsCancelPaymentRequestIDDeleteRequest {
    paymentRequestID: string;
}

export interface ApiPaymentRequestsExcelGetRequest {
    terminalID?: string;
    paymentRequestID?: string;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    dateFrom?: string;
    dateTo?: string;
    status?: PaymentRequestStatusEnum;
    quickStatus?: PayReqQuickStatusFilterTypeEnum;
    paymentRequestAmount?: number;
    consumerID?: string;
    consumerExternalReference?: string;
    permanent?: boolean;
    createBilling?: boolean;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiPaymentRequestsGetRequest {
    terminalID?: string;
    paymentRequestID?: string;
    currency?: CurrencyEnum;
    quickDateFilter?: QuickDateFilterTypeEnum;
    dateFrom?: string;
    dateTo?: string;
    status?: PaymentRequestStatusEnum;
    quickStatus?: PayReqQuickStatusFilterTypeEnum;
    paymentRequestAmount?: number;
    consumerID?: string;
    consumerExternalReference?: string;
    permanent?: boolean;
    createBilling?: boolean;
    take?: number;
    skip?: number;
    sortBy?: string;
    sortDesc?: boolean;
    showDeleted?: ShowDeletedEnum;
}

export interface ApiPaymentRequestsPaymentRequestIDGetRequest {
    paymentRequestID: string;
}

export interface ApiPaymentRequestsPaymentRequestIDPutRequest {
    paymentRequestID: string;
    paymentRequestCreate?: PaymentRequestCreate;
}

export interface ApiPaymentRequestsPostRequest {
    paymentRequestCreate?: PaymentRequestCreate;
}

/**
 * PaymentRequestsApi - interface
 * 
 * @export
 * @interface PaymentRequestsApiInterface
 */
export interface PaymentRequestsApiInterface {
    /**
     * 
     * @summary Cancel payment request
     * @param {string} paymentRequestID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsCancelPaymentRequestIDDeleteRaw(requestParameters: ApiPaymentRequestsCancelPaymentRequestIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Cancel payment request
     */
    apiPaymentRequestsCancelPaymentRequestIDDelete(requestParameters: ApiPaymentRequestsCancelPaymentRequestIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Get payment requests by filters in excel
     * @param {string} [terminalID] 
     * @param {string} [paymentRequestID] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {PaymentRequestStatusEnum} [status]     initial    sending    sent    viewed    payed    permanent    billingCreated    resent    paymentFailed    rejected    canceled    sendingFailed
     * @param {PayReqQuickStatusFilterTypeEnum} [quickStatus]     pending    completed    failed    canceled    overdue    viewed    permanent
     * @param {number} [paymentRequestAmount] 
     * @param {string} [consumerID] 
     * @param {string} [consumerExternalReference] 
     * @param {boolean} [permanent] 
     * @param {boolean} [createBilling] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsExcelGetRaw(requestParameters: ApiPaymentRequestsExcelGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponsePaymentRequestSummary>>;

    /**
     * Get payment requests by filters in excel
     */
    apiPaymentRequestsExcelGet(requestParameters: ApiPaymentRequestsExcelGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponsePaymentRequestSummary>;

    /**
     * 
     * @summary Get payment requests by filters
     * @param {string} [terminalID] 
     * @param {string} [paymentRequestID] 
     * @param {CurrencyEnum} [currency]     ILS    USD    EUR
     * @param {QuickDateFilterTypeEnum} [quickDateFilter]     today    yesterday    thisWeek    lastWeek    last30Days    thisMonth    lastMonth    last3Months    thisYear    lastYear
     * @param {string} [dateFrom] 
     * @param {string} [dateTo] 
     * @param {PaymentRequestStatusEnum} [status]     initial    sending    sent    viewed    payed    permanent    billingCreated    resent    paymentFailed    rejected    canceled    sendingFailed
     * @param {PayReqQuickStatusFilterTypeEnum} [quickStatus]     pending    completed    failed    canceled    overdue    viewed    permanent
     * @param {number} [paymentRequestAmount] 
     * @param {string} [consumerID] 
     * @param {string} [consumerExternalReference] 
     * @param {boolean} [permanent] 
     * @param {boolean} [createBilling] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDesc] 
     * @param {ShowDeletedEnum} [showDeleted]     OnlyActive    OnlyDeleted    All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsGetRaw(requestParameters: ApiPaymentRequestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponsePaymentRequestSummary>>;

    /**
     * Get payment requests by filters
     */
    apiPaymentRequestsGet(requestParameters: ApiPaymentRequestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponsePaymentRequestSummary>;

    /**
     * 
     * @summary Get payment request details by ID
     * @param {string} paymentRequestID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsPaymentRequestIDGetRaw(requestParameters: ApiPaymentRequestsPaymentRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentRequestResponse>>;

    /**
     * Get payment request details by ID
     */
    apiPaymentRequestsPaymentRequestIDGet(requestParameters: ApiPaymentRequestsPaymentRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentRequestResponse>;

    /**
     * 
     * @summary Create payment request
     * @param {string} paymentRequestID 
     * @param {PaymentRequestCreate} [paymentRequestCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsPaymentRequestIDPutRaw(requestParameters: ApiPaymentRequestsPaymentRequestIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create payment request
     */
    apiPaymentRequestsPaymentRequestIDPut(requestParameters: ApiPaymentRequestsPaymentRequestIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

    /**
     * 
     * @summary Create payment request
     * @param {PaymentRequestCreate} [paymentRequestCreate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentRequestsApiInterface
     */
    apiPaymentRequestsPostRaw(requestParameters: ApiPaymentRequestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;

    /**
     * Create payment request
     */
    apiPaymentRequestsPost(requestParameters: ApiPaymentRequestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;

}

/**
 * 
 */
export class PaymentRequestsApi extends runtime.BaseAPI implements PaymentRequestsApiInterface {

    /**
     * Cancel payment request
     */
    async apiPaymentRequestsCancelPaymentRequestIDDeleteRaw(requestParameters: ApiPaymentRequestsCancelPaymentRequestIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.paymentRequestID === null || requestParameters.paymentRequestID === undefined) {
            throw new runtime.RequiredError('paymentRequestID','Required parameter requestParameters.paymentRequestID was null or undefined when calling apiPaymentRequestsCancelPaymentRequestIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/paymentRequests/cancel/{paymentRequestID}`.replace(`{${"paymentRequestID"}}`, encodeURIComponent(String(requestParameters.paymentRequestID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Cancel payment request
     */
    async apiPaymentRequestsCancelPaymentRequestIDDelete(requestParameters: ApiPaymentRequestsCancelPaymentRequestIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiPaymentRequestsCancelPaymentRequestIDDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment requests by filters in excel
     */
    async apiPaymentRequestsExcelGetRaw(requestParameters: ApiPaymentRequestsExcelGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponsePaymentRequestSummary>> {
        const queryParameters: any = {};

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.paymentRequestID !== undefined) {
            queryParameters['PaymentRequestID'] = requestParameters.paymentRequestID;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.quickStatus !== undefined) {
            queryParameters['QuickStatus'] = requestParameters.quickStatus;
        }

        if (requestParameters.paymentRequestAmount !== undefined) {
            queryParameters['PaymentRequestAmount'] = requestParameters.paymentRequestAmount;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.permanent !== undefined) {
            queryParameters['Permanent'] = requestParameters.permanent;
        }

        if (requestParameters.createBilling !== undefined) {
            queryParameters['CreateBilling'] = requestParameters.createBilling;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/paymentRequests/$excel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment requests by filters in excel
     */
    async apiPaymentRequestsExcelGet(requestParameters: ApiPaymentRequestsExcelGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponsePaymentRequestSummary> {
        const response = await this.apiPaymentRequestsExcelGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment requests by filters
     */
    async apiPaymentRequestsGetRaw(requestParameters: ApiPaymentRequestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummariesAmountResponsePaymentRequestSummary>> {
        const queryParameters: any = {};

        if (requestParameters.terminalID !== undefined) {
            queryParameters['TerminalID'] = requestParameters.terminalID;
        }

        if (requestParameters.paymentRequestID !== undefined) {
            queryParameters['PaymentRequestID'] = requestParameters.paymentRequestID;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['Currency'] = requestParameters.currency;
        }

        if (requestParameters.quickDateFilter !== undefined) {
            queryParameters['QuickDateFilter'] = requestParameters.quickDateFilter;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = requestParameters.dateTo;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.quickStatus !== undefined) {
            queryParameters['QuickStatus'] = requestParameters.quickStatus;
        }

        if (requestParameters.paymentRequestAmount !== undefined) {
            queryParameters['PaymentRequestAmount'] = requestParameters.paymentRequestAmount;
        }

        if (requestParameters.consumerID !== undefined) {
            queryParameters['ConsumerID'] = requestParameters.consumerID;
        }

        if (requestParameters.consumerExternalReference !== undefined) {
            queryParameters['ConsumerExternalReference'] = requestParameters.consumerExternalReference;
        }

        if (requestParameters.permanent !== undefined) {
            queryParameters['Permanent'] = requestParameters.permanent;
        }

        if (requestParameters.createBilling !== undefined) {
            queryParameters['CreateBilling'] = requestParameters.createBilling;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['SortDesc'] = requestParameters.sortDesc;
        }

        if (requestParameters.showDeleted !== undefined) {
            queryParameters['ShowDeleted'] = requestParameters.showDeleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/paymentRequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment requests by filters
     */
    async apiPaymentRequestsGet(requestParameters: ApiPaymentRequestsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummariesAmountResponsePaymentRequestSummary> {
        const response = await this.apiPaymentRequestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get payment request details by ID
     */
    async apiPaymentRequestsPaymentRequestIDGetRaw(requestParameters: ApiPaymentRequestsPaymentRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentRequestResponse>> {
        if (requestParameters.paymentRequestID === null || requestParameters.paymentRequestID === undefined) {
            throw new runtime.RequiredError('paymentRequestID','Required parameter requestParameters.paymentRequestID was null or undefined when calling apiPaymentRequestsPaymentRequestIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/paymentRequests/{paymentRequestID}`.replace(`{${"paymentRequestID"}}`, encodeURIComponent(String(requestParameters.paymentRequestID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get payment request details by ID
     */
    async apiPaymentRequestsPaymentRequestIDGet(requestParameters: ApiPaymentRequestsPaymentRequestIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentRequestResponse> {
        const response = await this.apiPaymentRequestsPaymentRequestIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create payment request
     */
    async apiPaymentRequestsPaymentRequestIDPutRaw(requestParameters: ApiPaymentRequestsPaymentRequestIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        if (requestParameters.paymentRequestID === null || requestParameters.paymentRequestID === undefined) {
            throw new runtime.RequiredError('paymentRequestID','Required parameter requestParameters.paymentRequestID was null or undefined when calling apiPaymentRequestsPaymentRequestIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/paymentRequests/{paymentRequestID}`.replace(`{${"paymentRequestID"}}`, encodeURIComponent(String(requestParameters.paymentRequestID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentRequestCreate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create payment request
     */
    async apiPaymentRequestsPaymentRequestIDPut(requestParameters: ApiPaymentRequestsPaymentRequestIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiPaymentRequestsPaymentRequestIDPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create payment request
     */
    async apiPaymentRequestsPostRaw(requestParameters: ApiPaymentRequestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/paymentRequests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentRequestCreate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create payment request
     */
    async apiPaymentRequestsPost(requestParameters: ApiPaymentRequestsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse> {
        const response = await this.apiPaymentRequestsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
