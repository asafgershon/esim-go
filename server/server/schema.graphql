# eSIM Go GraphQL Schema
# Main schema file for the eSIM Go platform

type Query {
  # Basic hello query for testing
  hello: String!
  
  # User authentication and profile
  me: User @auth
  
  # eSIM queries
  myESIMs: [ESIM!]! @auth
  esimDetails(id: ID!): ESIM @auth
  
  dataPlans(filter: DataPlanFilter): [DataPlan!]!
  dataPlan(id: ID!): DataPlan
  
  # Order queries
  myOrders(filter: OrderFilter): [Order!]! @auth
  orderDetails(id: ID!): Order @auth

  countries: [Country!]!
  trips: [Trip!]!

  # Calculate price
  calculatePrice(numOfDays: Int!, regionId: String!, countryId: String!): Float!
}

type Mutation {
  # Authentication
  signIn(input: SignInInput!): SignInResponse
  signUp(input: SignUpInput!): SignUpResponse
  
  # Social Authentication
  signInWithApple(input: SocialSignInInput!): SignInResponse
  signInWithGoogle(input: SocialSignInInput!): SignInResponse
  
  # Phone Authentication
  sendPhoneOTP(phoneNumber: String!): SendOTPResponse
  verifyPhoneOTP(input: VerifyOTPInput!): SignInResponse
  
  # eSIM operations
  purchaseESIM(planId: ID!, input: PurchaseESIMInput!): PurchaseESIMResponse @auth
  activateESIM(esimId: ID!): ActivateESIMResponse @auth
  suspendESIM(esimId: ID!): ESIMActionResponse @auth
  restoreESIM(esimId: ID!): ESIMActionResponse @auth
  cancelESIM(esimId: ID!): ESIMActionResponse @auth
  updateESIMReference(esimId: ID!, reference: String!): ESIMActionResponse @auth
}

type Subscription {
  # Real-time eSIM status updates
  esimStatusUpdated(esimId: ID!): ESIMStatusUpdate! @auth
}

# User Types
type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  createdAt: String!
  updatedAt: String!
}

type Country {
  iso: ISOCountryCode! # ISO 3166-1 alpha-2 code
  name: String! # English name
  nameHebrew: String!
  region: String!
  flag: String
}


type Trip { 
  name: String!
  description: String!
  regionId: String!
  countries: [Country!]!
  countryIds: [ISOCountryCode!]!
}


# Authentication Types
input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

# Social Authentication
input SocialSignInInput {
  idToken: String! # JWT token from Apple/Google
  firstName: String # For first-time users
  lastName: String # For first-time users
}

# Phone Authentication
input VerifyOTPInput {
  phoneNumber: String!
  otp: String!
  firstName: String # For first-time users
  lastName: String # For first-time users
}

type SendOTPResponse {
  success: Boolean!
  error: String
  messageId: String # For tracking SMS delivery
}

type SignInResponse {
  success: Boolean!
  user: User
  sessionToken: String
  refreshToken: String
  error: String
}

type SignUpResponse {
  success: Boolean!
  user: User
  sessionToken: String
  refreshToken: String
  error: String
}

# Data Plan Types (from eSIM Go catalogue)
type DataPlan {
  id: ID!
  name: String! # eSIM Go bundle name
  description: String!
  region: String!
  countries: [Country!]!
  duration: Int! # Duration in days
  price: Float! # Price in USD
  currency: String!
  isUnlimited: Boolean!
  bundleGroup: String
  features: [String!]!
  availableQuantity: Int
}


# Data plan filtering
input DataPlanFilter {
  region: String
  country: String # ISO code
  duration: Int # Days
  maxPrice: Float
  bundleGroup: String
}

# Order Types
type Order {
  id: ID!
  reference: String! # eSIM Go order reference
  status: OrderStatus!
  dataPlan: DataPlan!
  quantity: Int!
  totalPrice: Float!
  esims: [ESIM!]!
  createdAt: String!
  updatedAt: String!
}

enum OrderStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

input OrderFilter {
  status: OrderStatus
  fromDate: String
  toDate: String
}

# eSIM Types (updated)
type ESIM {
  id: ID!
  order: Order!
  plan: DataPlan!
  iccid: String! # eSIM identifier
  customerRef: String
  qrCode: String # QR code for eSIM installation
  status: ESIMStatus!
  assignedDate: String
  lastAction: String
  actionDate: String
  bundles: [ESIMBundle!]!
  usage: ESIMUsage!
  createdAt: String!
  updatedAt: String!
}

type ESIMBundle {
  id: ID!
  name: String!
  state: BundleState!
  dataUsed: Float! # MB used
  dataRemaining: Float # MB remaining (null for unlimited)
  startDate: String
  endDate: String
}

enum BundleState {
  PROCESSING
  ACTIVE
  INACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

type ESIMUsage {
  totalUsed: Float! # Total MB used
  totalRemaining: Float # Total MB remaining (null for unlimited)
  activeBundles: [ESIMBundle!]!
}

enum ESIMStatus {
  PROCESSING
  ASSIGNED
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

# eSIM Operations
input PurchaseESIMInput {
  quantity: Int!
  customerReference: String
  autoActivate: Boolean
}

type PurchaseESIMResponse {
  success: Boolean!
  order: Order
  error: String
}

type ActivateESIMResponse {
  success: Boolean!
  esim: ESIM
  error: String
}

type ESIMActionResponse {
  success: Boolean!
  esim: ESIM
  error: String
}

type ESIMStatusUpdate {
  esimId: ID!
  status: ESIMStatus!
  dataUsed: Float
  dataRemaining: Float
  updatedAt: String!
}

scalar ISOCountryCode