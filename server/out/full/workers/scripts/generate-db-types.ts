#!/usr/bin/env bun
import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __dirname = dirname(fileURLToPath(import.meta.url));

// Configuration
const SUPABASE_PROJECT_ID = process.env.SUPABASE_PROJECT_ID;
const OUTPUT_PATH = join(__dirname, '../src/types/database.types.ts');

async function generateDatabaseTypes() {
  console.log('üîÑ Generating database types for worker package...');

  try {
    // Option 1: If using Supabase CLI locally
    console.log('üìã Attempting to generate types using Supabase CLI...');
    
    // First, check if we're in the right directory
    const supabaseDir = join(__dirname, '../../../server');
    
    try {
      // Generate types using supabase CLI
      execSync('supabase gen types typescript --local', {
        cwd: supabaseDir,
        stdio: 'pipe'
      });
      
      // Read the generated file
      const generatedPath = join(supabaseDir, 'src/database.types.ts');
      const content = readFileSync(generatedPath, 'utf-8');
      
      // Write to worker package
      writeFileSync(OUTPUT_PATH, content);
      console.log('‚úÖ Database types generated successfully from local Supabase');
      
    } catch (localError) {
      console.log('‚ö†Ô∏è  Local generation failed, trying remote generation...');
      
      // Option 2: Generate from remote if project ID is available
      if (SUPABASE_PROJECT_ID) {
        execSync(
          `supabase gen types typescript --project-id ${SUPABASE_PROJECT_ID} > ${OUTPUT_PATH}`,
          { cwd: supabaseDir, stdio: 'inherit' }
        );
        console.log('‚úÖ Database types generated successfully from remote Supabase');
      } else {
        throw new Error('No SUPABASE_PROJECT_ID environment variable found');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Failed to generate types using Supabase CLI');
    console.log('\nüìù Falling back to copying existing types...');
    
    // Fallback: Copy from server package
    try {
      const sourcePath = join(__dirname, '../../../server/src/database.types.ts');
      const content = readFileSync(sourcePath, 'utf-8');
      writeFileSync(OUTPUT_PATH, content);
      console.log('‚úÖ Database types copied from server package');
    } catch (copyError) {
      console.error('‚ùå Failed to copy database types:', copyError);
      process.exit(1);
    }
  }

  // Add a note at the top of the file
  const content = readFileSync(OUTPUT_PATH, 'utf-8');
  const updatedContent = `/**
 * Database types for worker package
 * Generated on: ${new Date().toISOString()}
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 * Run 'bun run generate:types' to update
 */

${content}`;
  
  writeFileSync(OUTPUT_PATH, updatedContent);
  console.log('‚úÖ Database types ready at:', OUTPUT_PATH);
}

// Run the script
generateDatabaseTypes().catch(console.error);