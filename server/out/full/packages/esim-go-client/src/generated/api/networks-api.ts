/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Message } from '../models';
// @ts-ignore
import type { NetworkResponse } from '../models';
/**
 * NetworksApi - axios parameter creator
 * @export
 */
export const NetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to return the networks for a country/countries searched for either by an array of countires or ISO codes (ISOs).   Alternatively, it can be toggled to return all countries and their networks.   Please refer to the rate sheet, availible to download in the eSIM Go Management Portal for a full list of country names and ISO codes. 
         * @summary Get Country Network Data
         * @param {string} [accept] 
         * @param {string} [countries] List of Countries e.g. United Kingdom, United States
         * @param {string} [isos] List of ISOs e.g. GB, US
         * @param {string} [returnAll] Used to toggle returning of all Countries e.g. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksGet: async (accept?: string, countries?: string, isos?: string, returnAll?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apikeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-Key", configuration)

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (isos !== undefined) {
                localVarQueryParameter['isos'] = isos;
            }

            if (returnAll !== undefined) {
                localVarQueryParameter['returnAll'] = returnAll;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworksApi - functional programming interface
 * @export
 */
export const NetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is used to return the networks for a country/countries searched for either by an array of countires or ISO codes (ISOs).   Alternatively, it can be toggled to return all countries and their networks.   Please refer to the rate sheet, availible to download in the eSIM Go Management Portal for a full list of country names and ISO codes. 
         * @summary Get Country Network Data
         * @param {string} [accept] 
         * @param {string} [countries] List of Countries e.g. United Kingdom, United States
         * @param {string} [isos] List of ISOs e.g. GB, US
         * @param {string} [returnAll] Used to toggle returning of all Countries e.g. true/false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async networksGet(accept?: string, countries?: string, isos?: string, returnAll?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.networksGet(accept, countries, isos, returnAll, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NetworksApi.networksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NetworksApi - factory interface
 * @export
 */
export const NetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NetworksApiFp(configuration)
    return {
        /**
         * This endpoint is used to return the networks for a country/countries searched for either by an array of countires or ISO codes (ISOs).   Alternatively, it can be toggled to return all countries and their networks.   Please refer to the rate sheet, availible to download in the eSIM Go Management Portal for a full list of country names and ISO codes. 
         * @summary Get Country Network Data
         * @param {NetworksApiNetworksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksGet(requestParameters: NetworksApiNetworksGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<NetworkResponse> {
            return localVarFp.networksGet(requestParameters.accept, requestParameters.countries, requestParameters.isos, requestParameters.returnAll, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NetworksApi - interface
 * @export
 * @interface NetworksApi
 */
export interface NetworksApiInterface {
    /**
     * This endpoint is used to return the networks for a country/countries searched for either by an array of countires or ISO codes (ISOs).   Alternatively, it can be toggled to return all countries and their networks.   Please refer to the rate sheet, availible to download in the eSIM Go Management Portal for a full list of country names and ISO codes. 
     * @summary Get Country Network Data
     * @param {NetworksApiNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApiInterface
     */
    networksGet(requestParameters?: NetworksApiNetworksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkResponse>;

}

/**
 * Request parameters for networksGet operation in NetworksApi.
 * @export
 * @interface NetworksApiNetworksGetRequest
 */
export interface NetworksApiNetworksGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NetworksApiNetworksGet
     */
    readonly accept?: string

    /**
     * List of Countries e.g. United Kingdom, United States
     * @type {string}
     * @memberof NetworksApiNetworksGet
     */
    readonly countries?: string

    /**
     * List of ISOs e.g. GB, US
     * @type {string}
     * @memberof NetworksApiNetworksGet
     */
    readonly isos?: string

    /**
     * Used to toggle returning of all Countries e.g. true/false
     * @type {string}
     * @memberof NetworksApiNetworksGet
     */
    readonly returnAll?: string
}

/**
 * NetworksApi - object-oriented interface
 * @export
 * @class NetworksApi
 * @extends {BaseAPI}
 */
export class NetworksApi extends BaseAPI implements NetworksApiInterface {
    /**
     * This endpoint is used to return the networks for a country/countries searched for either by an array of countires or ISO codes (ISOs).   Alternatively, it can be toggled to return all countries and their networks.   Please refer to the rate sheet, availible to download in the eSIM Go Management Portal for a full list of country names and ISO codes. 
     * @summary Get Country Network Data
     * @param {NetworksApiNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    public networksGet(requestParameters: NetworksApiNetworksGetRequest = {}, options?: RawAxiosRequestConfig) {
        return NetworksApiFp(this.configuration).networksGet(requestParameters.accept, requestParameters.countries, requestParameters.isos, requestParameters.returnAll, options).then((request) => request(this.axios, this.basePath));
    }
}

