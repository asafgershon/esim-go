/* tslint:disable */
/* eslint-disable */
/**
 * eSIM Go API
 * To access the eSIMGo API, you need to authenticate your requests using an API key.  Here\'s a brief overview of the authentication process:   1. Assuming that you have created account already:   - Log into your eSIMGo account at https://sso.esim-go.com/login.   - Navigate to Account Settings -> API Details to find your API key.   - Keep your API key secure and avoid sharing it with others.   2. API Key Usage:   - Include your API key in the header of all eSIMGo API requests.   - Use the header key \'X-API-KEY\' with your API key as the value.   3. Security Scheme:   - The eSIMGo API uses an HTTP security scheme type for authentication.   4. Authorization Types:   - The API supports \'apiKeyAuth\' authorization type. 
 *
 * The version of the OpenAPI document: 2.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BundleAlert } from '../models';
/**
 * CallbackApi - axios parameter creator
 * @export
 */
export const CallbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Note:** V3 of the Callback system is now available and provides additional data as well as HMAC signature validation. **This must be enabled in the eSIM Portal.** V2 of the Callback system is still available by default, but will be disabled in the future.   To enable it on the eSIM Portal go to Account Settings -> API Details -> Callback Version.   **Description:** The eSIMGo API offers a callback functionality that provides real-time notifications about eSIM activity, including data consumption and balance. This feature allows for tracking usage, automating responses, and customizing notifications, enhancing customer account management.  Key benefits include real-time updates, usage tracking, automated responses, and customizable notifications.  When data is used on an eSIM, a usage event can be sent to a URL defined by you in the eSIM Portal. The usage event will report the current bundle in use by an eSIM, and its remaining data.    To set up the URL in the eSIM Portal go to Account Settings -> API Details -> Callback URL.    Example of validating HMAC body in NodeJS:  ```javascript import crypto from \"crypto\";  const signature = crypto     .createHmac(\"sha256\", key) // key is your API Key     .update(body) // body is the raw (string) request body     .digest(\"base64\");  const matches = signature === signatureHeader; ```  Validation uses your API Key as the HMAC key. The body of the request is the raw (string) request body, and should not be parsed as JSON before validation.  **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".  **Request Body Notes:** - The \"try\" button for this endpoint is **NOT** functional - The schema defines an example message that is sent to the configured callback URL. - For more information on callback notification types, Please see the [Notifications Page](/api/notifications#overview). 
         * @summary eSIM Usage Callback
         * @param {string} [contentType] 
         * @param {BundleAlert} [bundleAlert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yourUsageCallbackUrlPost: async (contentType?: string, bundleAlert?: BundleAlert, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/your-usage-callback-url/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bundleAlert, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallbackApi - functional programming interface
 * @export
 */
export const CallbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CallbackApiAxiosParamCreator(configuration)
    return {
        /**
         * **Note:** V3 of the Callback system is now available and provides additional data as well as HMAC signature validation. **This must be enabled in the eSIM Portal.** V2 of the Callback system is still available by default, but will be disabled in the future.   To enable it on the eSIM Portal go to Account Settings -> API Details -> Callback Version.   **Description:** The eSIMGo API offers a callback functionality that provides real-time notifications about eSIM activity, including data consumption and balance. This feature allows for tracking usage, automating responses, and customizing notifications, enhancing customer account management.  Key benefits include real-time updates, usage tracking, automated responses, and customizable notifications.  When data is used on an eSIM, a usage event can be sent to a URL defined by you in the eSIM Portal. The usage event will report the current bundle in use by an eSIM, and its remaining data.    To set up the URL in the eSIM Portal go to Account Settings -> API Details -> Callback URL.    Example of validating HMAC body in NodeJS:  ```javascript import crypto from \"crypto\";  const signature = crypto     .createHmac(\"sha256\", key) // key is your API Key     .update(body) // body is the raw (string) request body     .digest(\"base64\");  const matches = signature === signatureHeader; ```  Validation uses your API Key as the HMAC key. The body of the request is the raw (string) request body, and should not be parsed as JSON before validation.  **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".  **Request Body Notes:** - The \"try\" button for this endpoint is **NOT** functional - The schema defines an example message that is sent to the configured callback URL. - For more information on callback notification types, Please see the [Notifications Page](/api/notifications#overview). 
         * @summary eSIM Usage Callback
         * @param {string} [contentType] 
         * @param {BundleAlert} [bundleAlert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async yourUsageCallbackUrlPost(contentType?: string, bundleAlert?: BundleAlert, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.yourUsageCallbackUrlPost(contentType, bundleAlert, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CallbackApi.yourUsageCallbackUrlPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CallbackApi - factory interface
 * @export
 */
export const CallbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CallbackApiFp(configuration)
    return {
        /**
         * **Note:** V3 of the Callback system is now available and provides additional data as well as HMAC signature validation. **This must be enabled in the eSIM Portal.** V2 of the Callback system is still available by default, but will be disabled in the future.   To enable it on the eSIM Portal go to Account Settings -> API Details -> Callback Version.   **Description:** The eSIMGo API offers a callback functionality that provides real-time notifications about eSIM activity, including data consumption and balance. This feature allows for tracking usage, automating responses, and customizing notifications, enhancing customer account management.  Key benefits include real-time updates, usage tracking, automated responses, and customizable notifications.  When data is used on an eSIM, a usage event can be sent to a URL defined by you in the eSIM Portal. The usage event will report the current bundle in use by an eSIM, and its remaining data.    To set up the URL in the eSIM Portal go to Account Settings -> API Details -> Callback URL.    Example of validating HMAC body in NodeJS:  ```javascript import crypto from \"crypto\";  const signature = crypto     .createHmac(\"sha256\", key) // key is your API Key     .update(body) // body is the raw (string) request body     .digest(\"base64\");  const matches = signature === signatureHeader; ```  Validation uses your API Key as the HMAC key. The body of the request is the raw (string) request body, and should not be parsed as JSON before validation.  **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".  **Request Body Notes:** - The \"try\" button for this endpoint is **NOT** functional - The schema defines an example message that is sent to the configured callback URL. - For more information on callback notification types, Please see the [Notifications Page](/api/notifications#overview). 
         * @summary eSIM Usage Callback
         * @param {CallbackApiYourUsageCallbackUrlPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        yourUsageCallbackUrlPost(requestParameters: CallbackApiYourUsageCallbackUrlPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.yourUsageCallbackUrlPost(requestParameters.contentType, requestParameters.bundleAlert, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CallbackApi - interface
 * @export
 * @interface CallbackApi
 */
export interface CallbackApiInterface {
    /**
     * **Note:** V3 of the Callback system is now available and provides additional data as well as HMAC signature validation. **This must be enabled in the eSIM Portal.** V2 of the Callback system is still available by default, but will be disabled in the future.   To enable it on the eSIM Portal go to Account Settings -> API Details -> Callback Version.   **Description:** The eSIMGo API offers a callback functionality that provides real-time notifications about eSIM activity, including data consumption and balance. This feature allows for tracking usage, automating responses, and customizing notifications, enhancing customer account management.  Key benefits include real-time updates, usage tracking, automated responses, and customizable notifications.  When data is used on an eSIM, a usage event can be sent to a URL defined by you in the eSIM Portal. The usage event will report the current bundle in use by an eSIM, and its remaining data.    To set up the URL in the eSIM Portal go to Account Settings -> API Details -> Callback URL.    Example of validating HMAC body in NodeJS:  ```javascript import crypto from \"crypto\";  const signature = crypto     .createHmac(\"sha256\", key) // key is your API Key     .update(body) // body is the raw (string) request body     .digest(\"base64\");  const matches = signature === signatureHeader; ```  Validation uses your API Key as the HMAC key. The body of the request is the raw (string) request body, and should not be parsed as JSON before validation.  **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".  **Request Body Notes:** - The \"try\" button for this endpoint is **NOT** functional - The schema defines an example message that is sent to the configured callback URL. - For more information on callback notification types, Please see the [Notifications Page](/api/notifications#overview). 
     * @summary eSIM Usage Callback
     * @param {CallbackApiYourUsageCallbackUrlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackApiInterface
     */
    yourUsageCallbackUrlPost(requestParameters?: CallbackApiYourUsageCallbackUrlPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for yourUsageCallbackUrlPost operation in CallbackApi.
 * @export
 * @interface CallbackApiYourUsageCallbackUrlPostRequest
 */
export interface CallbackApiYourUsageCallbackUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CallbackApiYourUsageCallbackUrlPost
     */
    readonly contentType?: string

    /**
     * 
     * @type {BundleAlert}
     * @memberof CallbackApiYourUsageCallbackUrlPost
     */
    readonly bundleAlert?: BundleAlert
}

/**
 * CallbackApi - object-oriented interface
 * @export
 * @class CallbackApi
 * @extends {BaseAPI}
 */
export class CallbackApi extends BaseAPI implements CallbackApiInterface {
    /**
     * **Note:** V3 of the Callback system is now available and provides additional data as well as HMAC signature validation. **This must be enabled in the eSIM Portal.** V2 of the Callback system is still available by default, but will be disabled in the future.   To enable it on the eSIM Portal go to Account Settings -> API Details -> Callback Version.   **Description:** The eSIMGo API offers a callback functionality that provides real-time notifications about eSIM activity, including data consumption and balance. This feature allows for tracking usage, automating responses, and customizing notifications, enhancing customer account management.  Key benefits include real-time updates, usage tracking, automated responses, and customizable notifications.  When data is used on an eSIM, a usage event can be sent to a URL defined by you in the eSIM Portal. The usage event will report the current bundle in use by an eSIM, and its remaining data.    To set up the URL in the eSIM Portal go to Account Settings -> API Details -> Callback URL.    Example of validating HMAC body in NodeJS:  ```javascript import crypto from \"crypto\";  const signature = crypto     .createHmac(\"sha256\", key) // key is your API Key     .update(body) // body is the raw (string) request body     .digest(\"base64\");  const matches = signature === signatureHeader; ```  Validation uses your API Key as the HMAC key. The body of the request is the raw (string) request body, and should not be parsed as JSON before validation.  **Note:** Bundle names are case sensitive e.g. \"esim_1GB_7D_IM_U\".  **Request Body Notes:** - The \"try\" button for this endpoint is **NOT** functional - The schema defines an example message that is sent to the configured callback URL. - For more information on callback notification types, Please see the [Notifications Page](/api/notifications#overview). 
     * @summary eSIM Usage Callback
     * @param {CallbackApiYourUsageCallbackUrlPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbackApi
     */
    public yourUsageCallbackUrlPost(requestParameters: CallbackApiYourUsageCallbackUrlPostRequest = {}, options?: RawAxiosRequestConfig) {
        return CallbackApiFp(this.configuration).yourUsageCallbackUrlPost(requestParameters.contentType, requestParameters.bundleAlert, options).then((request) => request(this.axios, this.basePath));
    }
}

