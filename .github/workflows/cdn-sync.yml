name: CDN Sync

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'backend/cdn/**'
  pull_request:
    types: [closed]
    branches:
      - main
      - development
    paths:
      - 'backend/cdn/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - production

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
    steps:
      - name: Determine deployment environment
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  sync-cdn:
    name: Sync CDN Assets
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CDN_SYNC_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CDN_SYNC_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set environment variables
        run: |
          echo "S3_BUCKET=${{ secrets.CDN_S3_BUCKET }}" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION=${{ secrets.CDN_DISTRIBUTION_ID }}" >> $GITHUB_ENV
          echo "CDN_URL=${{ secrets.CDN_URL }}" >> $GITHUB_ENV
          echo "ENV_NAME=${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV

      - name: Sync assets to S3
        run: |
          aws s3 sync backend/cdn/ s3://${{ env.S3_BUCKET }}/ \
            --exclude ".git/*" \
            --exclude "*.md" \
            --exclude ".gitkeep" \
            --delete \
            --cache-control "public, max-age=86400" \
            --metadata-directive REPLACE

      - name: Set cache headers for specific file types
        run: |
          # Set longer cache for images
          aws s3 cp s3://${{ env.S3_BUCKET }}/ s3://${{ env.S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.jpg" --include "*.jpeg" --include "*.png" --include "*.gif" --include "*.svg" --include "*.webp" \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE \
            --content-type "image/*"
          
          # Set longer cache for fonts
          aws s3 cp s3://${{ env.S3_BUCKET }}/ s3://${{ env.S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.woff" --include "*.woff2" --include "*.ttf" --include "*.otf" \
            --cache-control "public, max-age=31536000" \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} \
            --paths "/*"

      - name: Get CDN URL
        id: get-cdn-url
        run: |
          echo "cdn_url=${{ env.CDN_URL }}" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const cdnUrl = '${{ steps.get-cdn-url.outputs.cdn_url }}';
            const environment = '${{ env.ENV_NAME }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ðŸš€ CDN Assets Deployed!\n\n**Environment:** ${environment}\n**CDN URL:** ${cdnUrl}\n\nYour static assets are now available at the CDN.`
            });

      - name: Summary
        run: |
          echo "### ðŸŽ‰ CDN Sync Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENV_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "**CloudFront Distribution:** ${{ env.CLOUDFRONT_DISTRIBUTION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CDN URL:** ${{ steps.get-cdn-url.outputs.cdn_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Assets have been synced and CloudFront cache has been invalidated." >> $GITHUB_STEP_SUMMARY